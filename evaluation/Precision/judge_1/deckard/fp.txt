$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,1632131.java,605,620
selected,1632131.java,574,589
----------------------------------------
            if (d > max) {
                max = d;
            }
        }
        return max;
    }

    /**
   * @return the index of the max value; if max is a tie, returns the first one.
   */
    public static int argmax(float[] a) {
        float max = Float.NEGATIVE_INFINITY;
        int argmax = 0;
        for (int i = 0; i < a.length; i++) {
            if (a[i] > max) {
                max = a[i];
----------------------------------------
        for (int i = 0; i < a.length; i++) {
            if (a[i] > max) {
                max = a[i];
                argmax = i;
            }
        }
        return argmax;
    }

    /**
   * @return the index of the max value; if max is a tie, returns the last one.
   */
    public static int argmax_tieLast(double[] a) {
        double max = Double.NEGATIVE_INFINITY;
        int argmax = 0;
        for (int i = 0; i < a.length; i++) {
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
default,95806.java,156,170
default,4208.java,143,154
----------------------------------------
        } catch (TransformerException e) {
            e.printStackTrace();
        }
    }

    /**
	 * Checks the protocol to see if it is http or ftp or invalid.
	 */
    private void protocol() throws HTTPParserException {
        if (url.length() - cursor < 7) {
            quit("URL is too small and/or incomplete!");
        }
        if (url.substring(cursor, cursor + 7).equalsIgnoreCase("http://")) {
            cursor += 7;
            syntaxTreeAppendTerm("http://");
----------------------------------------
                doSearch(newKeywordsArray, expectedPrecision);
            } else {
                System.out.println("Jobs Done, thanks for trying ISearch.");
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public static boolean isInputValid(String[] array) {
        int length = array.length;
        if (length < 3 || !(isFractionValid(array[length - 2]))) {
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,1036938.java,194,218
selected,1912787.java,112,125
----------------------------------------
        return entity_id;
    }

    /**
   * ãƒ¦ãƒ¼ã‚¶ãƒ¼IDã‚’è¿”ã?—ã?¾ã?™ã€‚
   * 
   * @param rundata
   * @return ãƒ¦ãƒ¼ã‚¶ãƒ¼ID
   */
    public static int getUserId(RunData rundata) {
        JetspeedRunData jdata = (JetspeedRunData) rundata;
        String id = jdata.getJetspeedUser().getUserId();
        return Integer.parseInt(id);
    }

    /**
   * ãƒ?ãƒ¼ãƒˆãƒ¬ãƒƒãƒˆã‚’è¿”ã?—ã?¾ã?™ã€‚
   * 
   * @param rundata
   * @param context
   * @return è‡ªãƒ?ãƒ¼ãƒˆãƒ¬ãƒƒãƒˆ
   */
    public static VelocityPortlet getPortlet(RunData rundata, Context context) {
        return ((VelocityPortlet) context.get(JetspeedResources.PATH_PORTLET_KEY));
    }
----------------------------------------
        return cadena.replace(regex, reemplazo);
    }

    public static int strcmp(String cad1, String cad2) {
        return cad1.compareTo(cad2);
    }

    public static int strlen(String str) {
        return str.length();
    }

    public static int strpos(String cadena, String buscar) {
        return FuncionesPHP.strpos(cadena, buscar, 0);
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
sample,ExecuteExternalProcessAndReadInput.java,5,17
selected,556538.java,8,19
----------------------------------------
import java.lang.ProcessBuilder.Redirect;
import java.util.Map;

public class ExecuteExternalProcessAndReadInput {
	// start AND ProcessBuilder AND (redirect)|(getInputStream|getOutputStream)
	public static void execute1() throws IOException, InterruptedException {
		//Create Process Builder with Command and Arguments
		ProcessBuilder pb = new ProcessBuilder("myCommand", "myArg1", "myArg2");
		
		//Setup Execution Environment
		Map<String, String> env = pb.environment();
		env.put("VAR1", "myValue");
		env.remove("OTHERVAR");
----------------------------------------
import org.junit.Test;
import com.llq.util.LlqUtil;

public class LlqUtilTest {

    @Test
    public void removeLastTest() {
        List<String> list = new ArrayList<String>();
        list.add("s1");
        list.add("s2");
        list.add("s3");
        assertEquals("s3", LlqUtil.removeLast(list));
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
sample,CopyFileSamples.java,59,69
default,124036.java,87,99
----------------------------------------
		in.close();
		out.close();
	}
	
	public static void copyFile5(File srcFile, File destFile) throws IOException {
		InputStream in = new FileInputStream(srcFile);
		OutputStream out = new FileOutputStream(destFile);
		IOUtils.copyLarge(in, out);
		in.close();
		out.close();
	}
----------------------------------------
            } catch (java.lang.Exception ex) {
                ex.printStackTrace();
            }
        }
    }

    void ProcessQuery(String sQuery, PrintStream out) throws SQLException {
        Statement stmt = con.createStatement();
        ResultSet rs = stmt.executeQuery(sQuery);
        dispResultSet(rs, out);
        rs.close();
        stmt.close();
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
default,109624.java,140,150
default,69432.java,35,48
----------------------------------------
            mrs.close();
        } catch (SQLException e) {
            System.out.println("Error " + e);
        }
    }

    public void actionPerformed(ActionEvent evt) {
        if (evt.getSource() == tableNames) {
            if (scrollPane != null) getContentPane().remove(scrollPane);
            try {
                String tableName = (String) tableNames.getSelectedItem();
----------------------------------------
        } catch (Exception e) {
            e.printStackTrace();
        }
        return con;
    }

    public void displayDbProperties() {
        java.sql.DatabaseMetaData dm = null;
        java.sql.ResultSet rs = null;
        try {
            con = this.getConnection();
            if (con != null) {
                dm = con.getMetaData();
                System.out.println("Driver Information");
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,1407785.java,1016,1038
selected,1437552.java,460,475
----------------------------------------
                                for (PropertyChangeListener listener : listenerList) {
                                    listenerExecutor.execute(new PropertyChanged(listener, event));
                                }
                            }
                        }
                        return null;
                    }
                }
                throw new UnsupportedOperationException("The method " + method.getName() + " is not supported for the proxy type " + targetClass.getName());
            }
        }
    }

    /**
     * Gets the next id to use. The sequencer row in proxystorage_statics is incremented,
     * and the new value returned.
     * 
     * @return A new id to use
     * @throws SQLException
     */
    long nextId() throws SQLException {
        synchronized (lock) {
            PreparedStatement ist = connection.prepareStatement("update proxystorage_statics set value = value + 1 where name = ?");
----------------------------------------
            throw new IllegalArgumentException("Non-mapped property for '" + name + "(" + key + ")'" + dynaClass.getDynaProperty(name).getType().getName());
        }
        ((Map) mappedProperty).put(key, value);
    }

    /**
     * Grow the size of an indexed property
     * @param name The name of the property
     * @param indexedProperty The current property value
     * @param index The indexed value to grow the property to (i.e. one less than
     * the required size)
     * @return The new property value (grown to the appropriate size)
     */
    protected Object growIndexedProperty(String name, Object indexedProperty, int index) {
        if (indexedProperty instanceof List) {
            List list = (List) indexedProperty;
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,193062.java,379,400
selected,193062.java,69,90
----------------------------------------
            f = new File(uniqueName + "." + suffix);
            imageCounter++;
        }
        return uniqueName;
    }

    /**
     * replace images by they recompressed version according to JBIG2 standard
     * positions and image data given in imagesData
     * @param pdfName represents name of original PDF file
     * @param os represents output stream for writing changed PDF file
     * @param imagesData contains compressed images according to JBIG2 standard and informations about them
     * @throws PdfRecompressionException if version of PDF is lower than 1.4 or was catch DocumentException or IOException
     */
    public void replaceImageUsingIText(String pdfName, OutputStream os, Jbig2ForPdf imagesData) throws PdfRecompressionException {
        if (pdfName == null) {
            throw new NullPointerException("pdfName");
        }
        if (os == null) {
            throw new NullPointerException("os");
        }
        if (imagesData == null) {
----------------------------------------
        return originalImageInformations;
    }

    /**
     * This method extracts images from PDF
     * @param pdfFile input PDF file
     * @param password password for access to PDF if needed
     * @param pagesToProcess list of pages which should be processed if null given => processed all pages
     *      -- not working yet
     * @param binarize -- enables processing of nonbitonal images as well (LZW is still not
     *      processed because of output with inverted colors)
     * @throws PdfRecompressionException if problem to extract images from PDF
     */
    public void extractImages(File pdfFile, String password, Set<Integer> pagesToProcess, Boolean binarize) throws PdfRecompressionException {
        if (binarize == null) {
            binarize = false;
        }
        if (pdfFile == null) {
            throw new IllegalArgumentException("pdfFile");
        }
        String prefix = null;
        if ((prefix == null) && (pdfFile.length() > 4)) {
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
default,5385.java,292,310
default,762.java,61,77
----------------------------------------
    private JButton notesButton;

    private ButtonGroup typeGroup;

    private String fileType = "XML";

    private String validationMethod = "NONE";

    private String strictType = "OFF";

    private String InFilename;

    private String IncludeInFilenamelist = "";

    private String IncludeInFilename = "";

    private Border border;

    private Border border2;
----------------------------------------
    private JTable dbtable2;

    private JList list;

    private String tablename;

    private JTable savetable;

    private JFrame resultFrame;

    private DefaultTableModel savemodel;

    private Chainlist chainlist = new Chainlist();

    private JScrollPane scrollpane = new JScrollPane(dbtable);

    private int tableCount = 0, mergeRow = -1;
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,2282177.java,310,325
selected,2581688.java,70,91
----------------------------------------
            case KeyEvent.VK_END:
                worldRef.movePlayer(-1, 1);
                k.consume();
                break;
        }
    }

    public void mouseClicked(MouseEvent m) {
        sendCommand();
    }

    public void keyReleased(KeyEvent k) {
    }

    public void keyTyped(KeyEvent k) {
    }
----------------------------------------
        initComponents();
    }

    /**Returns an instance
	 * @return
	 * 
	 */
    public static ClientView getInstance() {
        return ClientView.instance;
    }

    /**It updates the status asynchronously
	 * 
	 */
    public void updateStatusTS() {
        SwingUtilities.invokeLater(new Runnable() {

            public void run() {
                ClientView.getInstance().updateStatus();
            }
        });
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,964280.java,10,22
selected,2190449.java,1,11
----------------------------------------
import net.java.amateras.uml.model.AbstractUMLModel;
import org.eclipse.gef.GraphicalViewer;
import org.eclipse.gef.commands.Command;
import org.eclipse.gef.commands.CommandStack;
import org.eclipse.jface.viewers.IStructuredSelection;

/**
 * 
 * @author Naoki Takezoe
 */
public class UpAction extends AbstractAttributeAndOperationAction {

    public UpAction(CommandStack stack, GraphicalViewer viewer) {
----------------------------------------
package SensorDataWebGui.diagram.part;

import java.io.IOException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Set;
import org.eclipse.core.commands.ExecutionException;
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,691395.java,136,157
selected,1134236.java,467,485
----------------------------------------
            for (int i = 0; i < dstChildren.length; i++) {
                if (!srcFiles.contains(dstChildren[i].getName())) {
                    log.debug("Deleting file: " + dstChildren[i].getAbsolutePath());
                    deleteAll(dstChildren[i]);
                }
            }
        }
    }

    /**
	 * Copies src file to dst file. If the dst file does not exist, it is
	 * created.
	 * 
	 * @param src
	 *            the file to copy
	 * @param dst
	 *            the file to copy the first file to
	 * @throws IOException
	 *             a file IO exception occurs
	 */
    public void copyFile(File src, File dst) throws IOException {
        InputStream in = new FileInputStream(src);
----------------------------------------
                for (String entry : dir.list()) if (!entry.equals("..")) doDelete(name + File.separator + entry, feedBack);
            }
            dir.delete();
        }
    }

    /**
      *
      * return true if the specified file is a binary file.
      * 
      * This implementation simply reads the first 1kb from the file and if a 0 is found, returns true  
      * 
      * @param file
      * @return
	  */
    public static boolean isBinaryFile(String file) {
        try {
            byte buffer[] = new byte[1000];
            FileInputStream in = new FileInputStream(file);
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,471888.java,12,34
selected,1565475.java,23,41
----------------------------------------
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.IOException;
import java.io.FileNotFoundException;
import org.zkoss.lang.D;
import org.zkoss.lang.Library;
import org.zkoss.util.ArraysX;

/**
 * File related utilities.
 *
 * @author tomyeh
 */
public class Files {

    protected Files() {
    }

    /**
	 * The separator representing the drive in a path. In Windows, it is
	 * ':', while 0 in other platforms.
	 */
    public static final char DRIVE_SEPARATOR_CHAR = System.getProperty("os.name").indexOf("Windows") < 0 ? (char) 0 : ':';
----------------------------------------
import java.util.Map;
import org.eclipse.core.runtime.Path;
import org.eclipse.core.runtime.Platform;
import com.aptana.ide.internal.core.CoreNatives;

/**
 * FileUtils
 */
public class FileUtils {

    /**
	 * The newline separator character
	 */
    public static String NEW_LINE = System.getProperty("line.separator");

    /**
	 * The file separator character.
	 */
    private static final char ALT_SEPARATOR_CHAR = File.separatorChar == '/' ? '\\' : '/';
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,1466807.java,84,101
selected,2531630.java,88,99
----------------------------------------
            throw new IOException("Object deserialization failed. Reason: " + e);
        }
    }

    /**
    * Copy all the data from an ImputStream to an OutputStream. The output and input stream is not flushed or closed.
    *
    * @param src the source <code>InputStream</code>
    * @param dst the destination <code>OutputStream</code>
    * @return the number of bytes that are copied
    * @throws java.io.IOException If the copy operation fails due to I/O problems
    */
    public static long copy(InputStream src, OutputStream dst) throws IOException {
        byte[] buff = new byte[BUFFER_SIZE];
        long count = 0L;
        int readcount;
        while ((readcount = src.read(buff)) > -1) {
            dst.write(buff, 0, readcount);
----------------------------------------
            out.close();
        } catch (Throwable t) {
            throw new BlogunityException(I18NStatusFactory.createUnknown(t));
        }
    }

    public static synchronized void copyFile(InputStream in, File destination) throws BlogunityException {
        try {
            OutputStream out = new FileOutputStream(destination);
            byte[] buf = new byte[1024];
            int len;
            while ((len = in.read(buf)) > 0) {
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,1752902.java,87,97
selected,2737345.java,148,160
----------------------------------------
            if (copyLength > MAX_ZERO_COPY) {
                copyLength = MAX_ZERO_COPY;
            }
            System.arraycopy(b, off + zeroLength - copyLength, b, off + zeroLength, copyLength);
            zeroLength += copyLength;
        } while (zeroLength < len);
    }

    public static final String getSpaces(int num) {
        StringBuffer sb = new StringBuffer();
        for (int i = 0; i < num; i++) {
----------------------------------------
        return nm;
    }

    /**
	 * Generiert komplett ein neues Sternensystem an der gegebener Position
	 */
    public static synchronized StarSystem generateStarSystem(final int x, final int y, final long seed) {
        _random.setSeed(seed);
        StarSystem ss = new StarSystem(new Point(x, y));
        int wert = _random.nextInt(100);
        wert = wert - STAR_GEWICHTUNG_HAUPTLINIE;
        if (wert <= 0) ss.generateHauptlinie(_random); else {
            wert = wert - STAR_GEWICHTUNG_ROTE_RIESEN;
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
default,27677.java,482,493
selected,2108348.java,477,489
----------------------------------------
            if (classFile.exists()) {
                return fullClassFileName;
            }
        }
        return null;
    }

    public void compileNameList(ArrayList classNames) {
        String classPath = System.getProperty("java.class.path");
        StringTokenizer st = new StringTokenizer(classPath, File.pathSeparator);
        ArrayList classPathDirs = new ArrayList();
        while (st.hasMoreTokens()) {
----------------------------------------
                        try {
                            ImageIO.write((BufferedImage) image, "png", imageFile);
                        } catch (IOException e) {
                            e.printStackTrace();
                        }
                        progressDisplay.loadImage(imageFile);
                    }
                }
                break;
            case RENDERMAN:
                {
                    RibRenderer4 renderer = new RibRenderer4();
                    File ribFile = new File(settings.export.workingDirectory, frameName + ".rib");
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,296669.java,17,33
default,21144.java,80,93
----------------------------------------
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.xml.sax.InputSource;
import org.xml.sax.SAXException;

public class TestPost {

    /**
     * @param args
     */
    public static void main(String[] args) {
        try {
            testTranslateTutorial();
        } catch (UnsupportedEncodingException e) {
        } catch (MalformedURLException e) {
            e.printStackTrace();
        } catch (IOException e) {
----------------------------------------
import org.dom4j.Text;
import org.dom4j.io.SAXReader;
import org.dom4j.io.SAXWriter;
import org.dom4j.io.XMLWriter;

class T implements Runnable {

    @Override
    public void run() {
        try {
            Thread.sleep(1000L);
        } catch (InterruptedException e1) {
            e1.printStackTrace();
        }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,174635.java,3,14
selected,174635.java,4,14
----------------------------------------
import javax.vecmath.Point3f;
import org.jmol.i18n.GT;
import org.jmol.util.ColorUtil;

class Widgets {

    Widget[] widgetList = new Widget[5];

    Widgets() {
        widgetList[0] = new SpinOnWidget();
        widgetList[1] = new BackgroundColorWidget();
        widgetList[2] = new StereoViewWidget();
----------------------------------------
import org.jmol.i18n.GT;
import org.jmol.util.ColorUtil;

class Widgets {

    Widget[] widgetList = new Widget[5];

    Widgets() {
        widgetList[0] = new SpinOnWidget();
        widgetList[1] = new BackgroundColorWidget();
        widgetList[2] = new StereoViewWidget();
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,1280642.java,21,37
selected,2315186.java,25,39
----------------------------------------
import iaik.pkcs.pkcs11.objects.KeyPair;
import iaik.pkcs.pkcs11.objects.Object;
import iaik.pkcs.pkcs11.objects.RSAPrivateKey;
import iaik.pkcs.pkcs11.objects.RSAPublicKey;
import iaik.pkcs.pkcs11.wrapper.Functions;

/**
 * This demo program generates a 2048 bit RSA key-pair on the token and writes
 * the public key to a file.
 *
 * @author <a href="mailto:Karl.Scheibelhofer@iaik.at"> Karl Scheibelhofer </a>
 * @version 0.1
 * @invariants
 */
public class GenerateKeyPair2048 {

    static BufferedReader input_;
----------------------------------------
import java.util.Calendar;
import java.util.Date;
import javax.security.auth.x500.X500Principal;
import org.bouncycastle.jce.provider.BouncyCastleProvider;
import org.bouncycastle.jce.provider.JDKKeyPairGenerator;
import org.bouncycastle.x509.X509V3CertificateGenerator;
import to_do_o.core.config.SWTConstants;

/**
 * This class is used e.g. for creating new certificates.
 * 
 * @author Ruediger Gad
 * 
 */
public class CA {
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
default,120042.java,546,562
selected,2014607.java,652,668
----------------------------------------
            writeHistory(STATUS_FAILED, "The 'Normalized XML' is not valid.  Reason:  " + te.getMessage());
        }
        return ret;
    }

    /**
	 * Purpose: Initialize the XML file used to filter OAi records
	 *
	 * Returns: True if the filter could be initialized, else False
	 */
    private boolean initFilter() {
        boolean ret = false;
        if (hInfo.getFilterFile().length() > 0) {
            try {
                DocumentBuilderFactory docFactory = DocumentBuilderFactory.newInstance();
                docFactory.setValidating(false);
                docFactory.setNamespaceAware(false);
----------------------------------------
            delBrowse.append("  1=0 ");
        } else {
            delBrowse.append(" doc_id in (" + docId + ")");
        }
        pstm = con.prepareStatement(delBrowse.toString());
        int count = pstm.executeUpdate();
    }

    /**
     * ï¿½ï¿½ï¿½ï¿½Ý²ï¿½Ð´ï¿½ï¿½ï¿½Ä¼ï¿½
     * @param tabName
     * @param fos
     * @throws Exception
     */
    private void resultSetOperate(String tabName, BufferedOutputStream bos) throws Exception {
        String tabPrefix = "";
        if (tabName.equalsIgnoreCase("t_ip_doc")) {
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,1763183.java,28,39
selected,529062.java,71,81
----------------------------------------
        if (buffer == null) {
            buffer = initBuffer();
        }
        return new ByteArrayInputStream(buffer);
    }

    private byte[] initBuffer() throws IOException {
        FileInputStream input = null;
        final ByteArrayOutputStream output = new ByteArrayOutputStream();
        final byte[] bytes = new byte[BUFFER_SIZE];
        try {
            input = new FileInputStream(sourceLocation);
----------------------------------------
            return new byte[] {};
        }
        InputStream input;
        try {
            input = new BufferedInputStream(new FileInputStream(uuid));
            ByteArrayOutputStream output = new ByteArrayOutputStream();
            byte[] buf = new byte[1024];
            for (; ; ) {
                int noBytesRead;
                try {
                    noBytesRead = input.read(buf);
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,120028.java,242,268
selected,120028.java,256,270
----------------------------------------
        inFuncDef = true;
    }

    /**
     * Set the auto_FLIP boolean to OFF
     */
    private void _flipoff() {
        gs.auto_flip = false;
    }

    /**
     * Set the auto_FLIP boolean to ON
     */
    private void _flipon() {
        gs.auto_flip = true;
    }

    /**
     * FLIP PoinT
     *
     * USES: loop
     */
    private void _flippt() {
        while (gs.loop-- > 0) {
            int index = pop();
            zone[gs.zp0][index].onCurve = !zone[gs.zp0][index].onCurve;
        }
----------------------------------------
        gs.auto_flip = true;
    }

    /**
     * FLIP PoinT
     *
     * USES: loop
     */
    private void _flippt() {
        while (gs.loop-- > 0) {
            int index = pop();
            zone[gs.zp0][index].onCurve = !zone[gs.zp0][index].onCurve;
        }
        gs.loop = 1;
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,1397797.java,150,160
selected,1258472.java,189,202
----------------------------------------
            page = (Integer) session.getAttribute("pageNum");
        } catch (Exception e) {
        }
        if (page == null) return 0; else return page;
    }

    public static Dimension getImageDimension(File image) {
        try {
            FileImageInputStream fiis = new FileImageInputStream(image);
            Iterator it = ImageIO.getImageReaders(fiis);
            fiis.close();
----------------------------------------
        Recipient ret = new Recipient(this, user);
        theRecipients = ArrayUtils.add(theRecipients, ret);
        return ret;
    }

    /** @param receipt The recipient to remove from the message */
    public void removeReceipient(Recipient receipt) {
        theRecipients = ArrayUtils.remove(theRecipients, receipt);
    }

    /** @return The priority with which this message was or is to be sent */
    public Priority getPriority() {
        return thePriority;
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,1744946.java,138,155
selected,1744946.java,150,162
----------------------------------------
        return 0;
    }

    public void setindexStatus(boolean indexStatus) {
        mIndexStatus = indexStatus;
    }

    public void add(File file) {
        add(file, DEFALUT_FILE_CLASS);
    }

    public void add(File file, String fileClass) {
        if (file.isDirectory()) {
            addDirectory(file, fileClass);
        } else {
            addOrdinaryFile(file, fileClass);
        }
    }
----------------------------------------
        if (file.isDirectory()) {
            addDirectory(file, fileClass);
        } else {
            addOrdinaryFile(file, fileClass);
        }
    }

    public void addDirectory(File dir, String fileClass) {
        File files[] = dir.listFiles();
        for (File file : files) {
            add(file, fileClass);
        }
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,723395.java,55,66
selected,2098428.java,1164,1177
----------------------------------------
    private NKExpress nke;

    private TrayIcon trayIcon;

    private DiscussionRenderer discRend;

    public ListAndDiscCtrl(NKExpress nne) {
        nke = nne;
        uimain = new ListWind(this);
        uiwind = new DiscussionWind(this, uimain);
        nke.addChangeListener(uimain);
        nke.addChangeListener(uiwind);
----------------------------------------
            brushShape = brush;
            brushName = getValue(NAME).toString();
            setPaintCursor();
            forcePaint = true;
        }
    }

    class ElementSelectionAction extends SandAction {

        Element element;

        public ElementSelectionAction(Element element, KeyStroke key) {
            super(null, key, "Select " + element + " element");
            this.element = element;
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,103317.java,220,235
selected,103317.java,219,229
----------------------------------------
                        deleteLine(y1 + 1);
                    }
                    editRec.mergeLine(y1);
                }
            }
            cx = x1;
            cy = y1;
            if (y2 - y1 > 400) {
                U.gc();
            }
            focusCursor();
        }

        void insert(char ch) {
            if (ch == KeyEvent.VK_ENTER) {
                if (ptSelection.isSelected()) {
----------------------------------------
                    for (int i = y1 + 1; i < y2; i++) {
                        deleteLine(y1 + 1);
                    }
                    editRec.mergeLine(y1);
                }
            }
            cx = x1;
            cy = y1;
            if (y2 - y1 > 400) {
                U.gc();
            }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,1729199.java,114,124
selected,1729199.java,92,109
----------------------------------------
            if (!folderfile.exists()) {
                folderfile.mkdirs();
            }
        } else {
            throw new FileNotFoundException("ä¸?å­˜åœ¨ zip æ–‡ä»¶");
        }
        ZipFile zipFile = new ZipFile(file);
        try {
            Enumeration<ZipArchiveEntry> en = zipFile.getEntries();
            ZipArchiveEntry ze = null;
            while (en.hasMoreElements()) {
----------------------------------------
            is.close();
            zos.closeArchiveEntry();
        }
    }

    /**
	 * è§£åŽ‹æ–‡ä»¶
	 * @param zipFileName   zip æ–‡ä»¶
	 * @param folder        ç›®æ ‡æ–‡ä»¶å¤¹ï¼Œä¸ºç©ºå°±æ˜¯å½“å‰?æ–‡ä»¶å¤¹
	 * @param isCreate      æ˜¯å?¦è¦?
	 * @throws IOException 
	 */
    @SuppressWarnings("unchecked")
    public static void unzip(String zipFileName, String folder, boolean isCreate) throws IOException {
        File file = new File(zipFileName);
        File folderfile = null;
        if (file.exists() && file.isFile()) {
            String mfolder = folder == null ? file.getParent() : folder;
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
sample,CreateRSAKeys.java,30,40
sample,CopyDirectoryTree.java,13,23
----------------------------------------
		KeyPair keyPair = keyGen.generateKeyPair();
		return keyPair;
	}
	
	public static void generateKeys2(int keySize, Path publicKey, Path privateKey) throws NoSuchAlgorithmException, IOException {
		//Fuller Example
		KeyPairGenerator keyGen = KeyPairGenerator.getInstance("RSA");
		keyGen.initialize(keySize);
		KeyPair keyPair = keyGen.generateKeyPair();
		PublicKey pubkey = keyPair.getPublic();
		PrivateKey privkey = keyPair.getPrivate();
----------------------------------------
import java.nio.file.attribute.*;


public class CopyDirectoryTree {
	// copy AND isDirectory AND list
	public static void copyDirectory1(Path src, Path dest) throws IOException {
		Files.copy(src, dest);
		if(Files.isDirectory(src)) {
			for(String filename : src.toFile().list()) {
				Path srcFile = src.resolve(filename);
				Path destFile = dest.resolve(filename);
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,1989692.java,197,218
selected,237743.java,46,64
----------------------------------------
        return createEmailString(emails);
    }

    /**
     * Creates the <code>Set</code> of email addresses to receive the email message.
     * <p>
     * Uses configured emailmappers to map user names to email addresses. After all mappings are done, mapped users are
     * checked for existence of the domain part (i.e
     * 
     * @mydomain.com) in the mapped email address. If it doesn't exist, default (if configured) is appended Any
     *                addresses set in the <code>addAlwaysAddress</code> method will always receive the email if it is
     *                sent. Any address set in the <code>addFailureAddress</code> method will receive the message if
     *                the build has failed.
     * @param logHelper
     *            <code>XMLLogHelper</code> wrapper for the build log.
     * @return A <code>Set</code> of email addresses to receive the email message.
     */
    protected Set createUserSet(XMLLogHelper logHelper) throws CruiseControlException {
        Set users = skipUsers ? new HashSet() : logHelper.getBuildParticipants();
        for (int i = 0; i < ignoreUsers.length; i++) {
            users.remove(ignoreUsers[i].getUser());
        }
----------------------------------------
            for (InternetAddress ia : ias) {
                send(ia, email);
            }
        }
    }

    /**
	 * send email to the specified address
	 *
	 * @param ia address
	 * @param email email
	 * @throws EmailException if an error occurs
	 */
    public static void send(InternetAddress ia, Email email) throws EmailException {
        EmailException ee = new EmailException("Invalid email address: " + ia.getAddress());
        String[] ss = ia.getAddress().split("@");
        if (ss.length != 2) {
            throw ee;
        }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,2020414.java,338,360
selected,2020414.java,359,381
----------------------------------------
            if (getRowCount() == 2 && matrixAction != null) matrixAction.setEnabled(true);
            if (shouldNotyfy()) fireTableRowsInserted(index, index);
        }

        /**
		 * ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½" ï¿½ ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½.
		 * @param index - ï¿½ï¿½ï¿½ï¿½ï¿½, ï¿½ï¿½ï¿½ ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½.
		 */
        protected abstract void addDataRow(int index);

        /**
		 * ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½" ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ ï¿½ ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½.
		 * ï¿½ï¿½ï¿½ï¿½ï¿½ ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ ï¿½ï¿½ï¿½ï¿½ï¿½ ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ ï¿½ï¿½
		 * ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ ï¿½ï¿½ï¿½ï¿½ ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½. ï¿½ï¿½ï¿½ ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ ï¿½ï¿½ï¿½ï¿½ï¿½ ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½
		 * ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ ï¿½ ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ ï¿½ï¿½ï¿½ï¿½ï¿½ (addDataColumn).
		 * ï¿½ï¿½ï¿½ï¿½ï¿½ ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ ï¿½ï¿½ï¿½ï¿½ ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½.
		 * @param index - ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½, ï¿½ï¿½ï¿½ ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ ï¿½ï¿½ï¿½ï¿½ ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½.
		 * @see #newData(Object)
		 * @see #addDataColumn(int)
		 */
        public void addColumn(int index) {
            addDataColumn(index);
            if (getColumnCount() == 2 && matrixAction != null) matrixAction.setEnabled(true);
----------------------------------------
            addDataColumn(index);
            if (getColumnCount() == 2 && matrixAction != null) matrixAction.setEnabled(true);
            if (shouldNotyfy()) fireTableStructureChanged();
        }

        /**
		 * ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½" ï¿½ ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½.
		 * @param index - ï¿½ï¿½ï¿½ï¿½ï¿½, ï¿½ï¿½ï¿½ ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½.
		 */
        protected abstract void addDataColumn(int index);

        /**
		 * ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½" ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ ï¿½ï¿½ ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½.
		 * ï¿½ï¿½ï¿½ï¿½ï¿½ ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ ï¿½ï¿½ï¿½ï¿½ï¿½ ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ ï¿½ï¿½
		 * ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ ï¿½ï¿½ï¿½ï¿½ ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½.
		 * ï¿½ï¿½ï¿½ ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ ï¿½ï¿½ï¿½ï¿½ï¿½ ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ ï¿½ ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ ï¿½ï¿½ï¿½ï¿½ï¿½
		 * (removeDataColumn).
		 * ï¿½ï¿½ï¿½ï¿½ï¿½ ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ ï¿½ï¿½ï¿½ï¿½ ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½.
		 * @param index - ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½, ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ ï¿½ï¿½ï¿½ï¿½ï¿½ ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½.
		 */
        public void removeColumn(int index) {
            removeDataColumn(index);
            if (getTableModel().getColumnCount() == 1 && matrixAction != null) matrixAction.setEnabled(false);
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,700821.java,85,99
sample,getMACAddresInStandardForm.java,18,29
----------------------------------------
        if (n.length() > precision) {
            n = n.substring(n.length() - precision);
        }
        return new BigInteger(n);
    }

    /**
	 * Returns the sum of all divisors of the given <code>number</code>.
	 * 
	 * @param divSum
	 * @return
	 */
    public static long sumOfDivisors(long number) {
        long upperIndex = 1 + (long) (Math.sqrt(number));
        long sum = 1;
----------------------------------------
	        else macStr += "0" + Integer.toHexString (a);

	        if (i < (mac.length - 1)) {
	            macStr += "-";
	        }
		}
		return macStr;
	}
	
	public static String getMyMacAddress2() throws SocketException, UnknownHostException {
		InetAddress ip = InetAddress.getByName("192.168.0.12");
		System.out.println(ip.getHostAddress());
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,1644774.java,363,375
selected,733071.java,204,218
----------------------------------------
        return newName;
    }

    public String mapColumnName(String name) {
        String newName = (String) columnNameMap.get(name.toLowerCase().trim());
        if (newName == null) {
            newName = name;
        }
        return newName;
    }

    public String getClassNameNoPackage(Object obj) {
        Class clazz = obj.getClass();
----------------------------------------
            mRedoParcelState = in.readParcelable(UndoParcel.class.getClassLoader());
        }
    }

    /**
     * ä¿?å­˜æ–‡æœ¬å?„ä¸ªæ“?ä½œçŠ¶æ€?
     */
    @Override
    public Parcelable onSaveInstanceState() {
        Parcelable superState = super.onSaveInstanceState();
        JecSaveState mJecSaveState = new JecSaveState(superState);
        mJecSaveState.mUndoParcelState = mUndoParcel;
        mJecSaveState.mRedoParcelState = mRedoParcel;
        return mJecSaveState;
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,1474176.java,423,440
default,69523.java,615,626
----------------------------------------
                        while (ldr != null) {
                            ldr.cancel();
                            ldr = ldr.next;
                        }
                    }
                    sock = null;
                }
                nparent = notifyParent;
            }
        }
        if (nparent) {
            parent.processConnectionClosure();
        }
    }

    public synchronized void replaceStreams(InputStream newIn, OutputStream newOut) {
        if (debug) {
            System.err.println("Replacing " + inStream + " with: " + newIn);
----------------------------------------
        } catch (Throwable e) {
            if (isVerbose && isServerMode) {
                System.err.println("STATUS: lost connection with client");
                promptDisturbed = true;
            } else {
                System.err.println("ERROR: " + e);
                promptDisturbed = true;
            }
        }
        if (promptDisturbed && shellIsRunning) {
            System.out.print("cvmsh> ");
        }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,2077391.java,250,260
selected,1963508.java,72,85
----------------------------------------
                            delta = Math.abs(h - memH);
                            ba = na;
                        }
                        mh = h;
                    }
                }
                if (na == 256 | na == -1) {
                    na = ba;
                }
                rc = new Color(nc, nb, na);
                break;
----------------------------------------
                break;
        }
        switch(iAlign & VERTICAL) {
            case TOP:
                yAdjust = itemHeight;
                break;
            case BOTTOM:
                yAdjust = height;
                break;
            case VCENTER:
                yAdjust = itemHeight + (height - itemHeight) / 2;
                break;
        }
        return new Point(xAdjust, yAdjust);
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,189302.java,550,564
default,131686.java,358,370
----------------------------------------
                if (olddttype.equalsIgnoreCase(newdttype) && (!olddttype.equalsIgnoreCase("Timestamp"))) {
                    newdata = "'" + olddata + "'";
                }
                newdataVec.addElement(newdata);
            }
            return newdataVec;
        }

        /**Migrate the data from  MSSQL to MSSQL in that case it compares 
		 * olddatatypes and newdatatypes and then replace the corresponding
		 * converted data.
		 */
        private Vector convertColDataMSSQL_MSSQL(String olddttype, String newdttype, Vector olddataVec) {
            Vector newdataVec = new Vector();
            Enumeration enm = olddataVec.elements();
----------------------------------------
            return (outputFormat + " does not confirm to date specifications ");
        }
        String dateString = null;
        try {
            dateString = formatter2.format(currentTime_2);
        } catch (Exception ex2) {
            lf.warning(ex2.getMessage() + " XAFunctoids" + " DateTimePerGivenFormat");
        }
        return dateString;
    }

    public static String dateAdd2(String inputFormat, String inputDate, String durationFormat, String duration, String outputFormat) {
        SimpleDateFormat formatter = new SimpleDateFormat(inputFormat);
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,117603.java,245,256
selected,1008938.java,226,236
----------------------------------------
                break;
            case (39):
                changeModeTo(MODE_EDIT);
                break;
        }
    }

    private void changeModeTo(int newMode) {
        switch(newMode) {
            case (MODE_BROWSE_HISTORY):
                mode = MODE_BROWSE_HISTORY;
                commandTextComponent.setForeground((Color) EXQLModuleManager.instance().getPreference(EXQLConstants.COMMANDER_BROWSE_MODE_FOREGROUND_COLOR).getValue());
----------------------------------------
                } catch (SQLException e1) {
                    throw new LDAPException("Could not delete entry or rollback transaction", LDAPException.OPERATIONS_ERROR, e.toString(), e);
                }
                throw new LDAPException("Could not delete entry", LDAPException.OPERATIONS_ERROR, e.toString(), e);
            }
        }
    }

    private void modifyEntry(ModifyInterceptorChain chain, DistinguishedName dn, ArrayList<LDAPModification> mods, Connection con) throws LDAPException {
        try {
            con.setAutoCommit(false);
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,304326.java,89,102
selected,306261.java,789,799
----------------------------------------
        super(path);
    }

    public File(File parent, String name) {
        this(parent.getAbsolutePath(), name);
    }

    public static boolean copyTo(java.io.File origin, java.io.File destiny) {
        boolean copied = true;
        try {
            InputStream in = new FileInputStream(origin);
            if (destiny.getParentFile() != null && !destiny.getParentFile().exists()) {
                destiny.getParentFile().mkdirs();
            }
----------------------------------------
                if (outChannel != null) outChannel.close();
            }
        }
    }

    public static void delFile(String path) throws Exception {
        File f = new File(path);
        if (f.exists()) {
            if (f.isDirectory()) {
                File[] files = f.listFiles();
                for (int i = 0; i < files.length; i++) delFile(path + "/" + files[i].getName());
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
sample,UnZip.java,29,39
selected,948406.java,322,334
----------------------------------------
			} else { //If file, write file
				FileOutputStream fos = new FileOutputStream(newFile);
				int len;
				while((len = zis.read(buffer)) > 0) {
					fos.write(buffer, 0, len);
				}
				fos.close();
			}
			
			//Proceed to the next entry in the zip file
			ae = zis.getNextEntry();
----------------------------------------
            return false;
        }
    }

    private synchronized void installFontFile(String fileName, CoFontFaceSpec spec) throws CoFontException {
        m_shower.showStatus("Installing font " + spec + " from file " + fileName);
        File file;
        try {
            file = new ClassPathResource(fileName).getFile();
        } catch (IOException e) {
            throw new CoFontException(e);
        }
        CoFontFileInfoExtractor parser = CoAbstractFontFileInfoExtractor.parseFontFile(file);
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,86702.java,33,45
selected,2003724.java,16,26
----------------------------------------
import be.fedict.trust.client.WSSecurityClientHandler;
import be.fedict.trust.service.TrustService;
import be.fedict.trust.service.entity.KeyStoreType;
import be.fedict.trust.service.entity.WSSecurityConfigEntity;
import be.fedict.trust.xkms2.WSSecurityServerHandler;

/**
 * eID Trust Service WS-Security SOAP handler test.
 * 
 * @author wvdhaute
 * 
 */
public class WSSecurityTest {
----------------------------------------
import javax.crypto.spec.PBEParameterSpec;
import javax.swing.*;
import mail.EncSupplyException;
import mail.Errors;
import mail.Message;
import mail.node.crypt.CryptEngine;
import java.io.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.WindowAdapter;
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
default,21199.java,77,87
default,21199.java,79,90
----------------------------------------
            template.replaceAll("$usingCAPTCHA$", "true");
        } else {
            template.replaceAll("$usingCAPTCHA$", "false");
        }
        template.replaceAll("$title", "Channel Data Import");
        template.replaceAll("$action", "/servlet/ChannelDataRes?action=13");
        return template.getPageBytes();
    }

    private byte[] exportChannelList(HTTPurl urlData) throws Exception {
        StringBuffer buff = new StringBuffer();
----------------------------------------
            template.replaceAll("$usingCAPTCHA$", "false");
        }
        template.replaceAll("$title", "Channel Data Import");
        template.replaceAll("$action", "/servlet/ChannelDataRes?action=13");
        return template.getPageBytes();
    }

    private byte[] exportChannelList(HTTPurl urlData) throws Exception {
        StringBuffer buff = new StringBuffer();
        buff.append("HTTP/1.0 200 OK\nContent-Type: text/xml\n");
        buff.append("Content-Disposition: attachment; filename=\"channels.xml\"\n");
        buff.append("Pragma: no-cache\n");
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
default,26117.java,397,408
default,26117.java,403,413
----------------------------------------
                juego_empezado = false;
                en_menu_principal = true;
                repaint();
            }
            aviso_teclas = false;
            if (sin_asignar) {
                atras = e.VK_LEFT;
                salto = e.VK_A;
                adelante = e.VK_RIGHT;
                disparo = e.VK_S;
                sin_asignar = false;
            }
----------------------------------------
                atras = e.VK_LEFT;
                salto = e.VK_A;
                adelante = e.VK_RIGHT;
                disparo = e.VK_S;
                sin_asignar = false;
            }
            if (opcion2 == 1) {
                atras = e.getKeyCode();
                opcion2 = 5;
                repaint();
            }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,451010.java,663,673
selected,451010.java,649,659
----------------------------------------
            for (i = 0; i < 16; i++) {
                if (inUse16[i]) {
                    for (j = 0; j < 16; j++) {
                        if (inUse[i * 16 + j]) {
                            bsW(1, 1);
                        } else {
                            bsW(1, 0);
                        }
                    }
                }
            }
----------------------------------------
                for (j = 0; j < 16; j++) {
                    if (inUse[i * 16 + j]) {
                        inUse16[i] = true;
                    }
                }
            }
            nBytes = bytesOut;
            for (i = 0; i < 16; i++) {
                if (inUse16[i]) {
                    bsW(1, 1);
                } else {
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,1672631.java,313,323
selected,1577394.java,861,871
----------------------------------------
                return negativeNumberRule;
            } else {
                number = -number;
            }
        }
        int lo = 0;
        int hi = rules.length;
        if (hi > 0) {
            while (lo < hi) {
                int mid = (lo + hi) / 2;
                if (rules[mid].getBaseValue() == number) {
----------------------------------------
        double t1 = 1;
        while (true) {
            double th = (t0 + t1) / 2;
            if (th == t0 || th == t1) {
                return t1;
            }
            double y = YforT(th);
            if (y < y0) {
                t0 = th;
                yt0 = y;
            } else if (y > y0) {
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
default,116718.java,402,418
default,55615.java,603,632
----------------------------------------
        for (int i = 0; i < cmd.length; i++) cmd[i] = (String) v.elementAt(i);
        return cmd;
    }

    class UndoAction extends AbstractAction {

        public UndoAction() {
            super("Undo");
            setEnabled(false);
        }

        public void actionPerformed(ActionEvent e) {
        }

        protected void update() {
        }
    }
----------------------------------------
        return sonTypeSelectionne;
    }

    /**
     * accesseur vers la carte
     * @return renvoie l'objet UneCarte associï¿½.
     */
    public UneCarte getsaCarte() {
        return saCarte;
    }

    public void setsaCarte(UneCarte telleCarte) {
        saCarte = telleCarte;
    }

    /**
     * change le mode de l'ï¿½diteur
     * @param telMode Constante correspondant au mode.
     */
    public void setsonMode(int telMode) {
        sonMode = telMode;
    }

    /**
     * Lance des dï¿½s ï¿½ l'aide d'une chaine et renvoie le rï¿½sultat sous forme de tableau.
     * @param lesDes Chaine de type "xDy"
     * @return les rï¿½sultats
     */
    public static int[] lanceLesDes(String lesDes) {
        int leNb = Integer.parseInt(lesDes.split("[dD]")[0]);
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,1926268.java,32,42
selected,358857.java,145,162
----------------------------------------
        for (int i = 0; i < source.length; i++) {
            result[i] = source[i];
        }
        return result;
    }

    public static final boolean[] copy(boolean[] source) {
        boolean[] result = new boolean[source.length];
        for (int i = 0; i < source.length; i++) {
            result[i] = source[i];
        }
----------------------------------------
                    double distance = BitStringUtils.hammingDistance(potential, patterns[j]);
                    if (distance < minDistance) {
                        isSuitablePattern = false;
                    }
                }
            } while (!isSuitablePattern);
            patterns[i] = potential;
        }
        return patterns;
    }

    /**
     * Swap two randomly selected elements in the provided vector, permitting re-selection
     * @param v
     * @param r
     */
    public static final void randomSwap(int[] v, Random r) {
        int s1 = r.nextInt(v.length);
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,2051877.java,461,474
selected,2572341.java,141,166
----------------------------------------
        return comparator;
    }

    /**
   * Returns the first element of Btree which satisfies the condition.
   *
   * @param condition :
   * @return : BTreeElement if found any appropriate element otherwise null.
   */
    public Object seekFromTopRelative(_IndexPredicate[] condition) throws DException {
        if (getSize() == 0) return null;
        BTreeNode currentRootNode = nodeManager.getRootNode(null);
        return currentRootNode == null ? null : searchNode(currentRootNode, condition, new BTreeReader(btreeCharacteristics), true);
    }
----------------------------------------
                if (v.getElement() < low) v = v.getRc(); else v = v.getLc();
            }
        }
        return v;
    }

    /** 
     * Query2D returns the total number of points contained in the window
     * [xlow, xhigh] X [ylow, yhigh].
     * If find a childless point in [xlow, xhigh], then check its Y coordinate.
     * First check left side of split leaf, then the right side.
     * If left is good, then all the right side is good too. 
     * if left is not good, go a little right.
     *
     * @return the total number of points contained in the window range
     * @param xlow the leftmost value of x coordinate
     * @param xhigh the rightmost value of x coordinate
     * @param ylow the lowest value of y coordinate
     * @param yhigh the highest value of y coordinate
     */
    public int query2D(int xlow, int xhigh, int ylow, int yhigh) {
        if (root == null) return 0;
        int count = 0;
        RangeNode v = findSplitRangeNode(xlow, xhigh);
        if (v.childless()) {
            RangeTree t = (RangeTree) (v.getData());
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,141242.java,1,11
selected,1933534.java,1,11
----------------------------------------
package org.springframework.richclient.components;

import java.awt.AWTException;
import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Rectangle;
import java.awt.Robot;
import java.awt.image.BufferedImage;
import java.awt.image.ConvolveOp;
import java.awt.image.Kernel;
----------------------------------------
package si.mk.k3.view3d;

import java.awt.Dimension;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.Robot;
import java.awt.event.ActionEvent;
import java.awt.event.KeyEvent;
import java.awt.image.BufferedImage;
import java.io.File;
import javax.imageio.ImageIO;
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,2067841.java,65,82
selected,2067841.java,76,92
----------------------------------------
        } catch (FTPException e) {
            e.printStackTrace();
        } finally {
            speedTimer.cancel();
        }
    }

    @Override
    public void run() {
    }

    class FTPDTImpl implements FTPDataTransferListener {

        @Override
        public void aborted() {
            setDownloading(false);
            speedTimer.cancel();
        }
----------------------------------------
    class FTPDTImpl implements FTPDataTransferListener {

        @Override
        public void aborted() {
            setDownloading(false);
            speedTimer.cancel();
        }

        @Override
        public void completed() {
            speedTimer.cancel();
        }

        @Override
        public void failed() {
            speedTimer.cancel();
        }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,685830.java,53,63
sample,CopyFileSamples.java,16,27
----------------------------------------
    public XPSSignatureVerifier() {
        try {
            JAXBContext relationshipsJAXBContext = JAXBContext.newInstance(ObjectFactory.class);
            this.relationshipsUnmarshaller = relationshipsJAXBContext.createUnmarshaller();
        } catch (JAXBException e) {
            throw new RuntimeException("JAXB error: " + e.getMessage(), e);
        }
    }

    public List<X509Certificate> getSigners(URL url) throws IOException, ParserConfigurationException, SAXException, TransformerException, MarshalException, XMLSignatureException, JAXBException {
        List<X509Certificate> signers = new LinkedList<X509Certificate>();
----------------------------------------
public class CopyFileSamples {
	
	public static void copyFile1(File srcFile, File destFile) throws IOException {
		if(!destFile.exists()) {
			destFile.createNewFile();
		}
		
		FileInputStream fis = new FileInputStream(srcFile);
		FileOutputStream fos = new FileOutputStream(destFile);
		
		FileChannel source = fis.getChannel();
		FileChannel destination = fos.getChannel();
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,68514.java,59,70
selected,1975622.java,100,116
----------------------------------------
        for (int i = 0; i < childrenLength; i++) {
            result.add(new File(folder, children[i]));
        }
        return result;
    }

    @Override
    public InputStream getContents(Object element) {
        File f = (File) element;
        if (IO.isValidImageFile(f.getName())) {
            return getImageStream(f);
        } else if (IO.isValidVideoFile(f.getName())) {
----------------------------------------
        while ((len = fis.read(buf)) >= 0) {
            data.write(buf, 0, len);
        }
        return data.toByteArray();
    }

    /**
     * Generates an MD5 checksum of a series of bytes.
     * 
     * @param data
     *        the byte array on which to compute the hash.
     * @return the MD5 hash.
     * @throws NoSuchAlgorithmException
     */
    public static String getHash(byte[] data) throws NoSuchAlgorithmException {
        MessageDigest digest = MessageDigest.getInstance("MD5");
        byte[] hash = digest.digest(data);
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,2330198.java,130,141
selected,2330198.java,587,600
----------------------------------------
            for (int i = start; i < array.length; ++i) {
                if (array[i] == value) {
                    return i;
                }
            }
        }
        return -1;
    }

    public static int indexOf(byte[] array, byte value) {
        return Arrays.indexOf(array, value, 0);
    }
----------------------------------------
        for (int i = 0; i < array.length; ++i) {
            result[i] = array[i];
        }
        return result;
    }

    public static float[] toFloatArray(Float[] array) {
        return Arrays.toFloatArray(array, 0);
    }

    public static float[] toFloatArray(Float[] array, float valueForNull) {
        if (array == null) {
            return null;
        }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
default,110260.java,56,74
default,19407.java,321,331
----------------------------------------
        } catch (Exception e) {
            System.out.println("internalGet() : " + e);
        }
        return null;
    }

    /**
     *  Serializes and stores an object in the database.
     *  This is really a hokey way to do it, and will
     *  cause problems.  The right way is to use a
     *  prepared statement...
     */
    public Object internalPut(String key, Object value) {
        try {
            ByteArrayOutputStream baos = new ByteArrayOutputStream();
            ObjectOutputStream out = new ObjectOutputStream(baos);
            out.writeObject(value);
            String data = baos.toString();
            out.close();
----------------------------------------
        cData.start();
    }

    private void showDetailsMouseClicked(java.awt.event.MouseEvent evt) {
        RetrieveFromDatabase Rfd = new RetrieveFromDatabase(conn);
        ResultSet rs = null;
        try {
            rs = Rfd.SelecAllData();
        } catch (SQLException ex) {
            Logger.getLogger(ResultStat.class.getName()).log(Level.SEVERE, null, ex);
        }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
default,37224.java,210,226
default,123688.java,62,72
----------------------------------------
                return false;
            }
        } catch (XPathExpressionException e) {
            throw new DBException(e.getMessage());
        }
    }

    /**
	* checks whether a user with given username exists in the database
	* @param username the username to look for
	* @return true if the username is found in the db, false otherwise
	*/
    private boolean userExists(String username) {
        try {
            NodeList node = null;
            String ss = "/users/user[@name='" + username + "']";
            node = (NodeList) xpath.compile(ss).evaluate(doc, XPathConstants.NODESET);
----------------------------------------
        ecrireFichier(new File("bd_msg.xml").getAbsolutePath(), stringXML);
    }

    public static void ecrireFichier(String path_dest, String src) {
        OutputStreamWriter osw = null;
        try {
            File fileE = new File(path_dest);
            if (!fileE.exists()) {
                fileE.createNewFile();
            }
            osw = new OutputStreamWriter(new FileOutputStream(fileE), "UTF-8");
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,256020.java,63,83
selected,676147.java,208,224
----------------------------------------
                        if (verbose) Logger.log("Network", "IP address found: " + ret);
                    }
                }
            }
            return ret;
        } catch (SocketException e) {
            e.printStackTrace();
            return null;
        }
    }

    /**
	 * Gets the last found MAC address (this may not be what we want
	 * but I have no better solution at the moment :))
	 * @return MAC address
	 */
    public String getMACAddress() {
        try {
            Enumeration<NetworkInterface> ni = NetworkInterface.getNetworkInterfaces();
            String ret = new String();
            while (ni.hasMoreElements()) {
----------------------------------------
        return resultList;
    }

    /**
	 * Update the current observations with a new MonitorResolutionPeriod 
	 * and a new ROPeriod.
	 * 
	 * @param MonitorResolutionPeriod
	 * @param Period
	 */
    private static void updateCurrentObservations(int MonitorResolutionPeriod, int ROPeriod) {
        RotameterObservationThreadManager rotm = ActiveRotameterObservationThreadManager;
        if (rotm == null) {
        } else {
            rotm.interrupt();
            while (rotm.isAlive()) ;
            RotameterObservationThreadManager newRotm = new RotameterObservationThreadManager(rotm.getPerStreamConfigurationGroups(), MonitorResolutionPeriod, ROPeriod, rotm.getTrafficDescriptorList());
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,2640744.java,243,253
selected,1189452.java,129,160
----------------------------------------
    private ObjectStreamClass_1_3_1(java.lang.Class cl, ObjectStreamClass_1_3_1 superdesc, boolean serial, boolean extern) {
        ofClass = cl;
        if (Proxy.isProxyClass(cl)) {
            forProxyClass = true;
        }
        name = cl.getName();
        superclass = superdesc;
        serializable = serial;
        if (!forProxyClass) {
            externalizable = extern;
        }
----------------------------------------
        threshold_ = threshold;
    }

    /**
     * Creates an instance that verifies the agent whose
     * structure is represented by the given Resource.
     * The Resource must be rooted at the directory in
     * which all the agent's data is kept.
     *
     * @param structure The structure of the agent.
     */
    public AgentVerifier(Resource struct) {
        if (struct == null) {
            throw new NullPointerException("Need a Resource");
        }
        struct_ = struct;
        dAlgs_ = DEFAULT_DIGESTS;
        threshold_ = DEFAULT_THRESHOLD;
    }

    /**
     * Sets the certificate source containing the trusted
     * certificates. Any signatures that can be resolved
     * against a certificate in that source are considered
     * valid.
     *
     * @param certstore The trusted CertificateSource.
     * @see CertificateSource
     */
    public void setTrustedCertificates(CertificateSource certstore) {
        chainVerifier_ = new CertificateChainVerifier(certstore);
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,262787.java,48,58
selected,685479.java,46,62
----------------------------------------
            throw new DeleteException(TABLE_NAME + " Deletion exception :", e);
        }
    }

    @Override
    public HolidaysType store(HolidaysType obj) throws InsertException, DBConnectionException, XmlIOException {
        HolidaysType toReturn = null;
        Statement stmt = OracleJDBConnector.getInstance().getStatement();
        List<Object> values = new ArrayList<Object>();
        values.add(0);
        values.add(obj.getName());
----------------------------------------
                throw error(e.toString());
            }
            action_prepared_map.put(as, pstmt);
        }
        return pstmt;
    }

    /**
   */
    private NBenchException error(String s) {
        return new NBenchException("[SQL JDBC BEC]" + s);
    }

    /**
   */
    VariableScope res2vs(List<NameAndType> out, ResultSet r) throws Exception {
        HashMap<String, Object> map = new HashMap<String, Object>();
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,1134236.java,128,146
default,93611.java,107,119
----------------------------------------
        FileDescriptor fd = out.getFD();
        fd.sync();
        out.close();
    }

    /**
	 * write a bytearray into a file
	 * @param pathname
	 * @param data
	 */
    public static void writeFileFromByteArray(String pathname, byte[] data) {
        try {
            FileOutputStream out = new FileOutputStream(pathname);
            out.write(data);
            closeAndWaitFileOutputStream(out);
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
    }
----------------------------------------
    public String createFolder(String folderPath) {
        String txt = folderPath;
        try {
            java.io.File myFilePath = new java.io.File(txt);
            txt = folderPath;
            if (!myFilePath.exists()) {
                myFilePath.mkdir();
            }
        } catch (Exception e) {
            message = "ï¿½ï¿½ï¿½ï¿½Ä¿Â¼ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½";
        }
        return txt;
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,2184555.java,515,528
selected,2598210.java,695,705
----------------------------------------
                throw new EncryptionException(DECRYPTION_FAILED, "Decryption problem: WARNING: Adversary may have tampered with " + "CipherText object orCipherText object mangled in transit: " + e.getMessage(), e);
            }
        }
    }

    /**
	* {@inheritDoc}
	*/
    public String sign(String data) throws EncryptionException {
        try {
            Signature signer = Signature.getInstance(signatureAlgorithm);
            signer.initSign(privateKey);
            signer.update(data.getBytes(encoding));
            byte[] bytes = signer.sign();
----------------------------------------
        return keyStore.containsAlias(alias);
    }

    /**
     * Load a keystore or define a new keystore and check it.
     */
    public final String loadKeyStore(char[] storePassword, char[] keyPassword) throws Exception {
        startPasswordEncryption(storePassword, keyPassword);
        this.keyStore = readKeyStore(storePassword);
        if (defaultAlias == null || !keyStore.containsAlias(defaultAlias)) {
            for (Enumeration aliases = keyStore.aliases(); aliases.hasMoreElements(); ) {
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,2427694.java,386,402
selected,2635935.java,98,110
----------------------------------------
        return in;
    }

    /** replaces the XMI entry in a Poseidon file, first backing up the 
     *  original file. This method manages the files and names so that
     *  the new (replaced) file has the same name as the original, and the
     *  backup is just a rename of the original to it's same name with
     *  ".gl_bak" appended.
     */
    public static void replaceXmiInPoseidonFile(String zargoFilePath, InputStream replacementXmiStream) throws SpliceException {
        File origFile = new File(zargoFilePath);
        String origFileDir = origFile.getParent();
        if (origFileDir == null || origFileDir.length() == 0) {
            origFileDir = ".";
        }
        String origFileName = origFile.getName();
        File tempFile = null;
----------------------------------------
        } catch (final IOException e) {
            e.printStackTrace();
        }
        return null;
    }

    public void writeUTF8File(final StringBuffer encoded, final String file) throws FileNotFoundException, IOException {
        final File f = new File(file);
        OutputStream fos = null;
        if (!f.createNewFile()) {
            try {
                fos = new FileOutputStream(f);
                final BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(fos));
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,1105081.java,18,46
selected,2060290.java,139,162
----------------------------------------
import java.util.zip.ZipOutputStream;

/**
 * Permet d'Ã©crire dans un fichier zip.
 * 
 * @author ILM Informatique
 * @see org.openconcerto.utils.Unzip
 */
public class Zip {

    /**
     * Copie de from dans to seulement les entrÃ©es dont le nom n'est pas dans
     * <code>excludedEntries</code>.
     * 
     * @param from le zip source.
     * @param excludedEntries les noms des entrÃ©es Ã  exclure.
     * @param to le zip de destination, s'il existe dÃ©jÃ  les entrÃ©es de from seront ajoutÃ©es aux
     *        existantes.
     * @return le fichier zip dest.
     * @throws ZipException
     * @throws IOException
     */
    public static Zip createFrom(File from, File to, Set excludedEntries) throws ZipException, IOException {
        Unzip unz = new Unzip(from);
        Zip res = new Zip(to);
        final Enumeration en = unz.entries();
        while (en.hasMoreElements()) {
            ZipEntry entry = (ZipEntry) en.nextElement();
            if (!excludedEntries.contains(entry.getName())) {
----------------------------------------
        return codomain;
    }

    /**
   * composes two Maps (like functions, if you know what I mean)
   *
   * @param f Map first Map
   * @param g Map second Map
   * @return Map composition, x -> g(f(x));
   *
   * <br><br><b>Example</b>:
   * <p>Suppose we have the following: <br>
   * <code>Map f = toMap(new String[] {"1", "one", "2", "two", "3", "three"});<br>
   *       Map g = toMap(new String[] {"one", "uno", "two", "dos", "three", "tres"});</code>
   * <p>Then <code>compose(f, g)</code><br>
   * returns the same map as produced by <br>
   * <code>toMap(new String[] {"1", "uno", "2", "dos", "3", "tres"});</code><br>
   */
    public static Map compose(Map f, Map g) {
        Map result = getMap(f.size());
        for (Iterator i = f.keySet().iterator(); i.hasNext(); ) {
            Object x = i.next();
            Object y = f.get(x);
            Object z = g.get(y);
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,1219560.java,192,207
selected,1901682.java,422,434
----------------------------------------
        for (int i = 1; i < args.length; i++) {
            if (i == 1) {
                root = new File(args[i]);
                continue;
            }
        }
        if (root == null) {
            UsageAndExit();
        }
        updfmdAction(root);
        done = true;
        return done;
    }

    private boolean convertPDFActionParams(String[] args) {
        File dirOut = null;
----------------------------------------
        for (int x = 0; x < namePatterns.length; x++) {
            if (namePatterns[x].equals(filename_pattern)) {
                patternFound = true;
                break;
            }
        }
        if (patternFound == false) {
            throw new Exception("Filename pattern not found!");
        }
        int iDuration = -1;
        try {
            iDuration = Integer.parseInt(duration);
        } catch (Exception e) {
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,2677923.java,720,730
selected,695056.java,482,493
----------------------------------------
        this.rows = rows;
    }

    public void setCols(int cols) {
        this.cols = cols;
    }

    public Level generate(LevelDescriptor ld) {
        System.out.println("Generating rows " + rows + " cols " + cols);
        Level l = generate(rows, cols);
        System.out.println("Generated rows " + l.getRows() + " cols " + l.getCols());
----------------------------------------
        return markedNodes;
    }

    public void setMarkedNodes(HashSet<Integer> markedNodes) {
        this.markedNodes = markedNodes;
    }

    public void showXCoordDebugOutput() {
        for (int nodeID : treeNodes.keySet()) {
            System.err.println("Node " + nodeID + " with x=" + treeNodes.get(nodeID).x + " and subtreeWidth=" + treeNodes.get(nodeID).subTreeWidth);
        }
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
default,42220.java,386,409
default,27677.java,451,461
----------------------------------------
            next = readChar();
            if (next != '\n') {
                System.out.println("Fatal error in method " + "readWord of the class SavitchIn.");
                System.exit(1);
            }
        }
        return result;
    }

    /**
     Precondition: The user has entered a number of type byte
     on a line by itself, except that there may be whitespace
     before and/or after the number.
     Action: Reads and returns the number as a value of type
     byte. The rest of the line is discarded. If the input is
     not entered correctly, then in most cases, the user will
     be asked to reenter the input. In particular, this applies
     to incorrect number formats and blank lines.
    */
    public static byte readLineByte() {
        String inputString = null;
        byte number = -123;
        boolean done = false;
        while (!done) {
----------------------------------------
            if (className.startsWith(curTest)) return true;
        }
        return false;
    }

    public void compileList(ArrayList classList) {
        int classListSize = classList.size();
        ArrayList classNames = new ArrayList();
        for (int i = 0; i < classListSize; i++) {
            classNames.add(((Class) classList.get(i)).getName());
        }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,890011.java,310,322
selected,2033400.java,673,683
----------------------------------------
        for (Iterator i = monitorFilter.getServiceMonitorFilters(); i.hasNext(); ) {
            ServiceMonitorFilter serviceMonitorFilter = (ServiceMonitorFilter) i.next();
            ModuleClassID moduleClassID = serviceMonitorFilter.getModuleClassID();
            ServiceMonitor serviceMonitor = getServiceMonitor(moduleClassID);
            if (serviceMonitor == null) {
                continue;
            }
            ServiceMonitorFilter newServiceMonitorFilter = serviceMonitor.createSupportedCumulativeServiceMonitorFilter(serviceMonitorFilter);
            if (newServiceMonitorFilter != null) {
                newMonitorFilter.addServiceMonitorFilter(newServiceMonitorFilter);
                anythingAdded = true;
            }
        }
----------------------------------------
            return;
        }
        if (c instanceof AbstractButton) {
            AbstractButton b = (AbstractButton) c;
            Border border = (Border) borderTable.remove(b);
            b.setBorder(border);
            Boolean value = (Boolean) rolloverTable.remove(b);
            if (value != null) {
                b.setRolloverEnabled(value.booleanValue());
            }
        }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,1502922.java,721,734
selected,2160301.java,813,832
----------------------------------------
        return mModules;
    }

    public int execFunction(Command body) throws Exception {
        int ret = exec(body);
        if (mReturnVal != null) {
            ret = convertReturnValueToExitValue(mReturnVal);
            mReturnVal = null;
        }
        return ret;
    }

    private int convertReturnValueToExitValue(XValue value) {
        if (value.isNull()) return 0;
----------------------------------------
        return operator.findSubComponent(new ComponentChooserHelper(text));
    }

    /**
	 * checks if the dialog exists. if found, check if it is still visible in 1
	 * second intervals
	 * 
	 * @param dialogTitle
	 *            the dialog title
	 * @throws Exception
	 */
    public void WaitForDialogToClose(String dialogTitle) throws Exception {
        JDialogOperator processDialog = getDialogIfExists(dialogTitle, 3);
        if (processDialog != null) {
            while (processDialog.isVisible()) {
                sleep(1000);
            }
            return;
        }
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
default,56662.java,83,93
default,7611.java,13,24
----------------------------------------
            errorPrint(e);
        }
        if (driver.equals("org.apache.derby.jdbc.EmbeddedDriver")) {
            boolean gotSQLExc = false;
            try {
                DriverManager.getConnection("jdbc:derby:;shutdown=true");
            } catch (SQLException se) {
                if (se.getSQLState().equals("XJ015")) {
                    gotSQLExc = true;
                }
            }
----------------------------------------
        try {
            Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
            con = DriverManager.getConnection("jdbc:sqlserver://localhost:1433; DatabaseName=XuRi", "sa", "sa");
            System.out.println("è°ƒç”¨è¿žæŽ¥æ–¹æ³•");
        } catch (Exception e) {
            e.printStackTrace();
        }
        return con;
    }

    public static void closeCon() {
        if (con != null) {
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,1125396.java,355,369
selected,1125396.java,365,380
----------------------------------------
            LOG.warning(e.toString());
            this.io.error("Unable to initialize a secure protocol");
            return null;
        }
    }

    /**
   * Starts the server by spawning and starting a new ServerThread
   */
    public boolean startServer() {
        if (!this.listening && this.serverCreated) {
            this.server = new ServerThread();
            this.server.start();
            this.listening = true;
        }
----------------------------------------
        if (!this.listening && this.serverCreated) {
            this.server = new ServerThread();
            this.server.start();
            this.listening = true;
        }
        return this.serverCreated;
    }

    /**
   * Makes sure there exists an admin user and a default database, and if not, creates them
   * @return Whether the initialisation of the database was successful or not
   */
    public boolean init() {
        boolean success = true;
        ensureAdminUser();
        ensureDefaultDatabase();
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,1071009.java,80,94
selected,2142746.java,653,664
----------------------------------------
            start = matcher.end();
        }
        if (start < template2.length()) {
            parts.add(template2.substring(start));
        }
    }

    /**
     * Checks if the given url is a valid instance of the template
     * @param url a jdbc url to check
     * @return 
     */
    public boolean isValidUrl(String url) {
        Matcher matcher = URLPATTERN.matcher(url);
        if (matcher.find()) return matcher.end() == url.length();
----------------------------------------
        for (int i = 0; i < length; i++) {
            File file = files[i];
            if (file.isDirectory()) {
                continue;
            }
            String fileName = file.getName();
            java.util.regex.Matcher matcher = pattern.matcher(fileName);
            if (matcher.find()) {
                fileList.add(file.getAbsolutePath());
            } else {
            }
        }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
sample,EncryptFile.java,12,26
sample,ZipFiles.java,17,28
----------------------------------------
import javax.crypto.SecretKey;


public class EncryptFile {
	public static void encryptFile(File in, File out, SecretKey key) throws InvalidKeyException, NoSuchAlgorithmException, NoSuchPaddingException, IOException {
		// Create Cipher for Algorithm using Encryption Key
		Cipher c = Cipher.getInstance("AES");
		c.init(Cipher.ENCRYPT_MODE, key);
		
		// Create File Read/Writers
		FileInputStream fin = new FileInputStream(in);
		FileOutputStream fout = new FileOutputStream(out);
		
		// Create Cipher Output Stream
		CipherOutputStream cout = new CipherOutputStream(fout, c);
----------------------------------------
		for(int i = 0; i < files.length; i++) {
			// Open File
			File src = files[i];
			FileInputStream fis = new FileInputStream(src);
			
			//Create new zip entry
			ZipEntry entry = new ZipEntry(src.getName());
			zos.putNextEntry(entry);
			
			//Write the file to the entry in the zip file (compressed)
			int length;
			while((length = fis.read(buffer)) > 0) {
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
default,73140.java,98,117
default,63334.java,130,142
----------------------------------------
            infoviewer.setVisible(true);
            infoviewer.gotoURL(url, true);
        }
    }

    /**
     * converts the command string, which may contain "$u" as placeholders
     * for an url, into an array of strings, tokenized at the space char.
     * Characters in the command string may be escaped with '\\', which
     * in the case of space prevents tokenization.
     * @param command the command string.
     * @param url the URL. Spaces in the URL are converted to "%20".
     * @return the space separated parts of the command string, as array
     *   of Strings.
     */
    private String[] convertCommandString(String command, String url) {
        String convURL = convertURL(url);
        Vector args = new Vector();
        StringBuffer buf = new StringBuffer();
        for (int i = 0; i < command.length(); i++) {
----------------------------------------
        } catch (Throwable e) {
            System.err.println("ERROR1: Arguments are not valid. RL-Framework supports \nInt, \nDouble, \nInt Array, \nDouble Array \nfor Observation type when using pipe communication. \nExiting...\n");
            e.printStackTrace();
        }
    }

    private static void pipe_env_start() throws IOException {
        int s, count = 0;
        String buf;
        try {
            Method meth = agent.getMethod("env_start", null);
            Object retobj2 = meth.invoke(retobj, null);
            buf = "";
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,948406.java,313,327
selected,948406.java,319,333
----------------------------------------
            String familyName = spec.getFamilyName();
            m_specMapping.remove(spec);
            if (!fontFamilyExists(familyName)) {
                removeFontFamily(familyName);
            }
            markAsModified();
            updateFallbackFamily();
            return true;
        } else {
            return false;
        }
    }

    private synchronized void installFontFile(String fileName, CoFontFaceSpec spec) throws CoFontException {
        m_shower.showStatus("Installing font " + spec + " from file " + fileName);
----------------------------------------
            updateFallbackFamily();
            return true;
        } else {
            return false;
        }
    }

    private synchronized void installFontFile(String fileName, CoFontFaceSpec spec) throws CoFontException {
        m_shower.showStatus("Installing font " + spec + " from file " + fileName);
        File file;
        try {
            file = new ClassPathResource(fileName).getFile();
        } catch (IOException e) {
            throw new CoFontException(e);
        }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,2347167.java,77,94
selected,440776.java,243,266
----------------------------------------
            message.setSubject(subject);
            message.setText(body);
            Transport.send(message);
        } catch (MessagingException me) {
            me.printStackTrace();
        }
    }

    /**
	 * Returns the contents of a file in a string.
	 * 
	 * @param File file 
	 * @return String output file in string format
	 * @throws FileNotFoundException
	 */
    public static String fileToString(File file) throws FileNotFoundException {
        Date currentDate = new Date(System.currentTimeMillis());
        String output = "Time: " + currentDate.toString();
----------------------------------------
            if (THE_INSTANCE.getStringPref(DATABASE_EXECUTABLE).equals("")) {
                StringBuilder exec = new StringBuilder("net start \"PostgreSQL Database Server");
                String version = null;
                if (GraphicsEnvironment.getLocalGraphicsEnvironment().isHeadlessInstance()) {
                    version = new ConsoleInteraction(THE_INSTANCE).input("MighTyD: Server Configuration", "PostgreSQL version number?");
                } else {
                    SystemSounds.defaultSound();
                    Object versionObj = JOptionPane.showInputDialog(null, "PostgreSQL version number?", "MighTyD: Server Configuration", JOptionPane.INFORMATION_MESSAGE, null, null, "8.4");
                    if (versionObj != null) version = versionObj.toString();
                }
                if ((version != null) && !version.equals("")) {
                    exec.append(" ");
                    exec.append(version);
                }
                exec.append("\"");
                String execStr = exec.toString();
                THE_INSTANCE.provideDefault(DATABASE_EXECUTABLE, execStr);
                THE_INSTANCE.setStringPref(DATABASE_EXECUTABLE, execStr);
                try {
                    THE_INSTANCE.save(DATABASE_EXECUTABLE);
                } catch (BackingStoreException e) {
                    LOG.warning(e.toString());
                }
            }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,2545484.java,115,142
selected,877874.java,353,370
----------------------------------------
                if (o.equals(e.next())) {
                    e.remove();
                    return true;
                }
            }
        }
        return false;
    }

    /**
        * Returns <tt>true</tt> if this collection contains all of the elements
     * in the specified collection. <p>
     *
     * This implementation iterates over the specified collection, checking
     * each element returned by the iterator in turn to see if it's
     * contained in this collection.  If all elements are so contained
     * <tt>true</tt> is returned, otherwise <tt>false</tt>.
     *
     * @param c collection to be checked for containment in this collection.
     * @return <tt>true</tt> if this collection contains all of the elements
     * 	       in the specified collection.
     * @throws NullPointerException if the specified collection is null.
     *
     * @see #contains(Object)
     */
    public boolean containsAll(Collection c) {
        Iterator e = c.iterator();
        while (e.hasNext()) if (!contains(e.next())) return false;
----------------------------------------
            if (exp == outer) return true;
        }
        return false;
    }

    /** For an INLINE_ONLY function, return the function it gets inlined in. */
    public LambdaExp getCaller() {
        return inlineHome;
    }

    Variable thisVariable;

    public Variable declareThis(ClassType clas) {
        if (thisVariable == null) {
            thisVariable = new Variable("this");
            getVarScope().addVariableAfter(null, thisVariable);
            thisVariable.setParameter(true);
        }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,1512445.java,18,34
selected,1007855.java,31,51
----------------------------------------
import org.xml.sax.InputSource;

public class ValuePartitionCapacityTest extends TestBase {

    public ValuePartitionCapacityTest(String name) {
        super(name);
    }

    @Override
    protected void setUp() throws Exception {
        super.setUp();
    }

    @Override
    protected void tearDown() throws Exception {
        super.tearDown();
    }
----------------------------------------
import junit.framework.TestCase;

/**
 *
 * @author ssg
 */
public class JSONSchemaTest extends TestCase {

    public JSONSchemaTest(String testName) {
        super(testName);
    }

    @Override
    protected void setUp() throws Exception {
        super.setUp();
    }

    @Override
    protected void tearDown() throws Exception {
        super.tearDown();
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,676147.java,191,201
sample,FileChooser.java,82,101
----------------------------------------
                    boolean result = false;
                    Iterator<PerStreamConfiguration> iteratorResultList = resultList.iterator();
                    while (iteratorResultList.hasNext()) {
                        PerStreamConfiguration psctemp = iteratorResultList.next();
                        if (psctemp.ROAddr.equals(psc.ROAddr)) {
                            result = true;
                            break;
                        } else {
                            result = false;
                        }
                    }
----------------------------------------
		} else if (status == JFileChooser.CANCEL_OPTION) {
			retval = null;
		} else {
			retval = null;
		}
		
		//Cleanup
		fc.setEnabled(false);
		fc.setVisible(false);
		
		//Return
		return retval;
	}
	
	public static File[] chooseFileDirectory(JFrame frame) {
		File retval[];
		
		//Create and configure file chooser
		JFileChooser fc = new JFileChooser();
		fc.setDialogTitle("Select input file.");
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,1709326.java,82,98
selected,1506862.java,8,24
----------------------------------------
import com.emental.mindraider.ui.utils.SwingWorker;
import com.emental.mindraider.utils.Utils;
import com.sun.image.codec.jpeg.JPEGCodec;
import com.sun.image.codec.jpeg.JPEGImageEncoder;

/**
 * MindRaider's main window.
 * 
 * @author Martin.Dvorak
 * @version $Revision: 1.8 $ ($Author: mindraider $)
 */
public final class MindRaiderJFrame extends JFrame implements DropTargetListener {

    /**
     * Instance of this class.
     */
    private static MindRaiderJFrame singleton;
----------------------------------------
import java.awt.Toolkit;
import java.awt.image.BufferedImage;
import java.awt.image.BufferedImageOp;
import java.awt.image.ConvolveOp;
import java.awt.image.Kernel;
import javax.swing.JPanel;

/**
 *
 * @author blitzcoder
 */
public class TranscluentPanel extends JPanel {

    private BufferedImage background;

    public TranscluentPanel() {
        updateBackground();
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,61177.java,199,212
selected,2373257.java,1783,1793
----------------------------------------
            return outputClasses;
        }

        public DirectoriesInitializer invoke() throws MojoExecutionException {
            try {
                sourceClasses = classesDirectory;
                outputClasses = new File(classesDirectory, "../___chaplin");
                if (outputClasses.exists()) {
                    deleteTree(outputClasses);
                }
                outputClasses.mkdir();
            } catch (Exception e) {
                throw new MojoExecutionException("Error transforming classes in " + classesDirectory.getAbsolutePath(), e);
            }
----------------------------------------
                if (file != null) {
                    bumpWriteCount("fsync");
                    FileChannel ch = file.getChannel();
                    try {
                        ch.force(false);
                        nLogFSyncs.increment();
                    } catch (ClosedChannelException e) {
                        throw new ThreadInterruptedException(envImpl, "Channel closed, may be due to thread interrupt", e);
                    }
                    assert EnvironmentImpl.maybeForceYield();
                }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
default,124925.java,14,30
default,124925.java,8,30
----------------------------------------
public class Screen {

    static final Scanner com = new Scanner(System.in);

    int div = 0;

    String programP = "";

    String dataP = "";

    int wordSP = 3;

    String matrix = "BLOSUM62";

    int gapopP = 11;

    int gapextP = 1;
----------------------------------------
import com.mysql.jdbc.Connection;

/**
 * Main class of the entire project: runs the Sequence Screening program This
 * class implements a possible interpretation of the Government guidelines.
 */
public class Screen {

    static final Scanner com = new Scanner(System.in);

    int div = 0;

    String programP = "";

    String dataP = "";

    int wordSP = 3;

    String matrix = "BLOSUM62";

    int gapopP = 11;

    int gapextP = 1;
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
default,94161.java,203,213
default,114414.java,71,81
----------------------------------------
                _mySiteList.makeVisible(i);
                _addSite(startSite);
            }
        }
        int plotCount = _myPlotList.getItemCount();
        for (int i = 0; i < plotCount; i++) {
            if (startPlot1.equalsIgnoreCase(_myPlotList.getItem(i))) {
                _myPlotList.select(i);
                _addPlot(i);
            }
        }
----------------------------------------
        System.err.println(atomCountAndOriginLine);
        StringTokenizer st = new StringTokenizer(atomCountAndOriginLine);
        atomCount = Integer.parseInt(st.nextToken());
        if (atomCount < 0) {
            atomCount = -atomCount;
            negativeAtomCount = true;
        }
    }

    void readVolumetricVectorLines() throws Exception {
        System.err.println("readVolumetricVectorLines");
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,2055704.java,665,683
selected,1567926.java,122,134
----------------------------------------
                sb.append(a[i]);
            }
        }
        return sb.toString();
    }

    /**
	 * ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½×ªï¿½å£¬ï¿½Ù°ï¿½Ö¸ï¿½ï¿½ï¿½ï¿½ï¿½Ö·ï¿½×ªï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ö·ï¿½
	 * 
	 * @param content
	 * @param encode
	 * @return String
	 * @throws UnsupportedEncodingException
	 */
    public static String getUrlEncode(String content, String encode) throws UnsupportedEncodingException {
        char[] a = content.toCharArray();
        StringBuffer sb = new StringBuffer();
        for (int i = 0; i < a.length; i++) {
            if (isChinese(a[i])) {
----------------------------------------
        } catch (ProviderException e) {
            log.log(Level.SEVERE, "Provider error while fetching attachments for rename", e);
        }
        return referrers;
    }

    /**
     *  Replaces camelcase links.
     */
    private String replaceCCReferrerString(WikiContext context, String sourceText, String from, String to) {
        StringBuilder sb = new StringBuilder(sourceText.length() + 32);
        Pattern linkPattern = Pattern.compile("\\p{Lu}+\\p{Ll}+\\p{Lu}+[\\p{L}\\p{Digit}]*");
        Matcher matcher = linkPattern.matcher(sourceText);
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,1125396.java,495,507
selected,2210580.java,168,184
----------------------------------------
            System.exit(0);
        } else {
            System.exit(1);
        }
    }

    public static boolean parseShellOptions(final String[] argsv, final Interaction io, final ServerConfig config) {
        String password = null;
        if (config.prefExists(ServerConfig.DATABASE_PASSWORD)) {
            password = config.getStringPref(ServerConfig.DATABASE_PASSWORD);
        }
        int parsedParams = 0;
        if (argsv.length == 0) return true;
----------------------------------------
        encode(b, obj.hashCode());
    }

    /**
	 * Encodes an integer value and appends it to the buffer.
	 * 
	 * @param b
	 *            The buffer.
	 * @param value
	 *            The value.
	 */
    private static void encode(StringBuffer b, int value) {
        String hex = Integer.toHexString(value);
        int hexSize = hex.length();
        for (int i = 8; i > hexSize; i--) {
            b.append('0');
        }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
sample,GCD.java,5,27
sample,GCD.java,5,26
----------------------------------------
public class GCD {
	
	// while(b != 0) AND b = a % b
	// while\s*\(\s*[a-z,A-Z,0-9,_,$]+\s*!=\s*0\s*\)
	// [a-z,A-Z,0-9,_,$]+\s*=\s*[a-z,A-Z,0-9,_,$]+\s*%\s*[a-z,A-Z,0-9,_,$]+
	// while\s*\(\s*[a-z,A-Z,0-9,_,$]+\s*!=\s*0\s*\).*[a-z,A-Z,0-9,_,$]+\s*=\s*[a-z,A-Z,0-9,_,$]+\s*%\s*[a-z,A-Z,0-9,_,$]+
	public static int gcd1(int a, int b) {
		while (b != 0) {
			int t = b;
			b = a % b;
			a = t;
		}
		return a;
	}
	
	// while(a != b) AND a = a - b
	//while\s*\(\s*[a-z,A-Z,0-9,_,$]+\s*!=\s*[a-z,A-Z,0-9,_,$]+\s*\)
	//[a-z,A-Z,0-9,_,$]+\s*=\s*[a-z,A-Z,0-9,_,$]+\s*-\s*[a-z,A-Z,0-9,_,$]+
	//while\s*\(\s*[a-z,A-Z,0-9,_,$]+\s*!=\s*[a-z,A-Z,0-9,_,$]+\s*\).*[a-z,A-Z,0-9,_,$]+\s*=\s*[a-z,A-Z,0-9,_,$]+\s*-\s*[a-z,A-Z,0-9,_,$]+
	public static int gcd2(int a, int b) {
		while (a != b) {
			if (a > b)
				a = a - b;
----------------------------------------
public class GCD {
	
	// while(b != 0) AND b = a % b
	// while\s*\(\s*[a-z,A-Z,0-9,_,$]+\s*!=\s*0\s*\)
	// [a-z,A-Z,0-9,_,$]+\s*=\s*[a-z,A-Z,0-9,_,$]+\s*%\s*[a-z,A-Z,0-9,_,$]+
	// while\s*\(\s*[a-z,A-Z,0-9,_,$]+\s*!=\s*0\s*\).*[a-z,A-Z,0-9,_,$]+\s*=\s*[a-z,A-Z,0-9,_,$]+\s*%\s*[a-z,A-Z,0-9,_,$]+
	public static int gcd1(int a, int b) {
		while (b != 0) {
			int t = b;
			b = a % b;
			a = t;
		}
		return a;
	}
	
	// while(a != b) AND a = a - b
	//while\s*\(\s*[a-z,A-Z,0-9,_,$]+\s*!=\s*[a-z,A-Z,0-9,_,$]+\s*\)
	//[a-z,A-Z,0-9,_,$]+\s*=\s*[a-z,A-Z,0-9,_,$]+\s*-\s*[a-z,A-Z,0-9,_,$]+
	//while\s*\(\s*[a-z,A-Z,0-9,_,$]+\s*!=\s*[a-z,A-Z,0-9,_,$]+\s*\).*[a-z,A-Z,0-9,_,$]+\s*=\s*[a-z,A-Z,0-9,_,$]+\s*-\s*[a-z,A-Z,0-9,_,$]+
	public static int gcd2(int a, int b) {
		while (a != b) {
			if (a > b)
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
sample,CallMethodUsingReflection.java,2,15
default,29512.java,141,153
----------------------------------------
import java.lang.reflect.Method;
import java.util.NoSuchElementException;

//((getMethod)|(getDeclaredMethod))
//invoke
public class CallMethodUsingReflection {
	public static Object callMethod1(Object object, String methodName, Object args[]) throws NoSuchMethodException, SecurityException, IllegalAccessException, IllegalArgumentException, InvocationTargetException {
		//Caveat: this solution doesn't support some method signatures (e.g., those with primitive types)
		Class<?> myClass = object.getClass();
		Class<?>[] ptypes = new Class[args.length];
		for(int i = 0; i < args.length; i++) {
			ptypes[i] = args[i].getClass();
		}
		Method method = myClass.getMethod(methodName, ptypes);
----------------------------------------
            c.mandarin = pron;
            c.definition = def;
            c = this.getCharacter(c);
        }
    }

    public Character getCharacter(Character c) {
        int index;
        index = Characters.indexOf(c);
        if (index == -1) {
            Characters.add(c);
            return c;
        } else {
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,1182548.java,230,243
selected,711820.java,56,75
----------------------------------------
            return;
        }
        if (CClassLoader.getRootLoader().isInit()) {
            return;
        }
        Runtime.getRuntime().addShutdownHook(new Thread() {

            public void run() {
                try {
                    converter.finalize();
                } catch (final Throwable e) {
                }
            }
        });
----------------------------------------
            } finally {
                try {
                    reader.close();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
            try {
                Thread.sleep(5000);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        }
    }

    /**
	 * @param args
	 */
    public static void main(String[] args) {
        while (true) {
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,152463.java,1150,1164
selected,2098428.java,144,168
----------------------------------------
        protected int command = CMD_LABEL;

        protected int errorCmd = ERR_STOP;

        protected ModuleObject modObj = new ModuleObject();

        protected LoopObject loopObj = new LoopObject();

        protected String fileObj = "file";

        protected String labelObj = "label";

        protected float process = 0.0f;

        private static final String PR_CMD = "comd";
----------------------------------------
    protected Element brushElement = WATER_EL;

    /** current brush shape */
    protected Shape brushShape = circle;

    /** current brush name */
    protected String brushName = "Circle";

    /** default scale to increase brush by */
    protected float paintScale = 60;

    /** current brush size */
    protected double brushSize = 1 + MIN_BRUSH_SIZE;

    /** angle to rotate brush shape by */
    protected double brushAngle = 0;

    /** world width */
    protected int width;

    /** world height */
    protected int height;

    /** this frame */
    protected JFrame frame = null;
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,314888.java,74,91
selected,1180434.java,486,501
----------------------------------------
        repaint();
    }

    public void componentShown(ComponentEvent arg0) {
        repaint();
    }

    public void windowGainedFocus(WindowEvent arg0) {
        refresh();
    }

    public void windowLostFocus(WindowEvent arg0) {
        refresh();
    }

    private void refresh() {
        if (window.isVisible()) {
            repaint();
----------------------------------------
            thread.interrupt();
            thread = null;
        }

        public void mouseEntered(MouseEvent e) {
            startThread();
        }

        public void mouseExited(MouseEvent e) {
            stopThread();
        }

        public void actionPerformed(ActionEvent event) {
            stopThread();
            delayedSnap();
        }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,1796005.java,802,812
selected,1177632.java,84,94
----------------------------------------
        String s1 = "";
        String s2 = "foo bar black sheep";
        ooms.doSomething(s1);
        assertEquals(s1, dos.lastArg);
        ooms.doSomething(s2);
        assertEquals(s2, dos.lastArg);
    }

    public void testLookupOverrideOneMethodWithConstructorInjection() {
        DefaultListableBeanFactory xbf = new DefaultListableBeanFactory();
        XmlBeanDefinitionReader reader = new XmlBeanDefinitionReader(xbf);
----------------------------------------
        for (int i = 0; i < examplesTest.length; i++) {
            Example example = examplesTest[i];
            doBooleanTest(net, example);
            Example mutatedCopy = mutateInputs(example, MAX_MUTATION_FACTOR);
            doBooleanTest(net, mutatedCopy);
        }
    }

    protected void doBooleanTest(INetwork net, Example example) throws CalamariException {
        net.setInputLevels(example);
        net.compute();
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
default,130704.java,151,162
default,115701.java,89,99
----------------------------------------
        for (int i = 0; i < nl.getLength(); i++) {
            if (i != 0) res += "\n";
            Element e = (Element) nl.item(i);
            res += getTextForElement(e);
        }
        return res;
    }

    protected void setTextForElements(String name, String val) {
        changed = true;
        NodeList nl = root.getElementsByTagName(name);
        while (nl.getLength() > 0) root.removeChild(nl.item(0));
----------------------------------------
        if (res.size() > 1) return res;
        Object defaultValue = dvp.getDefaultValue(name);
        if (defaultValue != null) {
            setValue(name, defaultValue);
            changed = true;
        }
        return defaultValue;
    }

    protected Object getValue(String lang, String name) {
        Vector vlang = new Vector();
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
default,32800.java,393,406
default,131728.java,509,520
----------------------------------------
            this.y = y;
        }
    }

    public Client() {
        initialize();
        sfx = new Sound();
        sfx.initialize();
    }

    private void initialize() {
        JMenuBar menu = new JMenuBar();
        menu.setMaximumSize(new Dimension(80, 15));
        menu.setPreferredSize(new Dimension(80, 15));
----------------------------------------
        c.setSize(209, 198);
        c.setCursor(new Cursor(Cursor.CROSSHAIR_CURSOR));
        populatePossibleStrokes(possible_chinese_strokes);
        currentStrokes = new Vector();
    }

    public DrawPanel(Unistrok unistrok) {
    }

    public static void main(String[] args) {
        Frame f = new Frame("Test");
        DrawPanel dp = new DrawPanel();
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,1078610.java,731,744
selected,1961982.java,84,121
----------------------------------------
        fStatusLine.clear();
    }

    public static Icon getIconResource(Class clazz, String name) {
        URL url = clazz.getResource(name);
        if (url == null) {
            System.err.println("Warning: could not load \"" + name + "\" icon");
            return null;
        }
        return new ImageIcon(url);
    }

    private void about() {
        AboutDialog about = new AboutDialog(fFrame);
----------------------------------------
        super();
    }

    /**
     * Create a RobotViewer component.
     * 
     * @param title
     *            the window title to use
     * @param border
     *            either "normal" or "none"
     * @param closable
     *            is this window closable?
     */
    public RobotViewer(String title, String border, boolean closable) {
        super(title, border, closable);
    }

    /**
     * Accessor for the <code>robot</code> property.
     * 
     * @return This viewer's robot
     */
    public WebBot getRobot() {
        if (bot == null && task != null) {
            bot = task.getRobot();
        }
        return bot;
    }

    /**
     * Mutator for the <code>robot</code> property.
     * 
     * @param bot
     *            The new value
     */
    public void setRobot(WebBot bot) {
        this.bot = bot;
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,1925041.java,120,131
selected,909036.java,253,265
----------------------------------------
            if (is != null) {
                break;
            }
        }
        if (is == null) {
            return null;
        }
        byte[] buf = new byte[65536];
        ByteArrayOutputStream baos = new ByteArrayOutputStream();
        int read;
        try {
            while ((read = is.read(buf)) >= 0) {
----------------------------------------
            return ret;
        }

        private void rawplay(AudioInputStream din, SourceDataLine lin) throws IOException {
            byte[] data = new byte[8192];
            for (; ; ) {
                if (!keepPlaying()) {
                    break;
                }
                int read = din.read(data, 0, data.length);
                if (read < 0) {
                    break;
                } else if (read > 0) {
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
sample,CopyFileSamples.java,13,27
sample,XMPPSendMessage.java,6,20
----------------------------------------
import org.apache.commons.io.IOUtils;


public class CopyFileSamples {
	
	public static void copyFile1(File srcFile, File destFile) throws IOException {
		if(!destFile.exists()) {
			destFile.createNewFile();
		}
		
		FileInputStream fis = new FileInputStream(srcFile);
		FileOutputStream fos = new FileOutputStream(destFile);
		
		FileChannel source = fis.getChannel();
		FileChannel destination = fos.getChannel();
----------------------------------------
import com.google.appengine.api.xmpp.XMPPServiceFactory;

public class XMPPSendMessage {

	public static boolean sendMessage(String message, String receipient) {
		//Create Message
		JID jid = new JID(receipient);
        Message msg = new MessageBuilder()
            .withRecipientJids(jid)
            .withBody(message)
            .build();

        //Send Message
        XMPPService xmpp = XMPPServiceFactory.getXMPPService();
        SendResponse status = xmpp.sendMessage(msg);
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,1538509.java,224,234
selected,649550.java,1455,1469
----------------------------------------
        public UpdateAsynchronousOperation(ComicDriver c, UserInterface ui) {
            super(c, ui, new ObjectCache<byte[]>(5));
        }

        @Override
        protected void performOperation() throws Exception {
            if (state != State.IDLE) return;
            changeState(State.UPDATING);
            try {
                ComicStrip newest = newest();
                if (firstStrip == null) firstStrip = first();
----------------------------------------
                Integer ii = (Integer) p_po.get_Value(index);
                if (ii != null) m_C_BPartner_ID = ii.intValue();
            }
            if (m_C_BPartner_ID == -1) m_C_BPartner_ID = 0;
        }
        return m_C_BPartner_ID;
    }

    /**
	 * 	Set C_BPartner_ID
	 *	@param C_BPartner_ID bp
	 */
    public void setC_BPartner_ID(int C_BPartner_ID) {
        m_C_BPartner_ID = C_BPartner_ID;
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
default,125820.java,194,205
default,68920.java,66,79
----------------------------------------
            int i = 0;
            while (!statements.isEmpty()) {
                Statement st = (Statement) statements.remove(i);
                try {
                    if (st != null) {
                        st.close();
                        st = null;
                    }
                } catch (SQLException sqle) {
                    printSQLException(sqle);
                }
            }
----------------------------------------
        if (ok) return a; else return b;
    }

    int getID() {
        int id = 0;
        try {
            rs = sql.executeQuery("select * from gathers order by id DESC");
            if (rs.next()) {
                id = rs.getInt("id");
            }
            id = id + 1;
        } catch (SQLException e) {
            e.printStackTrace();
        }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,198506.java,344,358
selected,539965.java,304,314
----------------------------------------
            return "BuFilters.ROLLOVER";
        }
    }

    static class PressedFilter extends RGBImageFilter {

        protected PressedFilter() {
        }

        public int filterRGB(int _x, int _y, int _rgb) {
            int a = (_rgb & 0xff000000) >> 24;
            int r = (_rgb & 0x00ff0000) >> 16;
            int g = (_rgb & 0x0000ff00) >> 8;
            int b = (_rgb & 0x000000ff);
            r -= 64;
----------------------------------------
            for (int x = 0; x < w * 2; x++) {
                lineBuf[x] = 0;
            }
        }
    }

    void renderChar(int cacheX, int cacheY, int resIndex, int ch, int fg, int bg, int flags) {
        int fg_r = (fg >> 16) & 0xff;
        fg_r += (fg_r >> 7);
        int fg_g = (fg >> 8) & 0xff;
        fg_g += (fg_g >> 7);
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
sample,SendEMail.java,9,22
sample,DBUpdateAndRollback.java,1,14
----------------------------------------
import javax.mail.Session;
import javax.mail.Transport;
import javax.mail.internet.InternetAddress;
import javax.mail.internet.MimeMessage;
 
public class SendMailTLS {
	public static void main(String[] args) {
 
		final String username = "username@gmail.com";
		final String password = "password";
 
		Properties props = new Properties();
		props.put("mail.smtp.auth", "true");
		props.put("mail.smtp.starttls.enable", "true");
----------------------------------------
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.sql.Statement;


public class DBUpdateAndRollback {
	
	public static void Sample1(String myField, String condition1, String condition2) throws SQLException {
		Connection connection = DriverManager.getConnection("jdbc:postgresql://localhost/test", "user", "password");
		connection.setAutoCommit(false);
		
		PreparedStatement ps = connection.prepareStatement("UPDATE myTable SET myField = ? WHERE myOtherField1 = ? AND myOtherField2 = ?");
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,730376.java,23,35
selected,755108.java,10,28
----------------------------------------
public class SDLoginModule extends AppservPasswordLoginModule {

    private static final Logger l;

    private static final String REQUEST;

    private static List<String> ROLES;

    static {
        l = Logger.getLogger(SDLoginModule.class.getName());
        REQUEST = "select role from user_roles ur, user_ u where ur.user_id = u.id and u.email = ? and u.password = ?";
        ROLES = Arrays.asList(new String[] { "ADMIN", "CLIENT" });
    }
----------------------------------------
import java.util.regex.Pattern;

/**
 * Utilitiy class with methods to calculate an md5 hash and to encode URLs.
 *
 * @author Janni Kovacs
 */
public class StringUtilities {

    private static MessageDigest digest;

    private static Pattern MBID_PATTERN = Pattern.compile("^[0-9a-f]{8}\\-[0-9a-f]{4}\\-[0-9a-f]{4}\\-[0-9a-f]{4}\\-[0-9a-f]{12}$", Pattern.CASE_INSENSITIVE);

    private static final Pattern MD5_PATTERN = Pattern.compile("[a-zA-Z0-9]{32}");

    static {
        try {
            digest = MessageDigest.getInstance("MD5");
        } catch (NoSuchAlgorithmException e) {
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,486506.java,530,544
selected,486506.java,532,545
----------------------------------------
        ys = newYs;
        inDegree = newIn;
        outDegree = newOut;
        roads = newRoads;
        distances = newDist;
        invalid = newVal;
    }

    /**
	 * Adjusts the datastructures when number of buildings gets too large.
	 **/
    private void resizeBs() {
        int newSize = (buildingXs.length * 2);
        int[] newXs = new int[newSize];
        int[] newYs = new int[newSize];
----------------------------------------
        outDegree = newOut;
        roads = newRoads;
        distances = newDist;
        invalid = newVal;
    }

    /**
	 * Adjusts the datastructures when number of buildings gets too large.
	 **/
    private void resizeBs() {
        int newSize = (buildingXs.length * 2);
        int[] newXs = new int[newSize];
        int[] newYs = new int[newSize];
        int[] newEnt = new int[newSize];
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,1852562.java,228,250
selected,1852562.java,256,276
----------------------------------------
            try {
                bookEditor.close();
            } catch (DatabaseException e) {
                e.printStackTrace();
            }
        }
    }

    class ActionPageAddChild extends AppAction {

        @Override
        public void action() {
            bookEditor.editAddChildPage();
        }
    }

    class ActionPageAddSibling extends AppAction {

        @Override
        public void action() {
            bookEditor.editAddSiblingPage();
        }
    }
----------------------------------------
            bookEditor.editRemovePage();
        }
    }

    class ActionPageMoveUp extends AppAction {

        @Override
        public void action() {
            bookEditor.editMovePageUp();
        }
    }

    class ActionPageMoveDown extends AppAction {

        @Override
        public void action() {
            bookEditor.editMovePageDown();
        }
    }

    class ActionPageMoveInside extends AppAction {
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,579830.java,1012,1028
selected,579830.java,1024,1037
----------------------------------------
        class AdvertiserContact extends UnbreakableTimerTask {

            public void runCaught() {
                BuddyList.contactAdvertiser();
            }
        }
        class GarbageCollectorForcer extends UnbreakableTimerTask {

            public void runCaught() {
                forceGarbageCollection();
            }
        }
        class QueuePoller extends UnbreakableTimerTask {

            public void runCaught() {
                BuddyList.tryToSend();
                EntryPoint.gui.tableModelConnections.fireTableDataChanged();
----------------------------------------
        class QueuePoller extends UnbreakableTimerTask {

            public void runCaught() {
                BuddyList.tryToSend();
                EntryPoint.gui.tableModelConnections.fireTableDataChanged();
                EntryPoint.gui.speed.update();
            }
        }
        class Poller extends UnbreakableTimerTask {

            public void runCaught() {
                BuddyList.pollOne();
            }
        }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,733071.java,229,239
selected,2031514.java,70,80
----------------------------------------
        mRedoParcel = mJecSaveState.mRedoParcelState;
        setUndoRedoButtonStatus();
    }

    public void init() {
        mCRC32 = new CRC32();
        mHighlight = new Highlight();
        mWorkPaint = new TextPaint();
        mTextPaint = getPaint();
        mLineNumberPaint = new Paint(Paint.ANTI_ALIAS_FLAG);
        mWhiteSpacePaint = new Paint(Paint.ANTI_ALIAS_FLAG);
----------------------------------------
        crc32 = new CRC32();
        md5 = MessageDigest.getInstance("MD5");
        arrayConfig = "Unknown";
    }

    public RPFile(File rpFile) throws Exception {
        file = rpFile;
        name = file.getName();
        scans = new ArrayList();
        eof = false;
        fpos = fmax = 0;
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,1113186.java,137,159
selected,1815392.java,233,249
----------------------------------------
        return result;
    }

    /**
   * Performs a number of insert or update statements within one transaction.
   * 
   * @param statements The update or insert statements to execute.
   * @param olVersionCheck A check for the optimistic locking version. 
   *                       If it fails, no statements will be executed. Can be null.
   * @return The number of affected rows. Returns -1 when the olVersionCheck failed.
   * @throws DaoException
   */
    protected int executeUpdates(List<UpdateStatement> statements, OlVersionCheck olVersionCheck) throws DaoException {
        if (LOGGER.isDebugEnabled()) {
            LOGGER.debug("start executeUpdates");
        }
        PreparedStatement stmt = null;
        Connection conn = null;
        int rowsAffected = 0;
        try {
            conn = ds.getConnection();
            conn.setAutoCommit(false);
            conn.rollback();
----------------------------------------
                aAddrs = super.getAllRecipients();
            }
        }
        if (DebugFile.trace) {
            DebugFile.decIdent();
            DebugFile.writeln("End DBMimeMessage.getAllRecipients()");
        }
        return aAddrs;
    }

    public Address[] getRecipients(Message.RecipientType cTpRecipient) throws MessagingException {
        int a;
        int iRecipients = 0;
        String sType;
        DBInetAddr[] aRecipients = null;
        DBInetAddr oAdr;
        if (oFolder == null) {
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,2297787.java,783,796
selected,2297787.java,781,796
----------------------------------------
        public final String logintoken;

        public final String logincaptcha;

        public CaptchaRespond(String logintoken, String logincaptcha) {
            this.logintoken = logintoken;
            this.logincaptcha = logincaptcha;
        }
    }

    private static CaptchaRespond getCapchaRespond(String respond) {
        assert (respond != null);
        final String[] res = respond.split("\\r?\\n");
        final Map<String, String> map = new HashMap<String, String>();
----------------------------------------
    private static class CaptchaRespond {

        public final String logintoken;

        public final String logincaptcha;

        public CaptchaRespond(String logintoken, String logincaptcha) {
            this.logintoken = logintoken;
            this.logincaptcha = logincaptcha;
        }
    }

    private static CaptchaRespond getCapchaRespond(String respond) {
        assert (respond != null);
        final String[] res = respond.split("\\r?\\n");
        final Map<String, String> map = new HashMap<String, String>();
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,1631986.java,196,206
selected,1631986.java,191,203
----------------------------------------
            zp.process();
        }
        if (zp._fpd == null) {
            return;
        }
        int imageWidth = imgWidth;
        int imageHeight = imgHeight;
        if ((imageWidth <= 0) || (imageHeight <= 0)) {
            imageHeight = _imageHeight;
            imageWidth = _imageWidth;
        }
----------------------------------------
        return tab;
    }

    public static void plot(ZoieIndexLogProcessor zp, String outputFile, String seriesDescription, int imgWidth, int imgHeight, boolean createPngs, String pngDir, boolean createHtml, String htmlOutFile) throws Exception {
        if (zp._fpd == null) {
            zp.process();
        }
        if (zp._fpd == null) {
            return;
        }
        int imageWidth = imgWidth;
        int imageHeight = imgHeight;
        if ((imageWidth <= 0) || (imageHeight <= 0)) {
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,375718.java,164,178
selected,375718.java,155,173
----------------------------------------
            ftp.logout();
        } catch (Exception ex) {
        }
        try {
            ftp.disconnect();
        } catch (Exception ex) {
        }
        try {
            db.close();
        } catch (Exception ex) {
        }
    }

    private void connectAndLogin() throws SocketException, IOException, ClassNotFoundException, SQLException, FileNotFoundException {
        lastOperationTime = System.currentTimeMillis();
----------------------------------------
        return threadFinished;
    }

    public boolean finishedSuccessfully() {
        return finishedSuccessfully;
    }

    public void exit() {
        try {
            ftp.logout();
        } catch (Exception ex) {
        }
        try {
            ftp.disconnect();
        } catch (Exception ex) {
        }
        try {
            db.close();
        } catch (Exception ex) {
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,910797.java,29,47
selected,2525433.java,34,50
----------------------------------------
import org.eclipse.ui.IEditorInput;
import org.eclipse.ui.IEditorSite;
import org.eclipse.ui.ISelectionListener;
import org.eclipse.ui.IWorkbenchPart;
import org.eclipse.ui.PartInitException;
import org.eclipse.ui.part.EditorPart;

/**
 * A GEF editor for an EMF resource. It supports
 * <ul>
 * <li>command stack operations</li>
 * <li>selection</li>
 * <li>zooming</li>
 * <li>undoable property sheet page</li>
 * <li>tree and graphical outline</li>
 * <li>direct edit</li>
 * </ul>
 */
public abstract class GraphicalResourceEditor extends EditorPart implements CommandStackListener, ISelectionListener {
----------------------------------------
import org.eclipse.ui.ISelectionService;
import org.eclipse.ui.IWorkbenchPart;
import org.eclipse.ui.PartInitException;
import org.eclipse.ui.part.EditorPart;
import org.eclipse.ui.views.properties.PropertySheetPage;

/**
 * This class serves as a quick starting point for clients who are new to GEF. It will create an Editor
 * containing a single GraphicalViewer as its control.
 * <P>
 * <EM>IMPORTANT</EM>This class should only be used as a reference for creating your own EditorPart
 * implementation. This class will not suit everyone's needs, and may change in the future. Clients may copy
 * the implementation.
 * 
 * @author hudsonr
 */
public abstract class GraphicalEditor extends EditorPart implements CommandStackListener, ISelectionListener {
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,1864644.java,23,33
selected,1847763.java,29,45
----------------------------------------
    private Session sess;

    private Message msg;

    public MailController(String port, String email, String password) {
        super();
        this.port = port;
        this.email = email;
        this.password = password;
        props = new Properties();
        props.put("mail.smtp.host", "smtp.gmail.com");
----------------------------------------
        private String address;

        private String name;

        public KMailAddress(String address, String name) {
            this.address = address;
            this.name = name;
        }

        public KMailAddress(String address) {
            this.address = address;
            this.name = null;
        }

        public String getAddress() {
            return address;
        }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,891111.java,259,269
selected,2034146.java,58,69
----------------------------------------
        return field_report_groups;
    }

    public void updateEntity() {
        if (!updated_entities.contains(this.getClass())) {
            updated_entities.add(this.getClass());
            try {
                boolean may_update = false;
                Entity entity = getNewInstance();
                synchronized (update_do_sync) {
                    if (getConnection().getDataBaseUtils().mayUpdate(getConnection(), entity.getTableName())) {
----------------------------------------
            if (item != null) {
                return item.getImageName();
            }
        }
        return BonkeyConstants.ICON_FILE_EXCL;
    }

    public BackupReport doBackup(BackupManager monitor) {
        BackupReport report = new BackupFileReport(getName(), getItem().getURI());
        monitor.reportFile(getRelativeURI());
        if (!isEnabled()) {
            report.reportNotRun(Messages.getString("BackupFile.Disabled"));
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,2442524.java,1,14
default,122307.java,23,35
----------------------------------------
package com.onehao.io;

public class Test2 {

    public int compute(int n) {
        if (1 == n || 2 == n) {
            return 1;
        } else {
            return compute(n - 1) + compute(n - 2);
        }
    }

    public static void main(String[] args) {
        Test2 test = new Test2();
----------------------------------------
        if (n == 0 || n == 1) return n; else return fib(n - 1) + fib(n - 2);
    }

    public Thread getThread() {
        return t;
    }

    public Vector getResult() {
        return result;
    }

    public String toString() {
        return result.toString();
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,1175570.java,344,358
selected,1175570.java,405,417
----------------------------------------
            if (lastFold == null || lastFold.getStart() > line) {
                return lastIndex;
            } else {
                return lastIndex + 1;
            }
        }
        return -1;
    }

    private boolean isFolded(int line) {
        return getFold(line) != null;
    }

    private void addFold(Fold fold) {
        List<Fold> folds = getFolds();
----------------------------------------
        if (fold != null) {
            line = fold.getEnd();
        }
        return line;
    }

    private int getLastFoldLine(int start, int limit) {
        int closing = getFoldClosingLine(start, limit);
        if (closing > start + 1) {
            return closing;
        }
        return -1;
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
default,17407.java,10,21
selected,431346.java,58,69
----------------------------------------
    public static boolean isPalindrome(String word) {
        int left = 0;
        int right = word.length() - 1;
        while (left < right) {
            if (word.charAt(left) != word.charAt(right)) {
                return false;
            }
            left++;
            right--;
        }
        return true;
    }
----------------------------------------
                break;
            }
        }
        return result;
    }

    private boolean isPalindrome(String w) {
        for (int i = 0; i < w.length() / 2; i++) {
            if (w.charAt(i) != w.charAt(w.length() - 1 - i)) {
                return false;
            }
        }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,700821.java,183,205
selected,1171447.java,388,398
----------------------------------------
            if (d != (index + 1)) {
                return false;
            }
        }
        return true;
    }

    /**
	 * @param ab
	 * @return
	 */
    public static long sumOfDigits(BigInteger ab) {
        String number = ab.toString();
        return sumOfDigits(number);
    }

    /**
	 * @param number
	 * @return
	 */
    private static long sumOfDigits(String number) {
        long sum = 0;
        for (char c : number.toCharArray()) {
----------------------------------------
                return TimeDatumFormatter.YEARS;
            }
        } else {
            return TimeDatumFormatter.formatterForScale(digit + 1, range);
        }
    }

    public static void main(String[] args) throws Exception {
        System.err.println(primeFactors(1000));
        List<Integer> factors = factors(primeFactors(1000));
        for (int i = 0; i < factors.size(); i++) {
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
default,9468.java,230,249
default,42671.java,97,112
----------------------------------------
        public ToggleFragmentButton(String text, boolean state) {
            super(text, state);
            addItemListener(this);
        }

        /**
         * The actionPerformed method is called when the user clicks on the button.
         * It repaints TandemGraphGUI.
         *
         * @param e Unused.
         */
        public void itemStateChanged(ItemEvent e) {
            Object source = e.getItemSelectable();
            if (source == blueBs) {
                if (e.getStateChange() == ItemEvent.DESELECTED) {
                    tandemGraph.setBlueBs(false);
                } else {
                    tandemGraph.setBlueBs(true);
                }
            } else {
----------------------------------------
        Dimension newSize = new Dimension(getSize().width, newHeight);
        playerPanel.setSize(newSize);
        setSize(newSize);
        playerModel.setMonitorVisible(show);
        repaint();
    }

    /**
     * Changes the font size of all components in this Player.
     * 
     * @param change the change in font size
     */
    public void setGlobalFontSize(int fontSize) {
        if (globalFont == null) {
            globalFont = getFont();
        }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
default,41463.java,28,41
default,72895.java,22,38
----------------------------------------
        if (printErrors) {
            System.out.println(str);
        }
    }

    private static String current_token = null;

    private static StringTokenizer reader;

    private static BufferedReader in = new BufferedReader(new InputStreamReader(System.in));

    private static String getNextToken() {
        return getNextToken(true);
    }
----------------------------------------
    private static Locale usLocale = new Locale("en", "US");

    private static Scanner scanner = new Scanner(new BufferedInputStream(System.in), charsetName);

    static {
        scanner.useLocale(usLocale);
    }

    private StdIn() {
    }

    /**
     * Is there only whitespace left on standard input?
     */
    public static boolean isEmpty() {
        return !scanner.hasNext();
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,1142068.java,356,372
selected,804247.java,123,140
----------------------------------------
        Class objectClass = obj.getClass();
        return instanceOf(objectClass, typeClass);
    }

    /** 
     * Tests if a class is a class of a sub-class of or properly implements an interface
     * @param objectClass Class to test
     * @param typeClass Class to test against
     * @return
     */
    public static boolean instanceOf(Class objectClass, Class typeClass) {
        if (typeClass.isInterface()) {
            return interfaceOf(objectClass, typeClass);
        } else {
            return isOrSubOf(objectClass, typeClass);
        }
    }
----------------------------------------
                result.replace(i, i + 1, "\\n");
            } else if (Character.isISOControl(c)) {
                result.setCharAt(i, '.');
            }
        }
        return result.toString();
    }

    /**
   * Escape quotes and back slashes for Python. One day, this might escape
   * white space and non-printable characters too.
   *
   * @param value The string.
   * @return The escaped string.
   */
    public static String escape(String value) {
        return escape(value, false);
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,1453488.java,304,317
selected,1170505.java,233,244
----------------------------------------
        for (int row = 0; row < result.length; row++) for (int column = 0; column < result[0].length; column++) result[row][column] = obj[row][column].toString();
        return result;
    }

    /**
	 * utf8è½¬gdk
	 * 
	 * @param String
	 * @return String
	 */
    public static String utf82gbk(String utf8) {
        try {
            return new String(utf8.getBytes("UTF-8"), "GBK");
        } catch (Exception e) {
----------------------------------------
        for (int i = 0; i < a.length; i++) for (int k = 0; k < a[0].length; k++) b[i][k] = a[i][k].cc();
        return new Matrix(b);
    }

    /** Add two algebraic objects. If x is an equalsized 
	matrix, perform matrixaddition, else add x to each
	component.
	@param x    Algebraic object to be added.
	@return     The sum this+x.
	*/
    public Algebraic add(Algebraic x) throws JasymcaException {
        if (x.scalarq()) x = x.promote(this);
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,1128681.java,138,148
selected,626170.java,647,670
----------------------------------------
        } catch (Exception e) {
            throw new SecureSessionException(e);
        }
    }

    private byte[] getCmsSignedBlock(String msg) throws IOException, SecureSessionException {
        ByteArrayOutputStream bout = new ByteArrayOutputStream();
        OutputStreamWriter osw = new OutputStreamWriter(bout, "US-ASCII");
        osw.write("Content-Transfer-Encoding: binary\r\n" + "Content-Type: text/x-aolrtf; charset=us-ascii\r\n" + "Content-Language: en\r\n" + "\r\n");
        osw.flush();
        bout.write(msg.getBytes());
----------------------------------------
            throw new CryptoHelperException(msg);
        }
        return Environment.getExternalStorageDirectory().toString() + "/tmp-" + randomPart;
    }

    /**
	 * Dencrypt a file previously encrypted with
	 * encryptFileWithSessionKey().
	 * 
	 * Creates a new file without the .oisafe extension.
	 * 
	 * @author Peli
	 * 
	 * @param ctx Context of activity in order to store temp file
	 * @param fileUri Uri to either a stream or a file to read from
	 * @return If decryption is successful, returns Uri of a content 
	 * 		provider to read the plaintext file.  Upon failure,
	 * 		return null.
	 * @throws Exception
	 */
    public Uri decryptFileWithSessionKey(Context ctx, Uri fileUri) throws CryptoHelperException {
        if (debug) Log.d(TAG, "fileUri=" + fileUri.toString());
        ContentResolver contentResolver = ctx.getContentResolver();
        String inputPath = null;
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,2081236.java,633,643
selected,967523.java,97,108
----------------------------------------
        for (int i = 0; i < elementData.length; i++) s.writeObject(elementData[i]);
    }

    /**
   * Reconstitute the list from a stream (i.e., deserialize it).
   */
    private synchronized void readObject(java.io.ObjectInputStream s) throws java.io.IOException, ClassNotFoundException {
        s.defaultReadObject();
        int arrayLength = s.readInt();
        Object[] elementData = new Object[arrayLength];
        for (int i = 0; i < elementData.length; i++) elementData[i] = s.readObject();
----------------------------------------
        for (int i = 0; i < array.length; i++) {
            v.add(array[i]);
        }
    }

    /**
     * Adds an object to the end of an array.  The resulting array is of the
     * same type (e.g. <code>String[]</code>) as the input array.
     **/
    public static Object[] addElement(Object[] a, Object o) {
        Class clazz = a.getClass().getComponentType();
        Object[] a2 = (Object[]) Array.newInstance(clazz, a.length + 1);
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,2232174.java,105,116
selected,2232174.java,103,113
----------------------------------------
                        lz: while (dest == null) {
                            dest = getDest();
                            if (i == 15) {
                                System.out.println("before continue");
                                continue ly;
                            }
                            System.out.println("last statement of while-loop");
                        }
                    }
                    lz: {
                        if (i > 5) {
                            System.out.println("before break");
----------------------------------------
                if (n == (int) 0L) dest = new URL("pp://localhost:7100/first"); else ly: for (int i = 0; i < 3; i++) {
                    if (i < 1) {
                        lz: while (dest == null) {
                            dest = getDest();
                            if (i == 15) {
                                System.out.println("before continue");
                                continue ly;
                            }
                            System.out.println("last statement of while-loop");
                        }
                    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,1402790.java,441,468
selected,2653115.java,998,1010
----------------------------------------
            if (ordinal > 0) {
                PreparedStatement s2 = itemOffsetQuery2[table];
                s2.setInt(1, ordinal);
                offset = jdbc.SQLqueryInt(s2);
            }
        }
        return offset;
    }

    private boolean pairCountTablesCreated = false;

    /**
	 * Given facetIDs="1,2,3" return for each candidate the counts in the 2^3-1
	 * combinations where the candidate is on and at least one other is on. From
	 * that you can reconstruct the 2^4 states from the 2^3 base states and the
	 * candidate's totalCount.
	 * 
	 * @param facetSpecs
	 *            list of facets, or facet ranges, to find co-occurence counts
	 *            among: [f1, f2, f3-f4, f5, ...]
	 * @param isRestrictedData
	 * @param out
	 * @throws SQLException
	 * @throws ServletException
	 * @throws IOException
	 */
    void onCountMatrix(String facetSpecs, String candidates, boolean isRestrictedData, boolean needBaseCounts, DataOutputStream out) throws SQLException, ServletException, IOException {
        String[] IDs = Util.splitComma(facetSpecs);
----------------------------------------
            for (int i = 0; i < children.length; i++) {
                visitAllDirsAndFiles(new File(dir, children[i]));
            }
        } else {
            VArchivo[j] = dir.toString();
            j += 1;
        }
        return VArchivo;
    }

    public static void DialogoAbrir() {
        JFileChooser ab = new JFileChooser();
        int returnVal = ab.showOpenDialog(ab);
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,1558659.java,7,20
selected,698861.java,18,30
----------------------------------------
import java.net.*;
import java.nio.channels.FileChannel;
import java.util.zip.ZipEntry;
import java.util.zip.ZipInputStream;
import javax.swing.*;
import javax.swing.event.*;
import javax.xml.parsers.*;
import org.w3c.dom.*;

/**
 *
 * @author Daniel Dreibrodt
 */
public class Main extends JFrame implements ActionListener, ListSelectionListener, WindowListener {
----------------------------------------
import jp.ac.jaist.ceqea.A_MIG.*;
import jp.ac.jaist.ceqea.D_inSitu.*;
import jp.ac.jaist.ceqea.G_systems.*;

public class CEq_0_gui extends JFrame {

    private static JTextArea linenumbering;

    class SpcfctnDrop extends TransferHandler {

        @Override
        public boolean canImport(JComponent comp, DataFlavor[] flavors) {
            for (DataFlavor flavor : flavors) {
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,2184555.java,512,525
selected,724605.java,292,304
----------------------------------------
            if (success) {
                throw new EncryptionException(DECRYPTION_FAILED, "Decryption problem: " + e.getMessage(), e);
            } else {
                throw new EncryptionException(DECRYPTION_FAILED, "Decryption problem: WARNING: Adversary may have tampered with " + "CipherText object orCipherText object mangled in transit: " + e.getMessage(), e);
            }
        }
    }

    /**
	* {@inheritDoc}
	*/
    public String sign(String data) throws EncryptionException {
        try {
            Signature signer = Signature.getInstance(signatureAlgorithm);
----------------------------------------
                case KEY_SECRET:
                    return SecretKeyFactory.getInstance(algorithm, "BC").generateSecret(spec);
                default:
                    throw new IOException("Key type " + keyType + " not recognised!");
            }
        } catch (Exception e) {
            throw new IOException("Exception creating key: " + e.toString());
        }
    }

    protected Cipher makePBECipher(String algorithm, int mode, char[] password, byte[] salt, int iterationCount) throws IOException {
        try {
            PBEKeySpec pbeSpec = new PBEKeySpec(password);
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,818214.java,290,316
selected,131907.java,351,380
----------------------------------------
        if (chanserv == null) {
            chanserv = new ChanServ(this);
        }
        return chanserv;
    }

    /**
	 * Add a ChannelMessageListener
	 * 
	 * @param listener the listener to add
	 */
    public void addChannelMessageListener(ChannelMessageListener listener) {
        synchronized (lsnChanMsgs) {
            lsnChanMsgs.add(listener);
        }
    }

    /**
	 * Add a ChannelEventListener
	 * 
	 * @param listener the listener to add
	 */
    public void addChannelEventListener(ChannelEventListener listener) {
        synchronized (lsnChanEvents) {
            lsnChanEvents.add(listener);
        }
    }
----------------------------------------
        return known;
    }

    /**
	 * Gibt die einzige Instanz des Objektes zurï¿½ck. Wird die Methode das erste
	 * Mal aufgefufen, so wird das Objekt erzeugt.
	 * 
	 * @return Gibt das FehlerbehandlungsObjekt zurï¿½ck.
	 */
    public static ExceptionHandler getInstance() {
        synchronized (ExceptionHandler.class) {
            if (s_instance == null) {
                s_instance = new ExceptionHandler();
            }
            return s_instance;
        }
    }

    /**
	 * Wird aufgerufen, wenn ein Thread wegen einer nicht behandelten Exception
	 * stirbt.
	 * 
	 * @param t der ï¿½bergebene Thread
	 * @param e die zu ï¿½bergebende Exception
	 * 
	 */
    public void uncaughtException(Thread t, Throwable e) {
        e.printStackTrace();
        handleException(e, errors.ThreadUncaughtException, t);
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
sample,DBUpdateAndRollback.java,23,37
default,47568.java,319,329
----------------------------------------
		} else {
			connection.commit();
		}
		
		ps.close();
		connection.close();
	}
	
	public static void Sample2(String myField, String condition1, String condition2) throws SQLException {
		Connection connection = DriverManager.getConnection("jdbc:postgresql://localhost/test", "user", "password");
		connection.setAutoCommit(false);
		
		Statement st = connection.createStatement();
		
		String sql = "UPDATE myTable SET myField = '" + myField + "' WHERE myOtherField1 = '" + condition1 + "' AND myOtherField2 = '" + condition2 + "'";
----------------------------------------
            String systemId = spe.getSystemId();
            if (systemId == null) {
                systemId = "null";
            }
            String info = "URI=" + systemId + " Line=" + spe.getLineNumber() + ": " + spe.getMessage();
            return info;
        }

        public void warning(SAXParseException spe) throws SAXException {
            out.println("Warning: " + getParseExceptionInfo(spe));
        }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
default,17407.java,13,26
default,17407.java,10,21
----------------------------------------
        while (left < right) {
            if (word.charAt(left) != word.charAt(right)) {
                return false;
            }
            left++;
            right--;
        }
        return true;
    }

    public static boolean isMirrorString(String word, Hashtable table) {
        int left = 0;
        int right = word.length() - 1;
        while (left <= right) {
----------------------------------------
    public static boolean isPalindrome(String word) {
        int left = 0;
        int right = word.length() - 1;
        while (left < right) {
            if (word.charAt(left) != word.charAt(right)) {
                return false;
            }
            left++;
            right--;
        }
        return true;
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,2182596.java,126,140
selected,1592926.java,1323,1335
----------------------------------------
        if (getLabel() != null) {
            calcLabelPosition();
        }
    }

    /**
     * @param actor
     * @return
     */
    public Point reserve(ValueActor actor) {
        this.reserved = actor;
        Point rp = getRootLocation();
        int w = actor.width;
        int h = actor.height;
        rp.translate(valuex + (valuew - w) / 2, valuey + (valueh - h) / 2);
----------------------------------------
        if (fcSund != null) {
            fcSund.closeDict();
            fcSund = null;
        }
        return tmpa;
    }

    private int SDLoadSoundDataByIdx(long idxValue) {
        DictFileInfo dictFile = dictConstInstance.fileInfo;
        long tmpa;
        long tmpb;
        tmpb = (idxValue & 0xFF000000) >> 24;
        String str = new String(dictFile.MainFileName + "s" + Integer.toString((int) tmpb) + ".dat");
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,1325423.java,141,156
selected,1121245.java,455,470
----------------------------------------
        } catch (Exception ex) {
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            @Override
            public void run() {
                new AboutNeembuuUploader().setVisible(true);
            }
        });
    }
----------------------------------------
        new MainPane(myTitle);
    }

    public static void main(String[] args) {
        javax.swing.SwingUtilities.invokeLater(new Runnable() {

            public void run() {
                createAndShowGUI();
            }
        });
    }

    /**
     * This class is needed for proper exiting.
     */
    private class MainPaneWindowAdapter extends WindowAdapter {
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
default,67697.java,131,141
default,71930.java,261,273
----------------------------------------
        for (i = 0; i < fileList.length; i++) {
            if (i % 10 == 0) System.out.println(i + "th file is being processed!!!");
            processFile(fileList[i], i);
        }
        report();
    }

    public static void report() {
        int i, j;
        double val, equalVal;
        for (i = 0; i < 10 && i < fileList.length; i++) {
----------------------------------------
                if (command == END) break;
                region.addElement(buildTemplateRegion(inLine));
            } else {
                if (DEBUG) System.out.println("adding line to region :" + inLine);
                region.addElement(inLine);
            }
        }
    }

    void buildCondRegion(Vector region) throws IOException {
        Vector intern = new Vector();
        for (; ; ) {
            String inLine = readLine();
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,518305.java,20,34
selected,518305.java,14,27
----------------------------------------
        type = _type;
        dclass = _dclass;
        ttl = _ttl;
    }

    private static Class toClass(short type) throws ClassNotFoundException {
        return Class.forName("DNS." + Type.string(type) + "Record");
    }

    static Record newRecord(Name name, short type, short dclass, int ttl, int length, CountedDataInputStream in, Compression c) throws IOException {
        Record rec;
        try {
            Class rrclass;
            Constructor m;
            rrclass = toClass(type);
----------------------------------------
    int ttl;

    int oLength;

    Record(Name _name, short _type, short _dclass, int _ttl) {
        name = _name;
        type = _type;
        dclass = _dclass;
        ttl = _ttl;
    }

    private static Class toClass(short type) throws ClassNotFoundException {
        return Class.forName("DNS." + Type.string(type) + "Record");
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,2445686.java,114,125
selected,2504222.java,683,694
----------------------------------------
            AssignLocal a = localForVMX.createSet();
            a.complete(this);
            getBlock().insertBranchNode(0, a.add(i));
        }
    }

    public Local getLocalForVMX() {
        return localForVMX;
    }

    private void declareLocalForVMX() {
        localForVMX = declareLocal("vmx.", Member.FINAL, ClassAdapter.wrap(VMXState.class), null);
----------------------------------------
                                        poorAtts.remove(new Integer(splitAtts[0]));
                                    }
                                }
                            }
                        }
                        for (int poorAtt : poorAtts) {
                            node.disableAttribute(poorAtt);
                        }
                    }
                }
            } else if (bestSplitSuggestions.length > 0) {
                double hoeffdingBound = computeHoeffdingBound(splitCriterion.getRangeOfMerit(node.getObservedClassDistribution()), this.secondarySplitConfidenceOption.getValue(), node.getWeightSeen());
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,38829.java,281,292
selected,1680532.java,175,187
----------------------------------------
        String old = this.currentFile;
        this.currentFile = currentFile;
        this.pcs.firePropertyChange("currentFile", old, currentFile);
    }

    public void addPropertyChangeListener(PropertyChangeListener listener) {
        this.pcs.addPropertyChangeListener(listener);
    }

    public void removePropertyChangeListener(PropertyChangeListener listener) {
        this.pcs.removePropertyChangeListener(listener);
    }
----------------------------------------
            int offset = 0;
            String offsetString = "  ";
            kml.writeKML(this.out, this.xmlNS, offset, offsetString, this.xmlNS);
            this.out.flush();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private void writeXMLDeclaration(final BufferedWriter out) throws IOException {
        out.write("<?xml version=\"1.0\" encoding=\"UTF-8\"?>");
        out.newLine();
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
sample,CRC32FileChecksum.java,7,17
sample,CreateRSAKeys.java,24,36
----------------------------------------
import java.io.InputStream;
import java.util.zip.CRC32;

public class CRC32FileChecksum {
	public static long checksum1(File file) throws IOException {
		CRC32 crc = new CRC32();
		FileReader fr = new FileReader(file);
		int data;
		while((data = fr.read()) != -1) {
			crc.update(data);
		}
----------------------------------------
		System.out.println(generateKeys1());
	}
	
	public static KeyPair generateKeys1() throws NoSuchAlgorithmException, IOException {
		//Minimum Example
		KeyPairGenerator keyGen = KeyPairGenerator.getInstance("RSA");
		KeyPair keyPair = keyGen.generateKeyPair();
		return keyPair;
	}
	
	public static void generateKeys2(int keySize, Path publicKey, Path privateKey) throws NoSuchAlgorithmException, IOException {
		//Fuller Example
		KeyPairGenerator keyGen = KeyPairGenerator.getInstance("RSA");
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,1260441.java,13,31
selected,956450.java,59,71
----------------------------------------
public class TransactionManagerFinder {

    /** The NucleusContext. */
    NucleusContext nucleusContext;

    /** List of available locator class names. */
    static String[] locators = null;

    /** Locator class to use (if any) */
    String locator = null;

    /**
     * Constructor.
     * @param ctx Context for persistence
     */
    public TransactionManagerFinder(NucleusContext ctx) {
        if (locators == null) {
            locators = ctx.getPluginManager().getAttributeValuesForExtension("org.datanucleus.jta_locator", null, null, "class-name");
        }
----------------------------------------
    private MessagesSource messagesSource = null;

    private ServletRequestDataBinderTemplate binderTemplate = null;

    private String cancelView = null;

    @Override
    protected void initApplicationContext() {
        super.initApplicationContext();
        if (recipeBiz == null) {
            recipeBiz = (RecipeBiz) getApplicationContext().getBean(recipeBizBeanName);
        }
        if (recipeSearchBiz == null) {
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,1587587.java,224,240
selected,1510771.java,460,483
----------------------------------------
                return "<img src=\"" + path + "\" border=\"" + border + "\" alt=\"" + alt + "\"  title=\"" + alt + "\"/>";
            }
        } catch (Exception e) {
            log.error("Unable to read file " + path, e);
        }
        String imgPath = ctxPath + "/" + relativeImagePath;
        return "<img src=\"" + imgPath + "\" border=\"" + border + "\" alt=\"" + alt + "\"  title=\"" + alt + "\"/>";
    }

    /**
     * @param date
     * @return
     */
    public static final String getFormattedDate(HttpServletRequest request, Date date) {
        if (date == null) return "";
        GlobalConfiguration gConfig = CompoteContext.getSystemConfiguration().getGlobalConfig();
        String pattern = gConfig.getDatetimeFormat();
----------------------------------------
        for (SolrInfoMBean bean : arr) {
            infoRegistry.put(bean.getName(), bean);
        }
    }

    /**
   * Finds the solrhome based on looking up the value in one of three places:
   * <ol>
   *  <li>JNDI: via java:comp/env/solr/home</li>
   *  <li>The system property solr.solr.home</li>
   *  <li>Look in the current working directory for a solr/ directory</li> 
   * </ol>
   *
   * The return value is normalized.  Normalization essentially means it ends in a trailing slash.
   * @return A normalized solrhome
   * @see #normalizeDir(String)
   */
    public static String locateSolrHome() {
        String home = null;
        try {
            Context c = new InitialContext();
            home = (String) c.lookup("java:comp/env/" + project + "/home");
            log.info("Using JNDI solr.home: " + home);
        } catch (NoInitialContextException e) {
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,2424712.java,156,171
selected,209583.java,440,455
----------------------------------------
            for (int j = 0; j < width; j++) {
                hb.append(elements[i][j]);
            }
        }
        return hb.hashCode();
    }

    @Override
    public boolean equals(Object obj) {
        if (obj == null) {
            return false;
        }
        if (this == obj) {
            return true;
        }
        if (!this.getClass().equals(obj.getClass())) {
----------------------------------------
                    if (!coefficients[r][c].isOne()) {
                        return false;
                    }
                } else {
                    if (!coefficients[r][c].isZero()) {
                        return false;
                    }
                }
            }
        }
        return true;
    }

    public boolean isRegular() {
        return determinant().equals(Rational.getZero());
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,1125396.java,98,109
selected,676147.java,191,201
----------------------------------------
        if (!this.error) bind();
    }

    private InetAddress selectNetworkConnection() {
        InetAddress loopback;
        try {
            loopback = InetAddress.getByName("127.0.0.1");
        } catch (Exception e) {
            loopback = null;
        }
        String desiredConnection = ServerConfig.getInstance().getStringPref(ServerConfig.NETWORK_CONNECTION);
        if (desiredConnection.endsWith("127.0.0.1")) return loopback;
----------------------------------------
                    boolean result = false;
                    Iterator<PerStreamConfiguration> iteratorResultList = resultList.iterator();
                    while (iteratorResultList.hasNext()) {
                        PerStreamConfiguration psctemp = iteratorResultList.next();
                        if (psctemp.ROAddr.equals(psc.ROAddr)) {
                            result = true;
                            break;
                        } else {
                            result = false;
                        }
                    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,1881838.java,1207,1228
selected,2248939.java,156,172
----------------------------------------
            if (hostname.equalsIgnoreCase(admin)) {
                return true;
            }
        }
        return false;
    }

    /**
   * Sends a message to sendTo with a URL to an image randomly gotten from
   * the Pirate Bay with by tag. Also, a record is saved to the database
   * with the pertaining information.
   * @param sendTo
   * @param sender
   * @param login
   * @param hostname
   * @param tag
   */
    private void findRandom(String sendTo, String sender, String login, String hostname, String tag) throws NoSuchURLException {
        this.log("Trying to find random for tag: " + tag);
        try {
            String data = URLEncoder.encode("tag", "UTF-8") + "=" + URLEncoder.encode(tag, "UTF-8");
            long startTime = System.currentTimeMillis();
----------------------------------------
        OptionBuilder.withLongOpt("no-dig");
        options.addOption(OptionBuilder.withDescription("non digestion mode.").create());
        options.addOption("p", "precision", true, "define the decimal precision for any mass-to-charge ratio\n" + "by default: " + DEFAULT_PRECISION + ".");
        return options;
    }

    /**
	 * Parse command line and configure the system.
	 * 
	 * @param args the arguments.
	 * @throws org.apache.commons.cli.ParseException
	 * 
	 * @throws ParseException if parsing of parameters failed.
	 */
    private static void parseCommandLine(String[] args) throws org.apache.commons.cli.ParseException {
        Options options = null;
        CommandLineParser parser = null;
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,2100177.java,14,35
selected,513252.java,19,29
----------------------------------------
import java.util.UUID;
import static org.junit.Assert.*;
import static org.mockito.BDDMockito.given;
import static org.mockito.Matchers.anyLong;
import static org.mockito.Mockito.times;
import static org.powermock.api.mockito.PowerMockito.*;

/**
 * Demonstrates PowerMockito's ability to mock non-final and final system
 * classes. To mock a system class you need to prepare the calling class for
 * testing. I.e. let's say you're testing class A which interacts with
 * URLEncoder then you would do:
 * 
 * <pre>
 * 
 * &#064;PrepareForTest({A.class})
 * 
 * </pre>
 */
@RunWith(PowerMockRunner.class)
@PrepareForTest({ SystemClassUser.class })
public class SystemClassUserTest {
----------------------------------------
import java.util.List;
import static com.bphx.android.exception.ExceptionFactory.getException;
import static com.bphx.android.network.NetworkConstants.*;
import static com.bphx.android.utils.Utils.closeSafely;
import static java.net.URLEncoder.encode;

/**
 * @author Vyacheslav Kovalyov
 * @version 1.0
 */
class NetworkManager implements INetworkManager {
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,1486931.java,280,290
selected,1877668.java,57,71
----------------------------------------
            group = getGroup(record);
            return group.getRecord(arr, record);
        } catch (IOException ioe) {
            throw new mvException(0, ioe);
        } finally {
            if (group != null) group.close();
        }
    }

    public mvConstantString MATREADU(Program program, mvArray arr, mvConstantString record, mvString status, boolean locked) throws LockedException, mvException {
        RecordNode rn = new RecordNode();
----------------------------------------
                factors.put(p, exp);
            }
        }
        if (n != 1) {
            factors.put(n, 1);
        }
    }

    @Override
    public String toString() {
        if (factors.size() == 0) {
            return "1";
        }
        StringBuilder sb = new StringBuilder();
        boolean empty = true;
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
default,91744.java,506,519
selected,1688103.java,122,142
----------------------------------------
        shell.setCursor(iconCache.stockCursors[iconCache.cursorDefault]);
    }

    /**
	 * Traverse the entire tree and update only what has changed.
	 * 
	 * @param roots the root directory listing
	 */
    private void treeRefresh(File[] masterFiles) {
        TreeItem[] items = tree.getItems();
        int masterIndex = 0;
        int itemIndex = 0;
        for (int i = 0; i < items.length; ++i) {
            final TreeItem item = items[i];
----------------------------------------
            retVal &= file.delete();
        }
        return retVal;
    }

    /**
   * This method is used to recursively copy the contents of one
   * complete directory tree from one location in the file system
   * to another.
   *
   * @param srcDir The source directory whose contents are to be
   *        copied
   * @param targetDir The target directory (to which the contents
   *        of the source directory are copied)
   * @throws IOException
   */
    public static void copyTree(File srcDir, File targetDir) throws IOException {
        File[] files = srcDir.listFiles();
        for (int i = 0; i < files.length; i++) {
            File file = files[i];
            File outFile = new File(targetDir, file.getName());
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,2279857.java,95,112
selected,2449793.java,792,807
----------------------------------------
        return name;
    }

    public void setName(final String name) {
        this.name = name != null ? name.toLowerCase() : null;
    }

    /**
     * Calculates the maximum row size given the table definition. A negative
     * valule implies that the structure has blob fields, and the calculated
     * size takes only non-blob fields into account.
     * @return maximum row size, 0 if not defined
     */
    public int getMaxRowSize() {
        final FieldInfo[] fieldInfo = this.fieldInfo;
        if (fieldInfo != null) {
            int size = 22;
            int factor = 1;
----------------------------------------
                res = Value.createFromBlock(cons);
            }
        }
        return res;
    }

    /**
     * Registers a callback.
     * @param s callback identifier - should not be <tt>null</tt>
     * @param v callback value - should not be <tt>null</tt>
     */
    public void registerCallback(final String s, final Value v) {
        assert s != null : "null s";
        assert v != null : "null v";
        this.callbacks.put(s, v);
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
default,38829.java,156,172
default,47440.java,146,159
----------------------------------------
                    bridgeSpilledParamLocation -= 8;
                } else if (bridgeParameterType.isFloatType()) {
                    bridgeSpilledParamLocation -= 4;
                } else {
                    bridgeRegisterIndex += 1;
                    bridgeRegisterLocation -= 4;
                    bridgeSpilledParamLocation -= 4;
                }
            }
        } else {
            registerLocations[JTOC] = framePtr + JTOC_SAVE_OFFSET;
        }
        return 0;
    }

    int getNextReturnAddressAddress() {
        if (mapId >= 0) {
----------------------------------------
                            return bridgeSpilledParamLocation + 4;
                        } else {
                            break;
                        }
                    }
                } else if (bridgeParameterType.isLongType()) {
                    bridgeRegisterIndex += 2;
                    bridgeRegisterLocation -= 8;
                    bridgeSpilledParamLocation -= 8;
                } else if (bridgeParameterType.isDoubleType()) {
                    bridgeSpilledParamLocation -= 8;
                } else if (bridgeParameterType.isFloatType()) {
                    bridgeSpilledParamLocation -= 4;
                } else {
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
sample,WritePDF.java,14,29
sample,CopyFileSamples.java,68,79
----------------------------------------
    public static void main(String[] args) {
        Document document = new Document();

        try {
            PdfWriter.getInstance(document, new FileOutputStream("HelloWorld.pdf"));

            document.open();
            document.add(new Paragraph("A Hello World PDF document."));
            document.close(); // no need to close PDFwriter?

        } catch (DocumentException e) {
            e.printStackTrace();
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        }
    }
----------------------------------------
		out.close();
	}
	
	public static void copyFile6(File srcFile, File destFile) throws FileNotFoundException {
		Scanner s = new Scanner(srcFile);
		PrintWriter pw = new PrintWriter(destFile);
		while(s.hasNextLine()) {
			pw.println(s.nextLine());
		}
		pw.close();
		s.close();
	}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,2241809.java,49,60
sample,CRC32FileChecksum.java,8,18
----------------------------------------
        public ExtStringBuilder(StringBuilder sb) {
            this.sb = sb;
        }

        public void replaceAll(String search, int replace) {
            replaceAll(search, String.valueOf(replace));
        }

        public void replaceAll(String search, String replace) {
            int length = search.length();
            int start = sb.indexOf(search);
            while (start != -1) {
----------------------------------------
import java.util.zip.CRC32;

public class CRC32FileChecksum {
	public static long checksum1(File file) throws IOException {
		CRC32 crc = new CRC32();
		FileReader fr = new FileReader(file);
		int data;
		while((data = fr.read()) != -1) {
			crc.update(data);
		}
		fr.close();
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
default,25925.java,21,31
default,43212.java,25,45
----------------------------------------
        if (executor == null) executor = getConsoleInterpreter();
    }

    public ConsoleEmulator(ProcessMaster cm, String command, String[] args) {
        commandToExecute = command;
        myMaster = cm;
        if (executor == null) executor = getConsoleInterpreter();
        arguments = args;
    }

    public ConsoleEmulator(String command, String[] args) {
----------------------------------------
    public MPIblast(String fi, String fo, int num_f, int num_sub_s, BufferedWriter[][] b) {
        file_in = fi;
        file_out = fo;
        num_frame = num_f;
        num_sub_sequence = num_sub_s;
        bb = b;
    }

    /**
		 * do the local Blast and extract results
		 * @param sc set of parameters of the current screening
		 * @param s sequence to be blasted
		 * @return array of parameters we want
		 */
    public String[][] blast(Screen sc, Seq s) throws Exception {
        String database;
        String program;
        if (s.getNature() == Nature.DNA) {
            database = sc.get_dataN();
            program = "blastn";
        } else {
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,1859243.java,15,26
sample,DownloadWebpage.java,15,27
----------------------------------------
        return fib(n - 1) + fib(n - 2);
    }

    public Task(long n, String id) {
        this.n = n;
        this.id = id;
    }

    public void run() {
        Date d = new Date();
        DateFormat df = new SimpleDateFormat("HH:mm:ss:SSS");
        long startTime = System.currentTimeMillis();
----------------------------------------
import org.apache.http.impl.client.HttpClientBuilder;


public class DownloadWebpageSamples {
	
	public static String downloadWebpage1(String address) throws MalformedURLException, IOException {
		URL url = new URL(address);
		BufferedReader br = new BufferedReader(new InputStreamReader(url.openStream()));
		String line;
		String page = "";
		while((line = br.readLine()) != null) {
			page += line + "\n";
		}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,1748614.java,1273,1283
selected,268197.java,254,266
----------------------------------------
                if (key.indexOf(".") < 0 || removePropertyName(key).equals(id)) {
                    toRemove = false;
                    break;
                }
            }
            if (toRemove) {
                props.remove(key);
                changed = true;
            }
        }
        if (changed && s.canWrite()) {
----------------------------------------
        int i = searchNearestIntensityPointIndex(x);
        if ((i > 0) && (i < (intensityPoints.size() - 1))) {
            intensityPoints.remove(i);
            intensityChanged = true;
            intensityUsed = true;
        }
    }

    /**
	 *	clear the intensity-points to default value (all 1)
	 */
    public void clearIntensity() {
        intensityPoints.clear();
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,5744.java,38,50
selected,1271902.java,428,451
----------------------------------------
        for (int i = 0; i < bts.length; i++) {
            tmp = (Integer.toHexString(bts[i] & 0xFF));
            if (tmp.length() == 1) {
                des += "0";
            }
            des += tmp;
        }
        return des;
    }

    public static void main(String[] args) throws UnsupportedEncodingException {
        EncryptUtil te = new EncryptUtil();
        String strSrc = "Fengyingrui1!";
----------------------------------------
                is.close();
            }
        }
    }

    /**
	 * Return a new - non existing - temporary file or directory in the user's
	 * main temporary directory. <BR>
	 * <BR>
	 * This method also registers a security shutdown hook that destroys the
	 * temporary file. <BR>
	 * However, it is strongly advised to handle the created file's destruction
	 * explicitly as soon as it is not needed anymore and avoid using hooks
	 */
    public File generateNewWorkingFile(File rootFile, String subdir, String prefix, boolean registerDeleteHook) throws IOException {
        File tmp = null;
        int i = 0;
        File root = rootFile;
        if (root == null) {
            root = new File(OSTool.getTempDirectory());
        }
        if (subdir != null) {
            root = new File(root, subdir);
        }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,1354943.java,470,485
selected,1354943.java,599,621
----------------------------------------
                throw new RuntimeException("Bad DOM node type.");
        }
    }

    /**
     * @see BaseNode#getAttr(String)
     */
    public Text getAttr(String xmlName) {
        if (xmlName.startsWith("@")) return ((Text) session.makeNewsMLNode(getDOMAttribute(xmlName.substring(1)))); else return null;
    }

    /**
     * @see BaseNode#setAttr(Text)
     */
    public Text setAttr(Text attr) {
        DOMBaseNode dAttr = (DOMBaseNode) attr;
----------------------------------------
        return (Catalog) getChild("Catalog", 0);
    }

    /**
     * @see CommentNode#getCommentCount
     */
    public int getCommentCount() {
        return getChildCount("Comment");
    }

    /**
     * @see CommentNode#getComment(int)
     */
    public Comment getComment(int index) {
        return (Comment) getChild("Comment", index);
    }

    /**
     * @see CommentNode#getComment()
     */
    public Comment[] getComment() {
        int len = getCommentCount();
        Comment ret[] = new Comment[len];
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,147801.java,64,74
selected,2722391.java,731,742
----------------------------------------
        b2.add(jb = new JButton("Browse"));
        jb.setToolTipText("The exception file consists of a list of file filters," + " one per line, which should NOT be copied to the destination." + "  The wildcard character may be used at the end of each" + " line to represent all files starting with the characters" + " up to the wildcard.");
        jb.setMnemonic('o');
        jb.addActionListener(new ActionListener() {

            public void actionPerformed(ActionEvent ae) {
                if (doBrowse(exceptionFileTxtBox, false)) {
                    parseExceptionFile();
                }
            }
        });
----------------------------------------
        is.close();
        isr.close();
    }

    private void generateJnlpFile(File jnlpFile) throws IOException {
        PrintWriter out = new PrintWriter(new BufferedWriter(new OutputStreamWriter(new FileOutputStream(jnlpFile), "UTF-8")));
        out.println("<?xml version=\"1.0\" encoding=\"utf-8\"?>");
        out.println("<jnlp spec=\"1.0\"");
        out.println("      codebase=\"" + jarCodebase_ + "\"");
        out.println("      href=\"" + instClassName_ + ".jnlp\">");
        out.println("  <information>");
        out.println("    <title>" + appName_ + " " + appVersion_ + " Installer</title>");
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,1641180.java,584,603
selected,413949.java,567,578
----------------------------------------
            sb.append(HtmlUtil.submit(msg("Download Results")));
            sb.append(HtmlUtil.formClose());
        }
        return new Result("", sb);
    }

    /**
     * _more_
     *
     * @param request _more_
     * @param mainEntry _more_
     * @param entries _more_
     *
     * @return _more_
     *
     * @throws Exception _more_
     */
    private Result outputControlpoint(Request request, Entry mainEntry, List<Entry> entries) throws Exception {
        StringBuffer sb = new StringBuffer();
        if (!request.get(ARG_PROCESS, false)) {
----------------------------------------
        return Integer.valueOf(str.substring(4, 6));
    }

    private int getYear(String str) {
        return Integer.valueOf(str.substring(0, 4));
    }

    private String getStation(String str) {
        String s = str;
        try {
            s = str.substring(0, 6);
        } catch (Exception e) {
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,1797337.java,141,159
selected,1340403.java,319,333
----------------------------------------
            } catch (IOException e) {
            }
            socket = null;
            os = null;
            is = null;
            uo.info("Disconnected connection");
        }
    }

    /**
   * Send data that was received from the server out on the socket
   * 
   * @param dataMessage
   */
    public void send(DataMessage dataMessage) throws IOException {
        if (dataMessage instanceof CRC32DataMessage) {
            CRC32DataMessage crc32DataMessage = (CRC32DataMessage) dataMessage;
            CRC32 crc32 = new CRC32();
            crc32.update(dataMessage.buffer);
----------------------------------------
        public ComputationReport(VirtualAlbum va) {
            this.va = va;
        }

        public VirtualAlbum getVA() {
            return va;
        }

        public void reportError(Exception e) {
            errorsCount++;
            String msg = e.getMessage();
            Integer i = errors.get(msg);
            if (i == null) {
                i = new Integer(0);
            }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,227225.java,403,415
selected,2247849.java,779,797
----------------------------------------
        } else return true;
    }

    /**
     * Use internal Rquest- Response CAS sequencing for a client or
     * server according to the constructor that created this object.
     */
    public final void lockWriteEnter() {
        {
            java.lang.Thread connected = this.connected;
            if (null != connected && java.lang.Thread.currentThread() != connected) throw new alto.sys.Error.Bug("mis connected");
        }
        if (null == this.lock) {
----------------------------------------
                return true;
            } finally {
                this.close();
            }
        } else return false;
    }

    /**
     * @see alto.sx.methods.Copy
     * @return True for response Created, False for response Not
     * Found.
     */
    public boolean copyTo(Reference target) throws java.io.IOException {
        if (null != this.url) {
            alto.io.Input in = this.openInput();
            try {
                alto.io.Output out = target.openOutput();
                try {
                    if (null != in && null != out) {
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
sample,PlaySound.java,39,50
selected,1796005.java,362,373
----------------------------------------
			nbytes = inputStream.read(data, 0, data.length);
			sourceLine.write(data, 0, data.length);
		}
		sourceLine.drain();
		sourceLine.close();
	}
	
	public static void main(String args[]) throws MalformedURLException, LineUnavailableException, UnsupportedAudioFileException, IOException {
		//PlaySound.playSound1(new File("/Users/jeff/Downloads/11k16bitpcm.wav"));
		PlaySound.playSound2(new File("/Users/jeff/Downloads/11k16bitpcm.wav"));
		//while(true);
	}
----------------------------------------
    public void testDefaultLazyInit() throws Exception {
        InitAndIB.constructed = false;
        XmlBeanFactory xbf = new XmlBeanFactory(new ClassPathResource("default-lazy-init.xml", getClass()));
        assertFalse(InitAndIB.constructed);
        xbf.preInstantiateSingletons();
        assertTrue(InitAndIB.constructed);
        try {
            xbf.getBean("lazy-and-bad");
        } catch (BeanCreationException ex) {
            assertTrue(ex.getCause() instanceof ServletException);
        }
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
default,109645.java,119,131
selected,1575662.java,845,861
----------------------------------------
                ThreadLock.getInstance().releaseLock();
            }
            return;
        }
    }

    private void showInfoDownloadPage(HTTPurl urlData, OutputStream outStream) throws Exception {
        String id = urlData.getParameter("id");
        ScheduleItem si = store.getScheduleItem(id);
        if (si == null) {
            String redirect = "HTTP/1.0 302 Moved Temporarily\n";
            redirect += "Location: /servlet/ScheduleDataRes\n\n";
            outStream.write(redirect.getBytes());
----------------------------------------
                logger.error("Cannot load language kit from " + languageKitFile.getAbsolutePath(), e);
            }
        }
    }

    /**
    * Returns an array of URLs for each of the working directories of the registered reports.
    * This is used to be able to dynamically load form provider, via a modified class loader.
    *
    * @return a <code>URL[]</code> representing urls out of the report directories.
    */
    private URL[] getReportsWorkingDirsUrls() {
        if (this.reportWorkingDirs == null) {
            List result = new ArrayList();
            Iterator reportNameIt = jasperReports.keySet().iterator();
            while (reportNameIt.hasNext()) {
                String reportName = (String) reportNameIt.next();
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,171248.java,351,364
selected,996082.java,73,88
----------------------------------------
        return results;
    }

    public double getMaxSeq(int[] a, int[] b) {
        int xa = a.length;
        int xb = b.length;
        int xc = xa;
        if (xb < xa) {
            xc = xb;
        }
        double score = 0;
        for (int i = 0; i < xa; i++) {
            int maxc = 0;
            for (int j = 0; j < xb; j++) {
----------------------------------------
                    currentRound[which] = tmp;
                }
            }
        }
    }

    private void chooseUsingWeights() {
        double inSumWeights = 0.0;
        double sumWeightsRemaining = 0;
        for (MCMCOperator o : operators) {
            sumWeightsRemaining += o.getWeight();
        }
        int k = nPick;
        int j = 0;
        while (k > 0) {
            final int n = operators.length - j;
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,1398711.java,27,42
selected,2220648.java,63,79
----------------------------------------
public class SwJsonPairRenderer extends SwFlowRenderingModule implements IJsonPairRenderingChannel {

    /**
	 * @param kernel
	 * @throws InvocationTargetException
	 */
    public SwJsonPairRenderer(IKernel kernel) throws InvocationTargetException {
        super(kernel);
    }

    @Override
    public Map<String, Map<String, List<Node>>> render(Map<String, Map<String, List<Node>>> iflow, Map<String, String> params, Node init, HttpServletRequest request) throws RenderingException {
        String stm = "";
        try {
            Map<String, List<Node>> istream;
            if (iflow.containsKey(stm)) istream = iflow.get(stm); else istream = new HashMap<String, List<Node>>();
----------------------------------------
            groupThreadList.add(this);
        }
    }

    /**
     * Creates a new instrumented thread with the given runnable target and adds it to a list of monitored
     * threads of a particular group
     * @param group the group under which this thread will be created
     * @param target the runnable class that will be executed when this thread is started
     * @param name the thread name (with which the corresponding timings can be referenced)
     */
    public InstrumentedThread(ThreadGroup group, Runnable target, String name) {
        super(group, name);
        runnableClass = target;
        ArrayList<InstrumentedThread> groupThreadList = groupThreadLists.get(group.getName());
        if (groupThreadList == null) {
            groupThreadList = new ArrayList<InstrumentedThread>();
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
default,60710.java,116,129
default,44269.java,111,123
----------------------------------------
        return VM_Magic.addressAsObject(JNIRefs[offset >> 2]);
    }

    public void recordException(Throwable e) {
        if (pendingException == null || e == null) pendingException = e;
    }

    public Throwable getException() {
        return pendingException;
    }

    public int getJNIenvAddress() {
        return JNIEnvAddress;
    }
----------------------------------------
                return null;
            } else {
                return data;
            }
        }

        public Data getData(String ident) {
            Data data = state.get(ident);
            if (data == null && outerscope != null) {
                data = outerscope.getData(ident);
            }
            return data;
        }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,1730017.java,668,679
selected,1508109.java,328,338
----------------------------------------
        long startTime = System.currentTimeMillis();
        boolean hasAppeard = false;
        File f = new File(file);
        while (true) {
            boolean exists = f.exists();
            if (exists) {
                hasAppeard = true;
                break;
            }
            if (maximumWaitTime <= 0) {
                break;
            }
----------------------------------------
            ulCnt--;
        }
        while (olCnt > 0) {
            buff.append("</ol>\n");
            olCnt--;
        }
        s = buff.toString();
        StringBuffer sb = new StringBuffer();
        int baseIdx = 0;
        while (true) {
            int idx1 = s.indexOf("{{", baseIdx);
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,920480.java,77,88
selected,986841.java,34,47
----------------------------------------
        trayIcon.addActionListener(new ActionListener() {

            public void actionPerformed(ActionEvent e) {
                showGUI();
            }
        });
        menuItemShow.addActionListener(new ActionListener() {

            public void actionPerformed(ActionEvent e) {
                showGUI();
            }
        });
----------------------------------------
        widget.addMouseListener(new MouseAdapter() {

            @Override
            public void mouseClicked(MouseEvent e) {
                widget.requestFocus();
                SwingUtilities.invokeLater(new Runnable() {

                    @Override
                    public void run() {
                        doNavigate();
                    }
                });
            }
        });
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,419406.java,791,803
selected,877450.java,149,161
----------------------------------------
        matkb = 0;
        phitb = 0;
        mhitb = 0;
        fleeb = 0;
        crib = 0;
        fcrib = 0;
        spdb = 0;
    }

    private void calcBase() {
        patk = str + strb;
        matk = ini + inib;
        phit = (dex + dexb) * 2 + luk;
----------------------------------------
            barcodeBarSpacing = 0;
            upperMargin = 0;
            gridWidth = fullVisualizationWidth - rightMargin - leftMargin;
            gridHeight = gridWidth;
            fullVisualizationHeight = gridHeight + heightOfBaseRegionUsedForPlotLegendRulerLabels;
        } else {
            plotTypeScatter = false;
            fullVisualizationWidth += 20;
            if (plotValue.length <= DEFAULT_BARS_PER_PAGE) {
                barcodeBarHeight = 3;
                barcodeBarSpacing = 3;
                upperMargin = 3;
            } else if (plotValue.length <= 299) {
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,1796142.java,491,504
selected,1110792.java,98,111
----------------------------------------
        throw new NotImplementedYetException();
    }

    public void disableChecker(Object checker) throws NotImplementedYetException {
        throw new NotImplementedYetException();
    }

    public void focus() throws Exception {
        getBrowserWindow().setFocus();
    }

    public void forward() throws Exception {
        webBrowser.goForward();
    }
----------------------------------------
        throw new NotImplementedYetException();
    }

    public void back() throws Exception {
        ieController.goBack();
    }

    public void bringToFront() throws Exception {
        ieController.bringToFront();
    }

    public void checkForHttpError(WatijBrowser watijBrowser) throws NotImplementedYetException {
        throw new NotImplementedYetException();
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
default,130121.java,6,23
sample,DBUpdateAndRollback.java,2,14
----------------------------------------
import javax.servlet.*;
import javax.servlet.http.*;
import Ozymandias.*;

/**
 * This class implements the User object.
 */
public class User extends Ozymandias {

    /**
	 * Returns the number of unread messages in a list for the calling User.
	 */
    public int getUnreadMessages(List list) {
        try {
            Connection conn = Ozymandias.getDBConnection();
            Statement stmt = conn.createStatement();
            String dbQuery = "SELECT COUNT(M_ID) FROM Messages WHERE L_ID='" + list.getLID() + "'";
            ResultSet results = stmt.executeQuery(dbQuery);
----------------------------------------
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.sql.Statement;


public class DBUpdateAndRollback {
	
	public static void Sample1(String myField, String condition1, String condition2) throws SQLException {
		Connection connection = DriverManager.getConnection("jdbc:postgresql://localhost/test", "user", "password");
		connection.setAutoCommit(false);
		
		PreparedStatement ps = connection.prepareStatement("UPDATE myTable SET myField = ? WHERE myOtherField1 = ? AND myOtherField2 = ?");
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
sample,DownloadWebpage.java,15,25
sample,XMPPSendMessage.java,6,20
----------------------------------------
import org.apache.http.impl.client.HttpClientBuilder;


public class DownloadWebpageSamples {
	
	public static String downloadWebpage1(String address) throws MalformedURLException, IOException {
		URL url = new URL(address);
		BufferedReader br = new BufferedReader(new InputStreamReader(url.openStream()));
		String line;
		String page = "";
		while((line = br.readLine()) != null) {
----------------------------------------
import com.google.appengine.api.xmpp.XMPPServiceFactory;

public class XMPPSendMessage {

	public static boolean sendMessage(String message, String receipient) {
		//Create Message
		JID jid = new JID(receipient);
        Message msg = new MessageBuilder()
            .withRecipientJids(jid)
            .withBody(message)
            .build();

        //Send Message
        XMPPService xmpp = XMPPServiceFactory.getXMPPService();
        SendResponse status = xmpp.sendMessage(msg);
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,857619.java,392,406
selected,2601175.java,338,350
----------------------------------------
        if (optionString.length() != 0) {
            setSeed(Integer.parseInt(optionString));
        }
        setDebug(Utils.getFlag('D', options));
    }

    /**
   * Gets the current settings of ReliefFAttributeEval.
   *
   * @return an array of strings suitable for passing to setOptions()
   */
    public String[] getOptions() {
        String[] options = new String[9];
        int current = 0;
        options[current++] = "-T";
----------------------------------------
        if (m_ClassAttribute.isNominal()) return m_ClassCounts; else return null;
    }

    /**
   * Convert the given class distribution back to the distributions
   * with the original internal class index
   * 
   * @param before the given class distribution
   * @return the distribution converted back
   */
    public double[] distributionsByOriginalIndex(double[] before) {
        double[] after = new double[m_Converter.length];
        for (int i = 0; i < m_Converter.length; i++) after[i] = before[m_Converter[i]];
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,127068.java,125,136
selected,2619466.java,279,292
----------------------------------------
            for (int j = 0; j < n; j++) {
                A[i][j] = vals[i + (j * m)];
            }
        }
    }

    /** Check if indices have the same length.
    @param i    Indices.
    @param j    Indices.
    */
    public static void checkIndicesDimensions(int[][] i, int[][] j) {
        if ((i.length != j.length) || (i[0].length != j[0].length)) {
----------------------------------------
            connection.append(j + ":head");
        }
        return connection.toString();
    }

    /**
	 * Checks if a tour makes sense.
	 * @param tour
	 * @return
	 */
    private boolean checkConsistencyOfTour(int[] tour) {
        for (int i = 0; i < (tour.length / 2); i++) {
            if (tour[i] != 0) {
                if (tour[i] == (tour[i + numberOfContigs] - 1)) {
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,2560904.java,7,17
sample,EncryptFile.java,9,23
----------------------------------------
import sis.student.Student;
import junit.framework.TestCase;

public class VariedTest extends TestCase {

    public void testForSkip() {
        StringBuilder builder = new StringBuilder();
        String string = "123456";
        for (int i = 0; i < string.length() - 1; i += 2) {
            builder.append(string.charAt(i));
        }
----------------------------------------
import javax.crypto.Cipher;
import javax.crypto.CipherOutputStream;
import javax.crypto.NoSuchPaddingException;
import javax.crypto.SecretKey;


public class EncryptFile {
	public static void encryptFile(File in, File out, SecretKey key) throws InvalidKeyException, NoSuchAlgorithmException, NoSuchPaddingException, IOException {
		// Create Cipher for Algorithm using Encryption Key
		Cipher c = Cipher.getInstance("AES");
		c.init(Cipher.ENCRYPT_MODE, key);
		
		// Create File Read/Writers
		FileInputStream fin = new FileInputStream(in);
		FileOutputStream fout = new FileOutputStream(out);
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,903003.java,239,249
selected,1765539.java,382,394
----------------------------------------
            i++;
        }
        gotDatahubInit = false;
        TryInitThroughDatahub();
        i = 1;
        while (true) {
            String argn = "history" + i;
            String s = getParameter(argn);
            if (s == null) break;
            s = unescape(s);
            AppendHistoryLine(s);
----------------------------------------
                            bitOffset += zeros;
                            isWhite = true;
                        } else {
                            bitOffset += zeros;
                            cce[currIndex++] = bitOffset;
                            setToBlack(buffer, lineOffset, bitOffset, 1);
                            ++bitOffset;
                            isWhite = false;
                        }
                    }
                } else {
                    throw new RuntimeException("Invalid code encountered while decoding 2D group 4 compressed data.");
                }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
default,44040.java,999,1019
default,61445.java,1026,1044
----------------------------------------
        public LMenuLibrarySave(GUImain guiFrame) {
        }

        public void actionPerformed(ActionEvent e) {
            app.saveLibrary();
        }
    }

    class LMenuDeckEdit implements ActionListener {

        public LMenuDeckEdit(GUImain guiFrame) {
        }

        public void actionPerformed(ActionEvent e) {
            editEntireDeck();
        }
    }

    class LMenuDeckExport implements ActionListener {

        public LMenuDeckExport(GUImain guiFrame) {
----------------------------------------
    class LMenuLibraryImport implements ActionListener {

        public LMenuLibraryImport(GUImain guiFrame) {
        }

        public void actionPerformed(ActionEvent e) {
            importLibrary();
        }
    }

    class LMenuLibrarySave implements ActionListener {

        public LMenuLibrarySave(GUImain guiFrame) {
        }

        public void actionPerformed(ActionEvent e) {
            app.saveLibrary();
        }
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
default,119227.java,312,323
default,76612.java,349,362
----------------------------------------
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }

    public void resetAll() {
        if (errorFrame != null) {
            Component[] all = errorFrame.getComponents();
            for (int i = 0; i < all.length; i++) {
                all[i] = null;
            }
            status = false;
----------------------------------------
            if (bpwindow.isBreakpoint(progwindow.GetClickedAddress())) bpwindow.removeBreakpoint(progwindow.GetClickedAddress()); else bpwindow.addBreakpoint(progwindow.GetClickedAddress());
        }
    }

    public void addWatchWindow(WatchWindow watch) {
        int i = 0;
        while (i < 5) {
            if (watchers[i] == null) {
                watchers[i] = watch;
                break;
            }
            i++;
        }
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,1941058.java,405,434
selected,413493.java,237,247
----------------------------------------
            return false;
        }
        return true;
    }

    /**
     *  Sets up a coordinate transformation from an arbitrary set of coordinates
     *  in the initial and final reference frame. Note that this procedure \b will
     *  deal with the case of N = 0,1 or 2. In the case of N=0 the identity
     *  transform is returned. In the case of N=1 the appropriate translation,
     *  without and translation is returned. In the case of N=2 there are multiple
     *  degenerate transformations, and a correct, but arbitrary, transformation
     *  is returned.<br>
     *  init_xyz and final_xyz must be identical sets of coordinates except for
     *  the frame of reference.
     *
     * @param  init_xyz    An array with the coordinates in the initial reference
     *      frame.
     * @param  final_xyz   Description of the Parameter
     * @param  n           Description of the Parameter
     */
    public void setup(double[] init_xyz, double[] final_xyz, int n) {
        clear();
        double[] xyz1 = new double[12];
        double[] xyz2 = new double[12];
        int i;
        int j;
        if (n != 0) {
            for (i = 0; i < 3; i++) {
                xyz1[i] = init_xyz[i];
----------------------------------------
            if (kk > npTypes) kk = 1;
        }
    }

    public static double[][] doubleSelectionSort(double[][] aa) {
        int index = 0;
        int lastIndex = -1;
        int n = aa[0].length;
        double holdx = 0.0D;
        double holdy = 0.0D;
        double[][] bb = new double[2][n];
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,1125396.java,266,276
selected,1610413.java,218,232
----------------------------------------
            return null;
        } catch (SecurityException e) {
            this.io.error("Permission was denied to access the key store file '" + keyStoreFile + "'.");
            return null;
        }
        KeyStore keyStore;
        String keyStoreType = KeyStore.getDefaultType();
        try {
            keyStore = KeyStore.getInstance(keyStoreType);
        } catch (KeyStoreException e) {
            LOG.warning(e.toString());
----------------------------------------
        return answer + UNKNOWN_QUERY;
    }

    private void sendFile(File file) {
        try {
            if (file.isFile()) {
                FileInputStream fReader = null;
                try {
                    fReader = new FileInputStream(file.getAbsolutePath());
                } catch (Exception e) {
                    e.printStackTrace();
                    return;
                }
                int c;
                out.println("file:" + file.getName());
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,1532128.java,421,441
selected,548564.java,202,212
----------------------------------------
        return ofDateFields(MathUtils.safeToInt(years), months, days);
    }

    /**
     * Obtains a {@code Period} consisting of the number of years between two dates.
     * <p>
     * The start date is included, but the end date is not. Only whole years count.
     * For example, from {@code 2010-01-15} to {@code 2012-01-15} is two years,
     * whereas from {@code 2010-01-15} to {@code 2012-01-14} is only one year.
     * <p>
     * The result of this method can be a negative period if the end is before the start.
     *
     * @param startDateProvider  the start date, inclusive, not null
     * @param endDateProvider  the end date, exclusive, not null
     * @return the period in days, not null
     * @throws ArithmeticException if the period exceeds the supported range
     */
    public static Period yearsBetween(DateProvider startDateProvider, DateProvider endDateProvider) {
        LocalDate startDate = LocalDate.of(startDateProvider);
        LocalDate endDate = LocalDate.of(endDateProvider);
        long startMonth = startDate.getYear() * 12L + startDate.getMonthOfYear().ordinal();
----------------------------------------
            pduSlider.setMajorTickSpacing(numberPackets / 4);
        }
    }

    public void stateChanged(ChangeEvent ce) {
        Manifest manifest = Manifest.getInstance();
        ManifestEntry manifestEntry;
        PDUPlayerData pduPlayerData = PDUPlayerData.getInstance();
        if (ce.getSource() == pduSlider) {
            int currentPDUnumber = pduSlider.getValue() - 1;
            if ((currentPDUnumber < manifest.getNumberPDUs()) && (!ignoreChangeEvent)) {
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,1003558.java,226,236
selected,70243.java,66,76
----------------------------------------
        StringBuilder sb = new StringBuilder(OPEN_END_TAG);
        sb.append(getTag(prefix, tag, null));
        sb.append(CLOSE_TAG);
        return sb;
    }

    protected StringBuilder getTag(String prefix, String tag, Set<WidgetAttribute> widgetAttributes) {
        StringBuilder sb = new StringBuilder();
        if (prefix != null) {
            sb.append(prefix);
        }
----------------------------------------
                        break;
                    }
                    createTerm(jcas, index, index + searchTerm.length(), categoryName, 1000, true);
                    i = index + 1;
                }
            }
        } else {
            try {
                Pattern pattern = Pattern.compile(search);
                Matcher matcher = pattern.matcher(text);
                while (matcher.find()) {
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,1355559.java,108,121
selected,1827694.java,114,128
----------------------------------------
        super();
        this.elementData = new Object[initialCapacity];
    }

    /**
	 * Constructs a list containing the elements of the specified
	 * collection, in the order they are returned by the collection's
	 * iterator.  The <tt>ArrayList</tt> instance has an initial capacity of
	 * 110% the size of the specified collection.
	 */
    public CoArrayList(Collection c) {
        this((c.size() * 110) / 100);
        Iterator i = c.iterator();
        while (i.hasNext()) elementData[size++] = i.next();
----------------------------------------
            sb.append(array[j]);
            if (j != array.length - 1) sb.append(", ");
        }
        return sb.append(']').toString();
    }

    /**
	 * Returns the hex String representation of a byte array without prefix 0x.
	 * The String is formed by making value[0] the leftmost two digits and
	 * value[value.length-1] the rightmost two digits.
	 *
	 * @param array the byte array
	 */
    public static final String toHexString(byte[] array) {
        StringBuffer sb = new StringBuffer(array.length * 2 + 8);
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,1714423.java,59,69
selected,2216374.java,264,274
----------------------------------------
            XmlRpcStruct struct = (XmlRpcStruct) client.invoke("NoOperation", new String[] { token });
            if (struct.getString("status").equals("200 OK") == false) {
                return false;
            } else {
                return true;
            }
        }
    }

    static boolean logOut() throws XmlRpcException, XmlRpcFault, TimeoutException, InterruptedException {
        if (isLoggedIn()) {
----------------------------------------
            throw new PolicyStoreException(exp.toString(), exp);
        }
    }

    /**
    * Get the KeyStore associated with this PolicyStore
    */
    public synchronized KeyStore getKeyStore() throws KeyStoreException {
        if (storeDir.exists() == false) throw new RuntimeException("Can't access security storage dir: " + storeDir.toString());
        File keyStoreFile = new File(storeDir, ".keystore");
        if (keyStoreFile.exists() == false) {
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
default,133397.java,168,179
selected,573207.java,47,57
----------------------------------------
        } else bSmooth = false;
        return;
    }

    private Vector buildPrimeBase(int tx, int n) {
        Vector vec = new Vector();
        int count = 3;
        vec.addElement(new Integer(-1));
        if (n % 2 == 1) {
            vec.addElement(new Integer(2));
            tx--;
        }
----------------------------------------
        return call().getFactors();
    }

    private List<Long> internalFactor() {
        if (number == 0) {
            return Collections.singletonList(0l);
        }
        x = number;
        List<Long> factors1 = new ArrayList<Long>();
        if (x < 0) {
            factors1.add(-1l);
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,2211149.java,275,286
selected,2183520.java,40,51
----------------------------------------
            if (this == obj) return true;
            if (!(obj instanceof Host)) return false;
            Host p = (Host) obj;
            return address.equals(p.address) && port == p.port;
        }

        /**
   * @see java.lang.Object#hashCode()
   */
        public int hashCode() {
            return address.hashCode() ^ port;
        }
----------------------------------------
        if (asymmetricCipherBuilder == null) {
            asymmetricCipherBuilder = new AsymmetricCipherBuilder(node);
        }
        return asymmetricCipherBuilder.getWriterCipher();
    }

    public static synchronized Cipher createSymmetricReaderCipher(Node node) throws Exception {
        if (symmetricCipherBuilder == null) {
            symmetricCipherBuilder = new SymmetricCipherBuilder(node);
        }
        return symmetricCipherBuilder.getReaderCipher(null);
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,2288212.java,203,218
selected,331236.java,35,52
----------------------------------------
        File packageFile = new File(EclipseUtil.getResourceLocation() + "/" + packageName);
        if (packageFile.exists()) {
            return findFiles(packageFile, packageName, EXTENSION_HBM);
        } else {
            return null;
        }
    }

    /**
	 * Search for JSP Files
	 * @param shell
	 * @param title
	 * @return
	 */
    public static String findJSPFile(Shell shell, String title) {
        FileDialog dialog = new FileDialog(shell, SWT.OPEN);
----------------------------------------
        return readFile(file);
    }

    /**
	 * Read a file into byte array without encoding specified
	 *
	 * @param file
	 * @return
	 * @throws Exception
	 */
    public static byte[] readFile(File file) throws Exception {
        byte[] data = null;
        FileInputStream fis = null;
        ByteArrayOutputStream bos = new ByteArrayOutputStream(1024);
        try {
            logger.debug("readFile: " + file.getAbsolutePath());
            fis = new FileInputStream(file);
            copyFile(fis, bos);
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,891301.java,84,94
selected,626170.java,163,174
----------------------------------------
    public static byte[] decrypt(SecretKey key, InputStream in) throws AesDecryptionException, Base64DecodingException {
        String base64Encoded = null;
        ByteArrayOutputStream out = new ByteArrayOutputStream();
        try {
            decrypt(key, in, out);
            base64Encoded = out.toString();
        } finally {
            TomIOUtils.close(out);
        }
        return Base64.decode(base64Encoded.getBytes());
    }
----------------------------------------
    public static String generateMasterKey() throws NoSuchAlgorithmException {
        try {
            KeyGenerator keygen;
            keygen = KeyGenerator.getInstance("AES");
            keygen.init(256);
            SecretKey genDesKey = keygen.generateKey();
            return toHexString(genDesKey.getEncoded());
        } catch (NoSuchAlgorithmException e) {
            Log.e(TAG, "generateMasterKey(): " + e.toString());
            throw e;
        }
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
default,131022.java,746,763
default,110373.java,62,73
----------------------------------------
                if (ed.argMatchesEncoding(arg, test)) yes.add(ed); else no.add(ed);
            }
            return new EmitterSet[] { yes, no };
        }

        /**
	 *  Find the best operand type or size and operand number to
	 * partition this EmitterSet.  This method searches across all
	 * possible ways of splitting this set--all possible operand
	 * types and sizes, and all possible operands--to determine
	 * which one splits the set most evenly.  
	 *
	 * @return a SplitRecord representing the most-even split
	 */
        SplitRecord split() {
            int splitArg = -1;
            int splitTest = -1;
            int splitDiff = 1000;
----------------------------------------
        runningPrograms--;
        if (runningPrograms <= 0) {
            System.exit(0);
        }
    }

    public static void main(String[] args) throws InterruptedException {
        Lstart l = new Lstart();
        for (int i = 0; i < args.length; i++) {
            if (args[i].equalsIgnoreCase("-wait")) {
                Thread.sleep(3000);
            } else if (args[i].startsWith("-")) {
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,2081236.java,185,204
selected,1433567.java,453,476
----------------------------------------
        return -1;
    }

    /**
   * Returns the index of the last occurrence of the specified object in
   * this list.
   *
   * @param   elem   the desired component.
   * @return  the index of the last occurrence of the specified object in
   *          this list; returns -1 if the object is not found.
   */
    public int lastIndexOf(Object elem) {
        Object[] elementData = array();
        int len = elementData.length;
        return lastIndexOf(elem, elementData, len);
    }

    protected static int lastIndexOf(Object elem, Object[] elementData, int len) {
        if (elem == null) {
            for (int i = len - 1; i >= 0; i--) if (elementData[i] == null) return i;
----------------------------------------
        return result;
    }

    /**
   * Sorts a Vector of items using the toString() values of the elements in
   * ascending order.
   *
   * @param v The Vector to be sorted
   */
    public static void sort(Vector v) {
        sort(v, true, false);
    }

    /**
   * Sorts a Vector of items using the toString() values of the elements.
   *
   * @param v The Vector to be sorted
   * @param ascending true for ascending order, false for descending order
   * @param caseSensitive true for case sensitive, false to ignore case
   */
    public static void sort(Vector v, boolean ascending, boolean caseSensitive) {
        int mul = ascending ? 1 : -1;
        for (int i = 0; i < v.size() - 1; i++) {
            for (int j = i + 1; j < v.size(); j++) if (mul * compare(v.elementAt(i), v.elementAt(j), caseSensitive) > 0) swap(v, i, j);
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
default,20588.java,47,75
sample,CopyDirectoryTree.java,13,23
----------------------------------------
        soundThread.setName("Sound: " + soundFile);
        soundThread.start();
    }

    /****************************************
	NAME: playSound
	DESCRIPTION: Play a sound file
	INPUTS:
			String soundFile - the name of the sound/audio file
	ALGORITHM:
		TRY
			Create Clip object for playing audio
			GET audio input stream from sound file
			OPEN the sound file
		CATCH exception
			PRINT error
		END TRY-CATCH
		RETURN the Clip object
	HISTORY: 
	RESOURCE:
	// http://stackoverflow.com/questions/26305/how-can-i-play-sound-in-java
	***************************************/
    public static Clip loadSound(final String soundFile) {
        Clip clip = null;
        try {
            String url = Config.SOUNDS_DIR + soundFile;
            AudioInputStream inputStream = AudioSystem.getAudioInputStream(new File(url));
            clip = AudioSystem.getClip();
            clip.open(inputStream);
----------------------------------------
import java.nio.file.attribute.*;


public class CopyDirectoryTree {
	// copy AND isDirectory AND list
	public static void copyDirectory1(Path src, Path dest) throws IOException {
		Files.copy(src, dest);
		if(Files.isDirectory(src)) {
			for(String filename : src.toFile().list()) {
				Path srcFile = src.resolve(filename);
				Path destFile = dest.resolve(filename);
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,2256365.java,490,500
selected,2317033.java,1698,1716
----------------------------------------
        } catch (DuplicateMemberException e) {
        }
        thisClass = null;
        return cf;
    }

    private static void setInterfaces(ClassFile cf, Class[] interfaces) {
        String setterIntf = ProxyObject.class.getName();
        String[] list;
        if (interfaces == null || interfaces.length == 0) list = new String[] { setterIntf }; else {
            list = new String[interfaces.length + 1];
----------------------------------------
                bnh = loadExternalPyNodehandler(name, e);
                if (bnh == null) {
                    bnh = new UnknownNodehandler(e);
                }
            }
        }
        return bnh;
    }

    /**
	 * 
	 * 
	 * @param parent
	 * @param e
	 */
    public void importXML(BaseNodehandler parent, Element e) {
        java.util.List nl = e.getChildren("nodehandler");
        Iterator iter = nl.iterator();
        while (iter.hasNext()) {
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,2687174.java,293,303
selected,2005845.java,261,272
----------------------------------------
    private void save(String ballot, String logdir, String logfile) {
        try {
            PrintWriter writer = new PrintWriter(new FileWriter(SettingsFile));
            writer.write(logdir + "\n");
            writer.write(ballot + "\n");
            writer.write(logfile + "\n");
            writer.close();
        } catch (Exception e) {
            return;
        }
    }
----------------------------------------
        } finally {
            try {
                os.close();
            } catch (Exception e) {
            }
        }
    }

    public void load() {
        Serializer s = controller.getSerializer();
        if (standalone) s.load();
        view = s.getInt(s.getProperty(ABVIEW, VIEW), MENU + TOOL + STATUS + SEARCH + FOLDER);
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,1718226.java,15,26
selected,421582.java,5,32
----------------------------------------
    static Logger log = JPF.getLogger("gov.nasa.jpf.jvm.choice");

    String[] values;

    int count;

    public DoubleChoiceFromSet(Config conf, String id) {
        super(id);
        values = conf.getStringArray(id + ".values");
        if (values == null) {
            throw new JPFException("value set for <" + id + "> choice did not load");
        }
----------------------------------------
import gov.nasa.jpf.jvm.IntChoiceGenerator;

/**
 * @author jpenix
 *
 * choose from a set of values provided in configuration as
 * xxx.class = IntChoiceFromSet
 * xxx.values = {1, 2, 3, 400}
 * where "xxx" is the choice id.
 * 
 * choices can then made using: getInt("xxx");
 */
public class IntChoiceFromSet extends IntChoiceGenerator {

    String[] values;

    int count = -1;

    /**
	 * @param conf JPF configuration object
	 * @param id name used in choice config
	 */
    public IntChoiceFromSet(Config conf, String id) {
        super(id);
        values = conf.getStringArray(id + ".values");
        if (values == null) {
            throw new JPFException("value set for <" + id + "> choice did not load");
        }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,1969489.java,21,50
selected,721522.java,17,43
----------------------------------------
public class Mailer {

    public static final Logger LOGGER = Logger.getLogger(Mailer.class);

    private final Properties mailProperties;

    /**
	 * Basic constructor. The configuration is read from a file in the classpath.
	 * The mandatory properties in the file are:
	 * <ul>
	 * 	<li><code>mailer.mail.from</code>: sender address</li>
	 * 	<li><code>mailer.mail.to</code>: comma-separated list of recipient
	 * 		addresses.</li>
	 * </ul>
	 * And additionally:
	 * <ul>
	 * 	<li><code>mail.smtp.host</code>: can be set to override its
	 * 		default value.</li>
	 * 	<li>Any other custom properties whose value can be retrieved using
	 * 		{@link #getCustomProperty(String)} method. These are useful to
	 * 		define formats in the properties file to be used within the
	 * 		message body.</li>
	 * </ul>
	 * @param configFile name of the properties configuration file
	 * 		(excluding the <code>.properties</code> extension).
	 * @throws IOException
	 */
    public Mailer(String configFile) throws IOException {
        mailProperties = new Properties();
        mailProperties.load(Mailer.class.getClassLoader().getResourceAsStream(configFile + ".properties"));
----------------------------------------
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

/**
 * Utilities for e-mail related functions.
 *
 * @author    Simon Brown
 */
public class MailUtils {

    /** the log used by this class */
    private static Log log = LogFactory.getLog(MailUtils.class);

    /** thread pool used to send e-mail */
    private static ExecutorService pool = Executors.newFixedThreadPool(1);

    /**
   * Sends an e-mail.
   *
   * @param blog    the notifying blog
   * @param to     the e-mail addresses of the recipients in the TO field
   * @param subject       the subject of the e-mail
   * @param message       the body of the e-mail
   */
    public static void sendMail(Session session, Blog blog, String to, String subject, String message) {
        Collection set = new HashSet();
        set.add(to);
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,66662.java,11,23
selected,2741810.java,14,30
----------------------------------------
import org.eclipse.swt.SWT;
import org.eclipse.swt.graphics.Image;
import org.eclipse.swt.layout.RowLayout;
import org.eclipse.swt.widgets.Composite;
import org.eclipse.swt.widgets.Control;

/**
 * A wrapper for the RadioButton class
 * <p>
 * Copyright (c) Formaria Ltd., <br>
 * License: see license.txt $Revision: 2.10 $
 */
public class RadioButton extends Button implements StateHolder, ValueHolder, RadioHolder, RadioButtonGroup {
----------------------------------------
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.xml.sax.SAXException;
import com.bpd.pojos.VwSsMaEmpleadosActivos;
import pk_util.UtilPojosModel;

/**
 * @author u19730
 */
public class XMLReaderByName1 {

    public static void main(String argv[]) throws ParserConfigurationException, MalformedURLException, IOException, SAXException {
        try {
            setEmployees();
            setManagers();
        } catch (Exception e) {
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,2447944.java,38,51
selected,19539.java,699,712
----------------------------------------
                    for (int i = 0; i < len; i++) {
                        buffer.append('*');
                    }
                }
                buffer.append("\n");
            }
        }
        return buffer.toString();
    }

    public ConfigElement find(String name) {
        Iterator iter = list.iterator();
        while (iter.hasNext() == true) {
            ConfigElement element = (ConfigElement) iter.next();
----------------------------------------
            } catch (Exception ex) {
                ex.printStackTrace();
            }
        }
        MyNotes.properties.put("encrypted", "y", Property.PT_STRING);
    }

    /**
     * @brief Deletes all data from all storages
     */
    public void deleteAllData() {
        String[] names = RecordStore.listRecordStores();
        for (int i = 0; i < names.length; i++) {
            if (names[i].equals(MyNotes.SETTINGS_RSNAME)) {
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,479346.java,200,211
selected,1880821.java,463,492
----------------------------------------
            bytes = b;
            parts = b.length / partsize + 1;
        }

        protected byte[] getBytes() {
            return bytes;
        }

        protected void write(byte[] b, int offset) {
            for (int i = 0; i < b.length; i++) {
                bytes[offset + i] = b[i];
            }
----------------------------------------
            } else {
                return 0L;
            }
        }
        if (packet != null) {
            controller_.send(packet.getEncoded());
        }
        return ltmp;
    }

    /**
     * Returns the unique host identifier. This host identifier
     * is computed by means of hashing the host address string
     * and the election topic with the SHA1 digest. It is used
     * by the <i>Bully Algorithm</i> in order to determine who
     * the winner of an election is. Hashing boththe name and
     * the topic assures that coordinatior roles for different
     * topics are spread among the hosts. The hash results are
     * cached in order to improve performance.
     *
     * @param name The distinguished name of the host's key.
     * @param topic The topic on which is voted.
     * @return The host identifier.
     */
    public byte[] uniqueID(String name, String topic) {
        String key;
        byte[] id;
        synchronized (cache_) {
            key = name + "|" + topic;
            id = (byte[]) cache_.get(key);
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,440776.java,206,231
selected,440776.java,26,60
----------------------------------------
    public static final String MAX_CONNECTIONS = "connections.maxclients";

    /**
   * If this setting is set to "true" then the integrity of the server authentication
   * certificates and encryption keys will be checked.
   * <p>
   * Default: false
   * </p>
   */
    public static final String VERIFY_KEYSTORE = "connections.verifykeystore";

    /**
   * This setting contains the password used to access the server's identification certificate
   * and encryption key for secure communications.
   * <p>
   * Default: None (prompt for the password when required)
   * </p>
   */
    public static final String CERTIFICATE_PASSWORD = "connections.certificatepassword";

    private static final ServerConfig THE_INSTANCE;

    static {
        String os = ServerUtils.getOS();
        THE_INSTANCE = new ServerConfig();
        THE_INSTANCE.provideDefault(RUN_DISCREET, false);
----------------------------------------
public final class ServerConfig extends Config {

    private static final Logger LOG = Logger.getLogger(ServerConfig.class.getName());

    /**
   * If this setting is true then the server will start as soon as the program loads and the
   * main window won't be displayed. The program will still be accesible from the system tray.
   */
    public static final String RUN_DISCREET = "general.run_discreet";

    /**
   * If this setting is true then the code executes extra state consistency checks during
   * execution. If it is false then these checks are disabled, giving some extra performance.
   */
    public static final String EXTRA_ASSERTIONS = "advanced.extra_assertions";

    /**
   * If debugging is enabled then a stack trace will be displayed if an unhandled exception
   * occurs. If debugging is disabled then a standard message will be displayed.
   * <p>
   * Default: false (debugging off)
   * </p>
   */
    public static final String DEBUG = "advanced.debug";

    /**
   * If this setting is true then <b>Tutorial D</b> variables will be initialized to some
   * constant value, which is documented in their classes if no explicit initialization is
   * provided. These defaults are subject to change in future program versions if desired. If
   * this is false then initial values will be chosen randomly. Defaults to false but will
   * usually be overriden in the configuration file to be true in the release version of the
   * program. However, it should be left as false during program testing to detect bugs caused
   * by assuming the presence of the currently defined default values.
   */
    public static final String DETERMINISTIC_INITIALIZERS = "advanced.deterministic_initializers";
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,626170.java,257,267
selected,1160492.java,504,515
----------------------------------------
            Log.e(TAG, "setPassword(): " + e.toString());
        }
        sessionKey = createNewSessionKey();
    }

    private void setSalt(String saltIn) throws CryptoHelperException {
        if (saltIn == null) {
            String msg = "Salt must not be null.";
            throw new CryptoHelperException(msg);
        }
        byte[] byteSaltIn = hexStringToBytes(saltIn);
----------------------------------------
                        protocol_substate = 1;
                    }
                    while (true) {
                        read(read_buffer);
                        if (read_buffer.hasRemaining()) {
                            break;
                        }
                        if (protocol_substate == 1) {
                            int limit = read_buffer.limit();
                            read_buffer.position(limit - 20);
                            boolean match = true;
                            for (int i = 0; i < 20; i++) {
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
default,82794.java,79,90
default,12879.java,64,78
----------------------------------------
            return result;
        }
        boolean match = false;
        StringTokenizer st = new StringTokenizer(whitelist, "\n\r");
        String token;
        while (st.hasMoreTokens()) {
            token = st.nextToken();
            if (token.compareTo(command) == 0) {
                match = true;
                break;
            }
        }
----------------------------------------
                } else {
                    if (VERBOSE >= 3) System.out.println("  BioSapOut.xml exists...skipping");
                }
            }
        }
        return null;
    }

    private static String execCmd(String cmd) {
        String msg = new String("");
        boolean cmdOK = true;
        Process proc = null;
        Runtime runtime = Runtime.getRuntime();
        try {
            proc = runtime.exec(cmd);
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,2537661.java,1791,1806
selected,2537661.java,1738,1751
----------------------------------------
                case STEP_WELCOME:
                    leave(step);
                    enter(STEP_ANALYSIS);
                    break;
                case STEP_ANALYSIS:
                    leave(step);
                    if (uninstallMode) {
                        enter(STEP_UNINSTALL);
                    } else {
                        if (archive != null) {
                            if (dreamPath != null) {
                                enter(STEP_FILE_COPY);
                            } else {
                                enter(STEP_FILE_SELECT);
                            }
                        } else {
----------------------------------------
                    break;
                case STEP_COMPONENTS_PROGRESS:
                    leave(step);
                    if (os.indexOf("Windows") >= 0) {
                        enter(STEP_WINDOWS_COMPONENTS);
                    } else {
                        enter(STEP_LINUX_COMPONENTS);
                    }
                    break;
                case STEP_SHOW_INFO:
                    leave(step);
                    if (uninstallMode) {
                        enter(STEP_ANALYSIS);
                    } else {
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
default,7746.java,12,31
default,7746.java,16,31
----------------------------------------
public class Api {

    private int id;

    private InterfaceServeur serveur = null;

    private static String url;

    private String user;

    private GUI_Client parent;

    public Api(String ur, GUI_Client par) {
        url = ur;
        parent = par;
    }

    public boolean connect(String us, String mdp) {
        try {
            if (serveur == null) serveur = (InterfaceServeur) Naming.lookup(url);
----------------------------------------
    private InterfaceServeur serveur = null;

    private static String url;

    private String user;

    private GUI_Client parent;

    public Api(String ur, GUI_Client par) {
        url = ur;
        parent = par;
    }

    public boolean connect(String us, String mdp) {
        try {
            if (serveur == null) serveur = (InterfaceServeur) Naming.lookup(url);
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,2162038.java,800,813
selected,2569693.java,208,221
----------------------------------------
        this.dispose();
        System.gc();
    }

    public void windowDeactivated(WindowEvent e) {
        log.debug("win is now deactivated");
        xp.freeze();
    }

    public void windowDeiconified(WindowEvent e) {
    }

    public void windowIconified(WindowEvent e) {
    }
----------------------------------------
        getDropTarget().addDropListener(new DropTargetAdapter() {

            public void dragEnter(DropTargetEvent event) {
                flush();
            }

            public void dragLeave(DropTargetEvent event) {
                flush();
            }

            public void dragOver(DropTargetEvent event) {
                flush();
            }
        });
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,1643787.java,48,63
selected,659730.java,493,533
----------------------------------------
                thread.join();
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public void setParticipantInfo(ParticipantInfo pi) {
    }

    public void subscribe(MessageReader reader) {
        vectSubscribers.addElement(reader);
    }

    public void sendMessage(WebmeetMessage message) {
    }
----------------------------------------
        thr.setPriority(Thread.MIN_PRIORITY);
        thr.start();
    }

    /**
     * Called after the Session has added this listener to the Session
     * listener list.
     *
     * @param  session  the Session.
     */
    public void opened(Session session) {
    }

    /**
     * Called when the debuggee is about to be resumed.
     *
     * @param  sevt  session event.
     */
    public void resuming(SessionEvent sevt) {
    }

    /**
     * Called when the debuggee has been suspended.
     *
     * @param  sevt  session event.
     */
    public void suspended(SessionEvent sevt) {
    }
}

/**
 * <p>Class ConsoleOutputStream is responsible for printing the Log
 * output to the console stream. It has an additonal operation for
 * printing a command input prompt.</p>
 *
 * @author  Nathan Fiedler
 */
class ConsoleOutputStream extends OutputStream {

    /** The output stream to which we print. */
    private OutputStream sink;
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
default,40624.java,608,638
default,113035.java,1,12
----------------------------------------
            if (size != 0) s.append(" (" + encoding[size] + ")");
            return s.toString();
        }
    }

    /**
     *  An EmitterSet represents a set of emit methods from the
     * VM_Assembler for the same IA32 assembler opcode.  These sets
     * are used when generating the do<opcode> method for a given IA32
     * opcde: first an EmitterSet of all the VM_Assembler emit methods
     * for that opcode is built, and then the do method is recursively
     * generated by emitting operand type and size tests that
     * partition the set of emitters into two smaller sets.  This
     * continues until the set is a singleton
     */
    static class EmitterSet {

        /**
	 *  The VM_Assembler emit methods that this set represents.
	 * This is a set of EmitterDescriptor objects.
	 */
        private final Set emitters = new HashSet();

        /**
	 * Print this EmitterSet readably.
	 * @return a string describing this EmitterSet
	 */
        public String toString() {
            StringBuffer s = new StringBuffer();
            s.append("Emitter Set of:\n");
            Iterator i = emitters.iterator();
----------------------------------------
import mucode.*;

public class Injected {

    private static final String CLASSNAME = "Toolkit";

    public static void main(String[] args) {
        MuServer s = new MuServer();
        new mucode.util.Launcher(s).launch(args, 1);
        ClassSpace shared = s.getSharedClassSpace();
        try {
            System.out.println("I need " + CLASSNAME + ".class to proceed with execution.");
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,479346.java,159,169
selected,552291.java,108,123
----------------------------------------
                return;
            }
            Message retmsg = null;
            final ByteArrayInputStream bin = new ByteArrayInputStream(bmsg);
            try {
                final ObjectInputStream oin = new ObjectInputStream(bin);
                retmsg = (Message) oin.readObject();
                unwrapArr.add(retmsg);
            } catch (Exception e) {
                LOG.fatal("Could not create Message from ByteArrayInputStream. Cause:" + e.toString());
            }
----------------------------------------
        output.close();
        alltargetdirs.clear();
        return zipnonamaehakorenisubeshi;
    }

    /**
	 * ãƒ•ã‚¡ã‚¤ãƒ«ã?¨ã??ã?®éšŽå±¤ã‚’æŒ‡å®šã?—ã€?ZipOutputStreamã?«ãƒ•ã‚¡ã‚¤ãƒ«ã‚’è¿½åŠ ã?™ã‚‹ã€‚
	 * @param file ãƒ•ã‚¡ã‚¤ãƒ«
	 * @param output ZipOutputStream
	 * @param depth ãƒ•ã‚¡ã‚¤ãƒ«ã?®éšŽå±¤
	 * @throws IOException ãƒ•ã‚¡ã‚¤ãƒ«å…¥å‡ºåŠ›ã‚¨ãƒ©ãƒ¼
	 */
    private void writeEntry(File file, ZipOutputStream output, File oya) throws IOException {
        BufferedInputStream input = new BufferedInputStream(new FileInputStream(file));
        String fn = extractRelativeZipPath(file.getAbsolutePath(), oya.getAbsolutePath());
        ZipEntry entry = new ZipEntry(this.convertZipEntrySeparator(fn));
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,2705176.java,182,203
selected,2002546.java,187,209
----------------------------------------
            view.initialize();
            view.update();
        }
    }

    /**
   * apply user interface changes
   */
    public void apply() {
        if (view != null) {
            view.read();
        }
        update();
    }

    /**
   * apply user interface changes. Yes, exactly the same as apply() (I need it somewhere else :-)
   */
    public void applyAll() {
        view.read();
        update();
    }
----------------------------------------
            return null;
        }
    }

    /** Finds a list of services in the folder and adds to wsInfoList. */
    public void checkServices() {
        findServicesInDirectory();
        loadOtherDirectories();
        update();
    }

    /**
     * First initializes the WSInfoList, then calls checkModule to load all the modules and calls
     * update() to update the Deployment engine and engine registry.
     */
    public void init() {
        wsInfoList.init();
        checkModules();
        deploymentEngine.doDeploy();
    }

    private void loadOtherDirectories() {
        for (Map.Entry<String, Map<String, Deployer>> entry : deploymentEngine.getDeployers().entrySet()) {
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
default,40624.java,999,1017
default,28532.java,403,413
----------------------------------------
        while (e.hasNext()) {
            String opcode = (String) e.next();
            if (!emittedOpcodes.contains(opcode)) errorOpcodes.add(opcode);
        }
        return errorOpcodes;
    }

    /**
     * Given an IA32 opcode, return the set of opt compiler IA32_
     * operators that translate to it.  There is, by and large, a
     * one-to-one mapping in each each IA332_ opt operator represents
     * an IA32 opcde, so this method might seem useless.  However,
     * there are some special cases, notably for operand size.  In
     * this case, an opt operator of the form ADD$B would mean use the
     * ADD IA32 opcode with a byte operand size.  
     */
    private static Set getMatchingOperators(String lowLevelOpcode) {
        Iterator e = OPT_OperatorFormatTables.getOpcodes();
        Set matchingOperators = new HashSet();
----------------------------------------
        Assert.assertFalse(reader.readRecord());
        reader.close();
    }

    @Test
    public void test21() throws Exception {
        String data = "'bob said, ''Hey!''',2, 3 ";
        CsvReader reader = CsvReader.parse(data);
        reader.setTextQualifier('\'');
        Assert.assertTrue(reader.readRecord());
        Assert.assertEquals("bob said, 'Hey!'", reader.get(0));
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,1159676.java,23,41
selected,896704.java,39,50
----------------------------------------
public class JCEEncryptor implements Securable {

    private Cipher m_cipher;

    private final String m_algorithm = "DES";

    private final String m_padding = "DES/ECB/PKCS5Padding";

    public JCEEncryptor() throws Exception {
        m_cipher = Cipher.getInstance(m_padding);
    }

    /**
     * Encrypts a string. Will throw a validation exception.
     */
    public synchronized String encryptPassword(String password) {
        try {
            m_cipher.init(Cipher.ENCRYPT_MODE, Synergizer.getMultitasker(m_algorithm));
            ByteArrayOutputStream baos = new ByteArrayOutputStream();
----------------------------------------
    private static final String DIGEST_ALGORITHM = "MD5";

    private Cipher cipher = null;

    private MessageDigest md = null;

    private DbManager() {
        try {
            cipher = Cipher.getInstance(CIPHER_TRANSFORMATION);
            md = MessageDigest.getInstance(DIGEST_ALGORITHM);
        } catch (Exception e) {
            System.out.println("DbManager.DbManager(): " + e.getMessage());
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,2360290.java,145,170
selected,271097.java,122,134
----------------------------------------
            if (aOne.equals(aTwo)) same = true;
        } else if (aTwo == null) {
            same = true;
        }
        return same;
    }

    /**
     * Joins two iterators together into a third.
     * @param aFirstIterator can be null
     * @param aSecondIterator can be null
     */
    public static Iterator join(Iterator aFirstIterator, Iterator aSecondIterator) {
        return SdlSequenceIterator.join(aFirstIterator, aSecondIterator);
    }

    /**
     * Creates an iterator that includes the data from the first as well as the
     * object passed in.
     * @param aIter can be null
     * @param aObject can be null
     */
    public static Iterator join(Iterator aIter, Object aObject) {
        if (aObject == null) {
            return aIter;
        }
----------------------------------------
        for (int i = 0; i < tagWords; i++) context[i] = 0;
    }

    public boolean selfTest() {
        if (valid == null) {
            valid = Boolean.TRUE;
        }
        return valid.booleanValue();
    }

    public Object clone() throws CloneNotSupportedException {
        TMMH16 result = (TMMH16) super.clone();
        if (this.keystream != null) result.keystream = (IRandom) this.keystream.clone();
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,2518506.java,209,220
selected,502121.java,243,260
----------------------------------------
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public static void registerShiftEnter(final Occupant occ) {
        try {
            room.kickParticipant(occ.getNick(), "");
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
----------------------------------------
        } catch (IOException ioe) {
            ioe.printStackTrace();
        }
    }

    /**
     * ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ä¼ï¿½ 
     * @param oldFileName --Ô­ï¿½Ä¼ï¿½ï¿½ï¿½
     * @param newFileName --ï¿½ï¿½ï¿½Ä¼ï¿½ï¿½ï¿½
     */
    public static void renameFile(String oldFileName, String newFileName) {
        try {
            connectServer();
            ftpClient.rename(oldFileName, newFileName);
        } catch (IOException ioe) {
            ioe.printStackTrace();
        }
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,1947822.java,46,56
selected,959509.java,93,107
----------------------------------------
        outStream.write(keyBytes);
        outStream.close();
        System.out.println("Key encryption key stored in: " + keyEncryptKeyFile.toString());
    }

    private static SecretKey GenerateSymmetricKey() throws Exception {
        String jceAlgorithmName = "AES";
        KeyGenerator keyGenerator = KeyGenerator.getInstance(jceAlgorithmName);
        keyGenerator.init(128);
        return keyGenerator.generateKey();
    }
----------------------------------------
        fos.write(encryptedKeyBytes);
        fos.close();
        BASE64Encoder encoder = new BASE64Encoder();
        String myString = encoder.encode(encryptedKeyBytes);
        if (DEBUG) {
            System.out.println(myString);
        }
    }

    /**
   *	Loads a key from the filesystem
   */
    public synchronized Key loadKey(char[] password) throws Exception {
        String keyfile = KEY_FILENAME;
        if (KEY_PATH.trim().length() == 0) {
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,1261165.java,73,96
selected,1540543.java,76,92
----------------------------------------
        return result;
    }

    /**
     * Returns current value of a sequence
     *
     * @param none
     *
     * @exception SQLException
     *
     * @return int value of seq_flyvning_id
     */
    private int getCurrvalFlyvning() throws SQLException {
        int result;
        try {
            rs_currVal = pstmt_currVal.executeQuery();
            if (rs_currVal.next()) {
                result = rs_currVal.getInt(1);
            } else {
                throw new SQLException("seq_flyvning_id  not found");
            }
        } catch (SQLException sqle) {
            throw sqle;
        }
----------------------------------------
        } catch (SQLException e) {
            Log.write(e.getMessage());
            throw new DAOException("A SQLException has occured");
        } catch (NullPointerException npe) {
            Log.write(npe.getMessage());
            throw new DAOException("Connection null");
        }
        return id;
    }

    /**
	 * Sets the tag archived of the bill in param on true 
	 * @param o a project
	 * @return the number of rows updated
	 */
    public int delete(BusinessObject o) throws DAOException {
        int delete = 0;
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,1788183.java,645,658
selected,1429821.java,1334,1347
----------------------------------------
            pleveltwoNode1 = new ANegationLevelTwo(tnegationNode2, pleveltwoNode3);
        }
        nodeList.add(pleveltwoNode1);
        return nodeList;
    }

    @SuppressWarnings("unchecked")
    ArrayList new15() {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PLevelOne pleveloneNode1;
        {
            PPrimary pprimaryNode2;
            pprimaryNode2 = (PPrimary) nodeArrayList1.get(0);
----------------------------------------
    ArrayList new37() {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        TypedLinkedList listNode2 = new TypedLinkedList();
        {
            PContext pcontextNode1;
            pcontextNode1 = (PContext) nodeArrayList1.get(0);
            if (pcontextNode1 != null) {
                listNode2.add(pcontextNode1);
            }
        }
        nodeList.add(listNode2);
        return nodeList;
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
sample,SendEMail.java,14,24
sample,ExecuteExternalProcessAndReadInput.java,8,18
----------------------------------------
public class SendMailTLS {
	public static void main(String[] args) {
 
		final String username = "username@gmail.com";
		final String password = "password";
 
		Properties props = new Properties();
		props.put("mail.smtp.auth", "true");
		props.put("mail.smtp.starttls.enable", "true");
		props.put("mail.smtp.host", "smtp.gmail.com");
		props.put("mail.smtp.port", "587");
----------------------------------------
public class ExecuteExternalProcessAndReadInput {
	// start AND ProcessBuilder AND (redirect)|(getInputStream|getOutputStream)
	public static void execute1() throws IOException, InterruptedException {
		//Create Process Builder with Command and Arguments
		ProcessBuilder pb = new ProcessBuilder("myCommand", "myArg1", "myArg2");
		
		//Setup Execution Environment
		Map<String, String> env = pb.environment();
		env.put("VAR1", "myValue");
		env.remove("OTHERVAR");
		env.put("VAR2", env.get("VAR1") + "suffix");
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
default,105158.java,460,476
default,80404.java,374,388
----------------------------------------
            System.out.println("Can't do exampleXMLFilter because " + "tfactory is not a SAXTransformerFactory");
        }
    }

    /**
     * Show how to transform a DOM tree into another DOM tree.
     * This uses the javax.xml.parsers to parse an XML file into a
     * DOM, and create an output DOM.
     */
    public static Node exampleDOMtoDOM(String sourceID, String xslID) throws TransformerException, TransformerConfigurationException, SAXException, IOException, ParserConfigurationException, MalformedURLException {
        TransformerFactory tfactory = TransformerFactory.newInstance();
        if (tfactory.getFeature(DOMSource.FEATURE)) {
            Templates templates;
            {
                System.setProperty("javax.xml.parsers.DocumentBuilderFactory", "com.icl.saxon.om.DocumentBuilderFactoryImpl");
                DocumentBuilderFactory dfactory = DocumentBuilderFactory.newInstance();
                System.err.println("Using DocumentBuilderFactory " + dfactory.getClass());
----------------------------------------
            throw new org.xml.sax.SAXNotSupportedException("DOM node processing not supported!");
        }
    }

    /**
   * This shows how to set a parameter for use by the templates. Use 
   * two transformers to show that different parameters may be set 
   * on different transformers.
   */
    public static void exampleParam(String sourceID, String xslID) throws TransformerException, TransformerConfigurationException {
        TransformerFactory tfactory = TransformerFactory.newInstance();
        Templates templates = tfactory.newTemplates(new StreamSource(xslID));
        Transformer transformer1 = templates.newTransformer();
        Transformer transformer2 = templates.newTransformer();
        transformer1.setParameter("a-param", "hello to you!");
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
default,21199.java,627,638
default,108638.java,232,251
----------------------------------------
                            save = true;
                        }
                    }
                }
            }
            if (save) {
                store.saveMatchList(null);
            }
            ScheduleItem[] schedules = store.getScheduleArray();
            save = false;
            for (int x = 0; x < schedules.length; x++) {
                ScheduleItem item = schedules[x];
----------------------------------------
            while ((str = in.readLine()) != null) {
                text += str + "\r\n";
            }
            in.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
        return text;
    }

    /**
	 * copy the given text file
	 * 
	 * @param src
	 * @param dest
	 */
    void copyFileAscii(String src, String dest) {
        try {
            File inputFile = new File(src);
            File outputFile = new File(dest);
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,2706639.java,34,55
selected,376524.java,71,88
----------------------------------------
        for (int i = 0; i < args.length; i++) result += ", \"" + StringUtil.removeCR(args[i]) + "\"";
        result += ");%>\n";
        return result;
    }

    /**
	 * Calls the print method of a value object.
	 * 
	 * @param symbol
	 *            Symbol of the value
	 * @return JSP code
	 */
    public static String callPrinter(String symbol) {
        return "<%=symbolTable.getSymbol(\"" + symbol + "\").get(rapidData, selection.getJobID()).print(printer)%>";
    }

    public static String prettyPrint(String input) {
        int indent = 0;
        String regex = "(\\s*\n\\s*)+|(\\<\\%\\@.*\\%\\>)|(\\<\\%\\=.*\\%\\>)|(\\%\\>)|(\\<\\%)|(\\<[^\\>]*\\>)";
        Pattern p = Pattern.compile(regex);
        Matcher m = p.matcher(input);
        int previous = 0;
----------------------------------------
        return false;
    }

    /**
	 * 
	 * @param strString
	 * @return
	 * 
	 * ein Space kann ein normaler space oder ein linebreak sein
	 * Darum sucht das regex nach allem was keine Zahl ist und ersetzt die Vorkomnisse mit ""
	 */
    public String removeSpace(String strString) {
        String strPattern1 = "[^0-9.,]";
        Pattern findPattern = Pattern.compile(strPattern1);
        Matcher matcher = findPattern.matcher(strString);
        String returnValue = matcher.replaceAll("");
        return returnValue;
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
default,60060.java,176,187
default,124571.java,61,73
----------------------------------------
            list.setEnabled(true);
        }
    }

    int[] pids = new int[256];

    private void refreshPidList() {
        int retry = 5;
        do {
            int nopids = sm.fetchProcessIDs(pids);
            if (nopids > 0) proclist.setList(nopids, pids);
            if (exe == null) return;
----------------------------------------
        return conn;
    }

    static String getContentCharset(String contentType) {
        int cInd = contentType.indexOf("charset=");
        if (cInd >= 0) {
            return contentType.substring(cInd + 8);
        }
        return "UTF-8";
    }

    static String readStream(InputStream is) throws IOException {
        byte[] buff = new byte[1024];
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,1811518.java,125,135
selected,1922613.java,48,59
----------------------------------------
            fileIO.seek(currentPosition);
        } catch (IOException e) {
            throw new ODBRuntimeException(NeoDatisError.GO_TO_POSITION.addParameter(position).addParameter(fileIO.length()), e);
        }
    }

    public void write(byte b) throws IOException {
        try {
            byte[] bytes = { b };
            write(bytes, 0, 1);
        } catch (IOException e) {
----------------------------------------
        } catch (InvalidKeySpecException e) {
            throw new InvalidKeyException("Invalid unlock password for the private key");
        } catch (NoSuchAlgorithmException e) {
            throw new Error(e);
        }
        return privateKey;
    }

    public static PublicKey getPublicKey() {
        File keyFile = new File(AppUtils.getContext().getFilesDir(), "public.key");
        try {
            FileInputStream fis = new FileInputStream(keyFile);
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,768110.java,160,181
selected,2701228.java,583,601
----------------------------------------
        if (actualSuidStr == null) actualSuidStr = Long.toHexString(actualSuid).toUpperCase();
        return actualSuidStr;
    }

    /**
     * Return the class in the local VM that this version is mapped to.
     * Null is returned if there is no corresponding local class.
     */
    public final Class forClass() {
        return ofClass;
    }

    /**
     * Return an array of the fields of this serializable class.
     * @return an array containing an element for each persistent
     * field of this class. Returns an array of length zero if
     * there are no fields.
     * @since JDK1.2
     */
    public ObjectStreamField[] getFields() {
        if (fields.length > 0) {
            ObjectStreamField[] dup = new ObjectStreamField[fields.length];
----------------------------------------
        } catch (Exception e) {
        }
        return str;
    }

    /**
     * Only upper the english char in given string
     * So it can do with the chinese and english combined string
     * Such as filter "ï¿½ï¿½Ò·ï¿½ï¿½ï¿½lkjkËµï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½lkjlË¹ï¿½Ù·ï¿½k" to "ï¿½ï¿½Ò·ï¿½ï¿½ï¿½LKJKËµï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½LKJLË¹ï¿½Ù·ï¿½K"
     *
     *@param source the input string that including english and chinese chars
     *@return the filtered string
     */
    public static String upperEnglish(String source) {
        if (source == null) return "";
        source = source.trim();
        byte[] chars = source.getBytes();
        StringBuffer sb = new StringBuffer(chars.length);
        byte[] chinese = new byte[2];
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,2184555.java,546,564
selected,2538895.java,170,182
----------------------------------------
            return signer.verify(bytes);
        } catch (Exception e) {
            new EncryptionException("Invalid signature", "Problem verifying signature: " + e.getMessage(), e);
            return false;
        }
    }

    /**
	* {@inheritDoc}
     *
     * @param expiration
     * @throws IntegrityException
     */
    public String seal(String data, long expiration) throws IntegrityException {
        if (data == null) {
            throw new IllegalArgumentException("Data to be sealed may not be null.");
        }
        try {
            String b64data = null;
----------------------------------------
                fsKeysIn = null;
            } else {
                try {
                    fsKeysIn = new FileInputStream(keyFile);
                } catch (FileNotFoundException fnfE) {
                    fsKeysIn = null;
                    throw new Exception("KeyStore file not found", fnfE);
                }
            }
            KeyStore ks = KeyStore.getInstance("JCEKS");
            try {
                ks.load(fsKeysIn, filePasswd.toCharArray());
            } catch (IOException ioE) {
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
default,100579.java,30,40
selected,2392368.java,364,380
----------------------------------------
            if (Math.abs(ew) == Math.abs(er.ew)) return 0; else return (Math.abs(ew) > Math.abs(er.ew)) ? -1 : 1;
        }
    }

    /**
	 * Returns the Autocovariance matrice of the double arrays with
	 * which it was called. */
    private static double[][] makeAutoCovarianceMatrice_(double[][] vec) {
        int dim = vec[0].length;
        double[][] out = new double[dim][dim];
        double _n = 1. / vec.length;
----------------------------------------
        String[] listOfTaxa = Convert.convertTaxonParentsToTableOrder(list);
        return threeColumnToNumerical(listOfTaxa);
    }

    /**
     * nidTable is K x 3 matrix in which first column is sorted in increasing
     * order, beginning
     * at 1
     *
     * @return "reverse" distance
     */
    public static int getHeightRecursive(int[][] nidTable, int individual, int height) {
        if (individual == 0) {
            return height;
        } else {
            int female = nidTable[individual - 1][1];
            int male = nidTable[individual - 1][2];
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,1690820.java,258,268
selected,1690820.java,260,270
----------------------------------------
        for (j = 0; j < this.nCols; j++) {
            minorIJ = this.minor(0, j);
            detIJ = minorIJ.det();
            determinant += sign * detIJ * this.cell[0][j];
            sign = -sign;
        }
        return determinant;
    }

    public Matrix cofactors() {
        if (this.nLines == 1) return this;
----------------------------------------
            detIJ = minorIJ.det();
            determinant += sign * detIJ * this.cell[0][j];
            sign = -sign;
        }
        return determinant;
    }

    public Matrix cofactors() {
        if (this.nLines == 1) return this;
        int i, j;
        double detIJ, sign = 1;
----------------------------------------
