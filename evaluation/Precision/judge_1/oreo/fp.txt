$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
default,81841.java,799,805
default,58393.java,675,688
----------------------------------------
    public static String[] cloneString(String strArray[]) {
        if (strArray == null) return (null);
        int lth = strArray.length;
        String sRtn[] = new String[lth];
        for (int i = 0; i < lth; i++) sRtn[i] = strArray[i];
        return (sRtn);
    }
----------------------------------------
    public void _setFileNameRoots(String[] rFileNameRoots) {
        if (null == rFileNameRoots) {
            return;
        }
        String[] roots = (String[]) rFileNameRoots.clone();
        int numRoots = roots.length;
        for (int rootI = 0; rootI < numRoots; rootI++) {
            if (null == roots[rootI]) {
                roots[rootI] = "";
            }
        }
        writer__iFileNameRoots = roots;
        writer__iNumFiles = numRoots;
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,341601.java,369,376
selected,341601.java,235,246
----------------------------------------
    @Override
    public List<Kontrata> listKontrataPaFature(Date fromDate, Date toDate) {
        try {
            return em.createQuery("Select distinct o from Kontrata o where  NOT EXISTS (Select f.kontrata from Fatura f where f.kontrata = o and f.paguar = :paguar and f.anulluar != :anulluar  and f.dataLeximAktual >= :fromDate and f.dataLeximAktual < :toDate)").setParameter("paguar", false).setParameter("anulluar", false).setParameter("fromDate", fromDate).setParameter("toDate", toDate).getResultList();
        } catch (Exception e) {
            throw new NestedException(e.getMessage(), e);
        }
    }
----------------------------------------
    @Override
    public List<Fatura> queryFatura(Kontrata kontrata, Boolean paguar) {
        try {
            if (paguar == null) {
                return em.createQuery("Select o from Fatura o where o.kontrata = :kontrata and o.anulluar = :anulluar order by o.dataLeximAktual DESC").setParameter("kontrata", kontrata).setParameter("anulluar", false).getResultList();
            } else {
                return em.createQuery("Select o from Fatura o where o.kontrata = :kontrata and o.paguar = :paguar and o.anulluar = :anulluar order by o.dataLeximAktual DESC").setParameter("kontrata", kontrata).setParameter("paguar", paguar.booleanValue()).setParameter("anulluar", false).getResultList();
            }
        } catch (Exception e) {
            throw new NestedException(e.getMessage(), e);
        }
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,1352740.java,123,130
default,53106.java,64,71
----------------------------------------
        public static String getHexString(byte[] bytes) {
            if (bytes == null) return null;
            StringBuilder hex = new StringBuilder(2 * bytes.length);
            for (byte b : bytes) {
                hex.append(HEX_CHARS[(b & 0xF0) >> 4]).append(HEX_CHARS[(b & 0x0F)]);
            }
            return hex.toString();
        }
----------------------------------------
    String sequenceUsingFor(int start, int stop) {
        StringBuilder builder = new StringBuilder();
        for (int i = start; i <= stop; i++) {
            if (i > start) builder.append(',');
            builder.append(i);
        }
        return builder.toString();
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,87099.java,100,113
default,86184.java,293,304
----------------------------------------
    public static boolean deleteDir(File dir, boolean deleteRootDir) {
        if (dir.isDirectory()) {
            File[] children = dir.listFiles();
            for (int i = 0; i < children.length; i++) {
                if (!deleteDir(children[i])) {
                    return false;
                }
            }
        }
        if (deleteRootDir) {
            return dir.delete();
        }
        return true;
    }
----------------------------------------
    private void send(ActiveAssociation active, File file) throws InterruptedException, IOException {
        if (!file.isDirectory()) {
            for (int i = 0; i < repeatSingle; ++i) {
                sendFile(active, file);
            }
            return;
        }
        File[] list = file.listFiles();
        for (int i = 0; i < list.length; ++i) {
            send(active, list[i]);
        }
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,387982.java,226,244
default,127778.java,23,38
----------------------------------------
    private static String convertStreamToString(InputStream is) {
        BufferedReader reader = new BufferedReader(new InputStreamReader(is));
        StringBuilder sb = new StringBuilder();
        String line = null;
        try {
            while ((line = reader.readLine()) != null) {
                sb.append(line + "\n");
            }
        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            try {
                is.close();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
        return sb.toString();
    }
----------------------------------------
    private static String getDocumentAt(String urlString) {
        StringBuffer html_text = new StringBuffer();
        try {
            URL url = new URL(urlString);
            URLConnection conn = url.openConnection();
            BufferedReader reader = new BufferedReader(new InputStreamReader(conn.getInputStream()));
            String line = null;
            while ((line = reader.readLine()) != null) html_text.append(line + "\n");
            reader.close();
        } catch (MalformedURLException e) {
            System.out.println("��Ч��URL: " + urlString);
        } catch (IOException e) {
            e.printStackTrace();
        }
        return html_text.toString();
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,1202455.java,91,98
selected,1710788.java,571,578
----------------------------------------
    public static double[][] scalarMultiply(double[][] mat, double scalar) {
        for (int r = 0; r < mat.length; r++) {
            for (int c = 0; c < mat[0].length; c++) {
                mat[r][c] *= scalar;
            }
        }
        return mat;
    }
----------------------------------------
        public static void fromMatrixByRow(double[][] in, double[] out) {
            int eleI = 0;
            for (int rowI = 0; rowI < 2; rowI++) {
                for (int colI = 0; colI < 2; colI++) {
                    out[eleI++] = in[rowI][colI];
                }
            }
        }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,100172.java,473,481
selected,2678801.java,253,259
----------------------------------------
    public double[] getColumnPackedCopy() {
        double[] vals = new double[m * n];
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                vals[i + j * m] = A[i][j];
            }
        }
        return vals;
    }
----------------------------------------
    private void clearMappedData() {
        for (int i = 0; i < mappedDatas.length; i++) {
            for (int j = 0; j < mappedDatas[i].length; j++) {
                mappedDatas[i][j] = null;
            }
        }
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,2130165.java,370,379
default,107906.java,290,295
----------------------------------------
    protected void writeDocumentNoClosing(Document document, OutputStream documentOutputStream, boolean omitXmlDeclaration) throws TransformerConfigurationException, TransformerFactoryConfigurationError, TransformerException, IOException {
        NoCloseOutputStream outputStream = new NoCloseOutputStream(documentOutputStream);
        Result result = new StreamResult(outputStream);
        Transformer xformer = TransformerFactory.newInstance().newTransformer();
        if (omitXmlDeclaration) {
            xformer.setOutputProperty(OutputKeys.OMIT_XML_DECLARATION, "yes");
        }
        Source source = new DOMSource(document);
        xformer.transform(source, result);
    }
----------------------------------------
    public static void exampleSimple2(String sourceID, String xslID) throws TransformerException, TransformerConfigurationException {
        TransformerFactory tfactory = TransformerFactory.newInstance();
        Transformer transformer = tfactory.newTransformer(new StreamSource(xslID));
        transformer.transform(new StreamSource(sourceID), new StreamResult(new File("exampleSimple2.out")));
        System.out.println("\nOutput written to exampleSimple2.out\n");
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,840915.java,718,730
selected,1429821.java,1253,1270
----------------------------------------
    @SuppressWarnings("unchecked")
    ArrayList new25() {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PBinaryPrim pbinaryprimNode1;
        {
            TIdent tidentNode2;
            tidentNode2 = (TIdent) nodeArrayList1.get(0);
            pbinaryprimNode1 = new ABinaryPrim(tidentNode2);
        }
        nodeList.add(pbinaryprimNode1);
        return nodeList;
    }
----------------------------------------
    ArrayList new32() {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PPhrase pphraseNode1;
        {
            TypedLinkedList listNode3 = new TypedLinkedList();
            {
                TypedLinkedList listNode2 = new TypedLinkedList();
                listNode2 = (TypedLinkedList) nodeArrayList1.get(0);
                if (listNode2 != null) {
                    listNode3.addAll(listNode2);
                }
            }
            pphraseNode1 = new APhrase(listNode3);
        }
        nodeList.add(pphraseNode1);
        return nodeList;
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,273144.java,504,513
default,51882.java,117,131
----------------------------------------
    public static void copy(String a, String b) throws IOException {
        File inputFile = new File(a);
        File outputFile = new File(b);
        FileReader in = new FileReader(inputFile);
        FileWriter out = new FileWriter(outputFile);
        int c;
        while ((c = in.read()) != -1) out.write(c);
        in.close();
        out.close();
    }
----------------------------------------
    File createJar(String name, String... entries) throws IOException {
        File jar = new File(name);
        OutputStream out = new FileOutputStream(jar);
        try {
            JarOutputStream jos = new JarOutputStream(out);
            for (String e : entries) {
                jos.putNextEntry(new ZipEntry(e));
                jos.write(e.getBytes());
            }
            jos.close();
        } finally {
            out.close();
        }
        return jar;
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,902418.java,52,56
default,9758.java,409,412
----------------------------------------
    private boolean equalsByteArray(byte[] aa, byte[] bb) {
        if (aa.length != bb.length) return false;
        for (int i = 0; i < aa.length; i++) if (aa[i] != bb[i]) return false;
        return true;
    }
----------------------------------------
    public static int method384(char ac[], int i) {
        for (int j = i; j < ac.length && j >= 0; j++) if (ac[j] < '0' || ac[j] > '9') return j;
        return ac.length;
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,1206162.java,247,254
selected,211182.java,595,605
----------------------------------------
    public Matrix transpose() {
        final Ring.Member array[][] = new Ring.Member[numCols][numRows];
        for (int j, i = 0; i < numRows; i++) {
            array[0][i] = matrix[i][0];
            for (j = 1; j < numCols; j++) array[j][i] = matrix[i][j];
        }
        return new RingMatrix(array);
    }
----------------------------------------
    public Matrix arrayRightDivide(Matrix B) {
        checkMatrixDimensions(B);
        Matrix X = new Matrix(m, n);
        double[][] C = X.getArray();
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                C[i][j] = A[i][j] / B.A[i][j];
            }
        }
        return X;
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,919373.java,7,18
selected,264796.java,286,296
----------------------------------------
    private static String convertToHex(byte[] data) {
        StringBuffer buf = new StringBuffer();
        for (int i = 0; i < data.length; i++) {
            int halfbyte = (data[i] >>> 4) & 0x0F;
            int two_halfs = 0;
            do {
                if ((0 <= halfbyte) && (halfbyte <= 9)) buf.append((char) ('0' + halfbyte)); else buf.append((char) ('a' + (halfbyte - 10)));
                halfbyte = data[i] & 0x0F;
            } while (two_halfs++ < 1);
        }
        return buf.toString();
    }
----------------------------------------
    public String fetchSite(URL url) throws IOException {
        InputStream in = url.openStream();
        StringBuffer sb = new StringBuffer();
        byte[] buffer = new byte[256];
        while (true) {
            int bytesRead = in.read(buffer);
            if (bytesRead == -1) break;
            for (int i = 0; i < bytesRead; i++) sb.append((char) buffer[i]);
        }
        return sb.toString();
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,743040.java,546,561
selected,2165036.java,486,502
----------------------------------------
    public boolean modifyMemberfields(Memberfields memberfields) {
        Session session = HibernateUtil.getSessionFactory().getCurrentSession();
        Transaction tr = null;
        try {
            tr = session.beginTransaction();
            session.saveOrUpdate(memberfields);
            tr.commit();
            return true;
        } catch (HibernateException e) {
            if (tr != null) {
                tr.rollback();
            }
            e.printStackTrace();
        }
        return false;
    }
----------------------------------------
    @SuppressWarnings("unchecked")
    public List<Usergroups> findUsergropsByHql(String hql) {
        Session session = null;
        session = HibernateUtil.getSessionFactory().getCurrentSession();
        Transaction tr = null;
        try {
            tr = session.beginTransaction();
            Query query = session.createQuery(hql);
            List<Usergroups> grouplist = query.list();
            tr.commit();
            return grouplist;
        } catch (HibernateException e) {
            tr.rollback();
            e.printStackTrace();
        }
        return null;
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,2095054.java,139,149
selected,1774296.java,1150,1157
----------------------------------------
    public static boolean isEquals(byte[] b1, byte[] b2) {
        if (b1.length != b2.length) {
            return false;
        }
        for (int i = 0; i < b1.length; i++) {
            if (b1[i] != b2[i]) {
                return false;
            }
        }
        return true;
    }
----------------------------------------
    public static boolean isStrictlyIncreasing(final int[] values, final int startIndex, final int endIndex) {
        final int d;
        if ((d = checkIterationRange(values, startIndex, endIndex)) == 0) return true;
        for (int i = startIndex; i != endIndex; ) {
            if (values[i] >= values[i += d]) return false;
        }
        return true;
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,1611108.java,41,54
default,34939.java,73,82
----------------------------------------
    public static String createStrWithZeroFromStr(String src, int strLength, boolean preFlag) {
        StringBuffer result = new StringBuffer();
        if (preFlag) {
            result.append(src);
        }
        int zeroNum = strLength - src.length();
        for (int i = 0; i < zeroNum; i++) {
            result.append("0");
        }
        if (!preFlag) {
            result.append(src);
        }
        return result.toString();
    }
----------------------------------------
    String sequenceUsingWhile(int start, int stop) {
        StringBuilder builder = new StringBuilder();
        int i = start;
        while (i <= stop) {
            if (i > start) builder.append(',');
            builder.append(i);
            i++;
        }
        return builder.toString();
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,2426442.java,284,299
selected,1995145.java,444,458
----------------------------------------
    private static String getStreamAsString(InputStream stream, String charset) throws IOException {
        try {
            BufferedReader reader = new BufferedReader(new InputStreamReader(stream, charset));
            StringWriter writer = new StringWriter();
            char[] chars = new char[256];
            int count = 0;
            while ((count = reader.read(chars)) > 0) {
                writer.write(chars, 0, count);
            }
            return writer.toString();
        } finally {
            if (stream != null) {
                stream.close();
            }
        }
    }
----------------------------------------
    public static final String read(final Reader reader, final int bufferSize) throws IOException {
        final StringBuilder sb = new StringBuilder();
        final char[] buffer = new char[bufferSize];
        final BufferedReader in = new BufferedReader(reader);
        try {
            while (true) {
                final int count = in.read(buffer);
                if (count == -1) break;
                sb.append(buffer, 0, count);
            }
        } finally {
            in.close();
        }
        return sb.toString();
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,240671.java,471,479
default,103325.java,101,110
----------------------------------------
    public static String print(double[][] x) {
        if (x == null) return "null";
        StringBuffer b = new StringBuffer();
        for (int i = 0; i < x.length - 1; i++) {
            b.append(print(x[i])).append("\n");
        }
        b.append(print(x[x.length - 1]));
        return b.toString();
    }
----------------------------------------
    private static String toHexString(byte[] bytes) {
        StringBuilder sb = new StringBuilder(bytes.length * 3);
        for (int b : bytes) {
            b &= 0xff;
            sb.append(HEXDIGITS[b >> 4]);
            sb.append(HEXDIGITS[b & 15]);
            sb.append(' ');
        }
        return sb.toString();
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,985401.java,837,847
selected,2069719.java,556,575
----------------------------------------
    private String fileNameString(File[] files) {
        if (files == null) return "";
        StringBuffer buf = new StringBuffer();
        for (int i = 0, n = files.length; i < n; i++) {
            if (i > 0) buf.append(" ");
            if (n > 1) buf.append("\"");
            buf.append(fileNameString(files[i]));
            if (n > 1) buf.append("\"");
        }
        return buf.toString();
    }
----------------------------------------
    public static String nullSafeToString(byte[] array) {
        if (array == null) {
            return NULL_STRING;
        }
        int length = array.length;
        if (length == 0) {
            return EMPTY_ARRAY;
        }
        StringBuffer buffer = new StringBuffer();
        for (int i = 0; i < length; i++) {
            if (i == 0) {
                buffer.append(ARRAY_START);
            } else {
                buffer.append(ARRAY_ELEMENT_SEPARATOR);
            }
            buffer.append(array[i]);
        }
        buffer.append(ARRAY_END);
        return buffer.toString();
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,2236457.java,88,97
selected,2593456.java,707,726
----------------------------------------
    private String toHexString(byte[] bytes) {
        StringBuilder str = new StringBuilder(bytes.length * 2);
        for (int i = 0; i < bytes.length; i++) {
            int value = bytes[i];
            if (value < 0) value += 256;
            str.append(toHexChar(value >>> 4));
            str.append(toHexChar(value & 15));
        }
        return str.toString();
    }
----------------------------------------
    public static String nullSafeToString(short[] array) {
        if (array == null) {
            return NULL_STRING;
        }
        int length = array.length;
        if (length == 0) {
            return EMPTY_ARRAY;
        }
        StringBuffer buffer = new StringBuffer();
        for (int i = 0; i < length; i++) {
            if (i == 0) {
                buffer.append(ARRAY_START);
            } else {
                buffer.append(ARRAY_ELEMENT_SEPARATOR);
            }
            buffer.append(array[i]);
        }
        buffer.append(ARRAY_END);
        return buffer.toString();
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,527654.java,256,263
selected,1955546.java,95,105
----------------------------------------
    public static String byteArrayToHex(byte... buffer) {
        StringBuilder result = new StringBuilder();
        for (byte b : buffer) {
            result.append(hexdigits[(b >> 4) & 0x0F]);
            result.append(hexdigits[b & 0x0F]);
        }
        return result.toString();
    }
----------------------------------------
    private static String vectorToString(Vector vec) {
        int n = vec.size();
        StringBuffer ret = new StringBuffer();
        for (int i = 0; i < n; i++) {
            ret.append((String) vec.elementAt(i));
            if (i < n - 1) {
                ret.append(",");
            }
        }
        return ret.toString();
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,328735.java,954,957
selected,1710788.java,1087,1094
----------------------------------------
    private String selectTransferSyntax(String[] available, String[] tsuids) {
        for (int i = 0; i < tsuids.length; i++) for (int j = 0; j < available.length; j++) if (available[j].equals(tsuids[i])) return available[j];
        return null;
    }
----------------------------------------
        public static void copyMatrix(double[][] in, double[][] out) {
            if (in == out) return;
            for (int rowI = 0; rowI < 4; rowI++) {
                for (int colI = 0; colI < 4; colI++) {
                    out[rowI][colI] = in[rowI][colI];
                }
            }
        }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,161563.java,125,134
default,59570.java,93,97
----------------------------------------
    public static int indexOfFirstLetter(String string) {
        int index = 0;
        for (int i = 0; i < string.length(); i++) {
            if (isLetter(string.charAt(i))) {
                index = i;
                break;
            }
        }
        return index;
    }
----------------------------------------
    public String endTrim(String source) {
        int i = source.length();
        while (--i >= 0) if (source.charAt(i) != ' ') break;
        return source.substring(0, i + 1);
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,1899190.java,165,171
default,43916.java,521,525
----------------------------------------
    public static String getUpdatedStr(String original, String code) {
        if (code.length() > original.length()) {
            return code;
        } else {
            return original.substring(0, original.length() - code.length()) + code;
        }
    }
----------------------------------------
        private boolean pathStartsWith(String path, String prefix) {
            if (path == null || prefix == null) return false;
            if (path.length() < prefix.length()) return false;
            return pathEqual(path.substring(0, prefix.length()), prefix);
        }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,736221.java,81,91
selected,2094508.java,243,253
----------------------------------------
    public static String join(Object[] array, String delimeter) {
        StringBuilder sb = new StringBuilder();
        if (array != null && array.length > 0) {
            sb.append(array[0]);
            for (int i = 1; i < array.length; i++) {
                sb.append(delimeter);
                sb.append(array[i]);
            }
        }
        return sb.toString();
    }
----------------------------------------
    public String buildHexaString(byte[] hash) {
        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < hash.length; i++) {
            int v = hash[i] & 0xFF;
            if (v < 16) {
                sb.append("0");
            }
            sb.append(Integer.toString(v, 16).toUpperCase() + " ");
        }
        return sb.toString();
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,1039401.java,417,432
selected,1836262.java,449,467
----------------------------------------
    @Override
    public String toString(List<ProvaVariable> variables) {
        if (this == emptyRList) return "[]";
        StringBuilder sb = new StringBuilder("[");
        final int fixedLength = fixed.length;
        for (int i = 0; i < fixedLength; i++) {
            if (i != 0) sb.append(',');
            sb.append(fixed[i].toString(variables));
        }
        if (tail != null) {
            sb.append('|');
            sb.append(tail.toString(variables));
        }
        sb.append(']');
        return sb.toString();
    }
----------------------------------------
    private PreparedStatement simpleInsert(Connection connection) {
        StringBuffer sql = new StringBuffer();
        sql.append("INSERT INTO " + quotedName() + " (");
        for (int c = 0; c < columns.length; ++c) {
            if (c > 0) sql.append(", ");
            sql.append(columns[c].quotedName());
        }
        sql.append(") VALUES (");
        for (int c = 0; c < columns.length; ++c) {
            if (c > 0) sql.append(", ");
            sql.append("?");
        }
        sql.append(")");
        try {
            return connection.prepareStatement(sql.toString());
        } catch (SQLException e) {
            throw new SimplePrepareFailedPoemException(sql.toString(), e);
        }
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,2676849.java,95,102
default,62476.java,54,62
----------------------------------------
    private String stripNewlinesAndTabs(String str) {
        char[] buf = str.toCharArray();
        StringBuilder sb = new StringBuilder();
        for (char c : buf) {
            if (c != '\t' && c != '\n') sb.append(c);
        }
        return sb.toString();
    }
----------------------------------------
    String sequenceUsingDo(int start, int stop) {
        StringBuilder builder = new StringBuilder();
        int i = start;
        do {
            if (i > start) builder.append(',');
            builder.append(i);
        } while (++i <= stop);
        return builder.toString();
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,271253.java,170,183
selected,1814816.java,430,438
----------------------------------------
    public static int[][] computeEdges(int[][] contab) {
        int N = contab.length;
        int[][] edges = new int[N][N];
        for (int i = 0; i < N; i++) {
            for (int j = 0; j < N; j++) {
                if (contab[i][j] > 0) {
                    edges[i][j] = 1;
                } else {
                    edges[i][j] = INFINITY;
                }
            }
        }
        return edges;
    }
----------------------------------------
    public static double[] matrixProd(final double[] m1, final double[][] m2) {
        final double[] res = new double[m2[0].length];
        for (int i = 0; i < m2[0].length; i++) {
            for (int k = 0; k < m1.length; k++) {
                res[i] += m1[k] * m2[k][i];
            }
        }
        return res;
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,929375.java,216,223
selected,1327574.java,73,85
----------------------------------------
    private static InputStream getAsInputStreamFromClassLoader(String filename) {
        ClassLoader cl = Thread.currentThread().getContextClassLoader();
        InputStream is = cl == null ? null : cl.getResourceAsStream(filename);
        if (is == null) {
            is = XmlConfigurator.class.getClassLoader().getResourceAsStream(filename);
        }
        return is;
    }
----------------------------------------
    public static InputStream getResourceAsStream(String path) {
        InputStream stream = ResourceLoader.class.getResourceAsStream(path);
        if (stream == null) {
            stream = Thread.currentThread().getContextClassLoader().getResourceAsStream(path);
        }
        if (stream == null) {
            stream = ClassLoader.getSystemResourceAsStream(path);
        }
        if (stream == null) {
            throw new RuntimeException("Oh no - couldn't load resource: " + path);
        }
        return stream;
    }
----------------------------------------
