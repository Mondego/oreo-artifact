$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,616950.java,37,43
selected,329854.java,127,133
----------------------------------------
    public OrdersTO doTrade() throws Exception {
        OrdersTO ordens = new OrdersTO();
        for (int i = 0; i < papers.length; i++) {
            ordens.add(doTradeByPaper(i, papers[i]));
        }
        return ordens;
    }
----------------------------------------
    protected List<Card> getCardsList() {
        List<Card> tempList = new ArrayList<Card>();
        for (int i = 0; i < cardsPresent; i++) {
            tempList.add(cards[i]);
        }
        return tempList;
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,616950.java,70,73
selected,843040.java,102,106
----------------------------------------
    public void novo_dia(double p, double dias[]) {
        for (int i = 0; i < PERIODO - 1; i++) dias[i] = dias[i + 1];
        dias[PERIODO - 1] = p;
    }
----------------------------------------
    public static void novo_dia(double p, double dias[]) {
        p = pvt(p);
        for (int i = 0; i < PERIODO - 1; i++) dias[i] = dias[i + 1];
        dias[PERIODO - 1] = p;
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,775888.java,579,587
default,39843.java,93,97
----------------------------------------
    private int findEndOfString(String sb) {
        int result;
        for (result = sb.length(); result > 0; result--) {
            if (!Character.isWhitespace(sb.charAt(result - 1))) {
                break;
            }
        }
        return result;
    }
----------------------------------------
    public String endTrim(String source) {
        int i = source.length();
        while (--i >= 0) if (source.charAt(i) != ' ') break;
        return source.substring(0, i + 1);
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,2342682.java,251,255
selected,853589.java,141,147
----------------------------------------
    public static String getExtension(final String filename) {
        if (filename == null || filename.trim().length() == 0 || !filename.contains(".")) return null;
        int pos = filename.lastIndexOf(".");
        return filename.substring(pos + 1);
    }
----------------------------------------
    private static String getFormatByName(String name) {
        if (name != null) {
            final int j = name.lastIndexOf('.') + 1, k = name.lastIndexOf('/') + 1;
            if (j > k && j < name.length()) return name.substring(j);
        }
        return null;
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,1317737.java,132,138
selected,494242.java,90,100
----------------------------------------
    private static void copyStream(InputStream in, OutputStream out) throws IOException {
        byte[] chunk = new byte[1024];
        int count;
        while ((count = in.read(chunk)) >= 0) {
            out.write(chunk, 0, count);
        }
    }
----------------------------------------
    public NSData(InputStream stream, int chunkSize) throws IOException {
        super();
        byte[] b = new byte[chunkSize];
        ByteArrayOutputStream bout = new ByteArrayOutputStream();
        int read = 0;
        do {
            read = stream.read(b);
            if (read > 0) bout.write(b, 0, read);
        } while (read > 0);
        bytes = bout.toByteArray();
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
default,44208.java,199,206
default,90320.java,56,63
----------------------------------------
    private static void putKey(Properties cfg, String s) {
        int pos = s.indexOf(':');
        if (pos == -1) {
            cfg.put("key." + s, "");
        } else {
            cfg.put("key." + s.substring(0, pos), s.substring(pos + 1));
        }
    }
----------------------------------------
    private static void add(Configuration cfg, String s) {
        int pos = s.indexOf('=');
        if (pos == -1) {
            cfg.put(s, "");
        } else {
            cfg.put(s.substring(0, pos), s.substring(pos + 1));
        }
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
default,15343.java,199,206
default,5803.java,56,63
----------------------------------------
    private static void putKey(Properties cfg, String s) {
        int pos = s.indexOf(':');
        if (pos == -1) {
            cfg.put("key." + s, "");
        } else {
            cfg.put("key." + s.substring(0, pos), s.substring(pos + 1));
        }
    }
----------------------------------------
    private static void add(Configuration cfg, String s) {
        int pos = s.indexOf('=');
        if (pos == -1) {
            cfg.put(s, "");
        } else {
            cfg.put(s.substring(0, pos), s.substring(pos + 1));
        }
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
default,97360.java,650,667
default,98981.java,667,685
----------------------------------------
    private boolean doPurgeSeries(DirWriter w, DirRecord parent, int[] counter) throws IOException {
        boolean matchAll = true;
        LinkedList toRemove = new LinkedList();
        for (DirRecord rec = parent.getFirstChild(true); rec != null; rec = rec.getNextSibling(true)) {
            if (doPurgeInstances(w, rec, counter)) {
                toRemove.add(rec);
            } else {
                matchAll = false;
            }
        }
        if (matchAll) {
            return true;
        }
        for (Iterator it = toRemove.iterator(); it.hasNext(); ) {
            counter[0] += w.remove((DirRecord) it.next());
        }
        return false;
    }
----------------------------------------
    private boolean doPurgeInstances(DirWriter w, DirRecord parent, int[] counter) throws IOException {
        boolean matchAll = true;
        LinkedList toRemove = new LinkedList();
        for (DirRecord rec = parent.getFirstChild(true); rec != null; rec = rec.getNextSibling(true)) {
            File file = w.getRefFile(rec.getRefFileIDs());
            if (!file.exists()) {
                toRemove.add(rec);
            } else {
                matchAll = false;
            }
        }
        if (matchAll) {
            return true;
        }
        for (Iterator it = toRemove.iterator(); it.hasNext(); ) {
            counter[0] += w.remove((DirRecord) it.next());
        }
        return false;
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
default,119807.java,1097,1112
default,119807.java,1040,1055
----------------------------------------
    @Test
    public void test72() throws Exception {
        byte[] buffer;
        ByteArrayOutputStream stream = new ByteArrayOutputStream();
        CsvWriter writer = new CsvWriter(stream, ',', Charset.forName("ISO-8859-1"));
        Assert.assertEquals('\0', writer.getRecordDelimiter());
        writer.setRecordDelimiter(';');
        Assert.assertEquals(';', writer.getRecordDelimiter());
        writer.write("a;b");
        writer.endRecord();
        writer.close();
        buffer = stream.toByteArray();
        stream.close();
        String data = Charset.forName("ISO-8859-1").decode(ByteBuffer.wrap(buffer)).toString();
        Assert.assertEquals("\"a;b\";", data);
    }
----------------------------------------
    @Test
    public void test58() throws Exception {
        byte[] buffer;
        ByteArrayOutputStream stream = new ByteArrayOutputStream();
        CsvWriter writer = new CsvWriter(stream, '\t', Charset.forName("ISO-8859-1"));
        writer.write("data\r\nmore data");
        writer.write(" 3\t", false);
        writer.write(" 3\t");
        writer.write(" 3\t", true);
        writer.endRecord();
        writer.close();
        buffer = stream.toByteArray();
        stream.close();
        String data = Charset.forName("ISO-8859-1").decode(ByteBuffer.wrap(buffer)).toString();
        Assert.assertEquals("\"data\r\nmore data\"\t3\t3\t\" 3\t\"\r\n", data);
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
default,5657.java,761,773
default,119807.java,233,245
----------------------------------------
    @Test
    public void test41() throws Exception {
        String data = "double\\\\\\\\double backslash";
        CsvReader reader = CsvReader.parse(data);
        reader.setUseTextQualifier(false);
        reader.setEscapeMode(CsvReader.ESCAPE_MODE_BACKSLASH);
        Assert.assertTrue(reader.readRecord());
        Assert.assertEquals("double\\\\double backslash", reader.get(0));
        Assert.assertEquals(0L, reader.getCurrentRecord());
        Assert.assertEquals(1, reader.getColumnCount());
        Assert.assertFalse(reader.readRecord());
        reader.close();
    }
----------------------------------------
    @Test
    public void test9() throws Exception {
        String data = "1\r\n";
        CsvReader reader = CsvReader.parse(data);
        Assert.assertTrue(reader.readRecord());
        Assert.assertEquals("1", reader.get(0));
        Assert.assertEquals(0L, reader.getCurrentRecord());
        Assert.assertEquals(1, reader.getColumnCount());
        Assert.assertEquals("1", reader.getRawRecord());
        Assert.assertFalse(reader.readRecord());
        Assert.assertEquals("", reader.getRawRecord());
        reader.close();
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
default,28532.java,205,217
default,5657.java,148,165
----------------------------------------
    @Test
    public void test7() throws Exception {
        String data = "1\r";
        CsvReader reader = CsvReader.parse(data);
        Assert.assertTrue(reader.readRecord());
        Assert.assertEquals("1", reader.get(0));
        Assert.assertEquals(0L, reader.getCurrentRecord());
        Assert.assertEquals(1, reader.getColumnCount());
        Assert.assertEquals("1", reader.getRawRecord());
        Assert.assertFalse(reader.readRecord());
        Assert.assertEquals("", reader.getRawRecord());
        reader.close();
    }
----------------------------------------
    @Test
    public void test4() throws Exception {
        String data = "1\r2";
        CsvReader reader = CsvReader.parse(data);
        Assert.assertTrue(reader.readRecord());
        Assert.assertEquals("1", reader.get(0));
        Assert.assertEquals(0L, reader.getCurrentRecord());
        Assert.assertEquals(1, reader.getColumnCount());
        Assert.assertEquals("1", reader.getRawRecord());
        Assert.assertTrue(reader.readRecord());
        Assert.assertEquals("2", reader.get(0));
        Assert.assertEquals(1L, reader.getCurrentRecord());
        Assert.assertEquals(1, reader.getColumnCount());
        Assert.assertEquals("2", reader.getRawRecord());
        Assert.assertFalse(reader.readRecord());
        Assert.assertEquals("", reader.getRawRecord());
        reader.close();
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
default,28532.java,233,245
default,124923.java,438,451
----------------------------------------
    @Test
    public void test9() throws Exception {
        String data = "1\r\n";
        CsvReader reader = CsvReader.parse(data);
        Assert.assertTrue(reader.readRecord());
        Assert.assertEquals("1", reader.get(0));
        Assert.assertEquals(0L, reader.getCurrentRecord());
        Assert.assertEquals(1, reader.getColumnCount());
        Assert.assertEquals("1", reader.getRawRecord());
        Assert.assertFalse(reader.readRecord());
        Assert.assertEquals("", reader.getRawRecord());
        reader.close();
    }
----------------------------------------
    @Test
    public void test23() throws Exception {
        String data = generateString('a', 75) + "," + generateString('b', 75);
        CsvReader reader = CsvReader.parse(data);
        reader.setUseTextQualifier(false);
        Assert.assertTrue(reader.readRecord());
        Assert.assertEquals(reader.get(0), generateString('a', 75));
        Assert.assertEquals(reader.get(1), generateString('b', 75));
        Assert.assertEquals(0L, reader.getCurrentRecord());
        Assert.assertEquals(2, reader.getColumnCount());
        Assert.assertEquals(generateString('a', 75) + "," + generateString('b', 75), reader.getRawRecord());
        Assert.assertFalse(reader.readRecord());
        reader.close();
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
default,28532.java,761,773
default,39035.java,1715,1723
----------------------------------------
    @Test
    public void test41() throws Exception {
        String data = "double\\\\\\\\double backslash";
        CsvReader reader = CsvReader.parse(data);
        reader.setUseTextQualifier(false);
        reader.setEscapeMode(CsvReader.ESCAPE_MODE_BACKSLASH);
        Assert.assertTrue(reader.readRecord());
        Assert.assertEquals("double\\\\double backslash", reader.get(0));
        Assert.assertEquals(0L, reader.getCurrentRecord());
        Assert.assertEquals(1, reader.getColumnCount());
        Assert.assertFalse(reader.readRecord());
        reader.close();
    }
----------------------------------------
    @Test
    public void test144() throws Exception {
        CsvReader reader = CsvReader.parse("\"" + generateString('a', 100000) + "\"");
        Assert.assertTrue(reader.readRecord());
        Assert.assertEquals(generateString('a', 100000), reader.get(0));
        Assert.assertEquals("\"" + generateString('a', 100000) + "\"", reader.getRawRecord());
        Assert.assertFalse(reader.readRecord());
        reader.close();
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
default,94432.java,90,100
default,72242.java,102,110
----------------------------------------
    private void parseDocument() {
        Element docEle = dom.getDocumentElement();
        NodeList nl = docEle.getElementsByTagName("dataDir");
        if (nl != null && nl.getLength() == 1) {
            Element el = (Element) nl.item(0);
            String val = el.getFirstChild().getTextContent();
            if (val != null) {
                baseDir = val;
            }
        }
    }
----------------------------------------
    private void setBaseDir() {
        Element docEle = dom.getDocumentElement();
        NodeList nl = docEle.getElementsByTagName("dataDir");
        if (nl != null && nl.getLength() == 1) {
            Element el = (Element) nl.item(0);
            el.getFirstChild().setNodeValue(baseDir);
            writeConfiguration();
        }
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
default,79012.java,648,665
default,92220.java,570,590
----------------------------------------
    private boolean doPurgeSeries(DirWriter w, DirRecord parent, int[] counter) throws IOException {
        boolean matchAll = true;
        LinkedList toRemove = new LinkedList();
        for (DirRecord rec = parent.getFirstChild(true); rec != null; rec = rec.getNextSibling(true)) {
            if (doPurgeInstances(w, rec, counter)) {
                toRemove.add(rec);
            } else {
                matchAll = false;
            }
        }
        if (matchAll) {
            return true;
        }
        for (Iterator it = toRemove.iterator(); it.hasNext(); ) {
            counter[0] += w.remove((DirRecord) it.next());
        }
        return false;
    }
----------------------------------------
    private boolean doRemoveInstances(DirWriter w, DirRecord parent, int[] counter, boolean delFiles) throws IOException {
        boolean matchAll = true;
        LinkedList toRemove = new LinkedList();
        for (DirRecord rec = parent.getFirstChild(true); rec != null; rec = rec.getNextSibling(true)) {
            if (sopInstUIDs.contains(rec.getRefSOPInstanceUID()) || matchFileIDs(rec.getRefFileIDs())) {
                if (delFiles) {
                    deleteRefFiles(w, rec, counter);
                }
                toRemove.add(rec);
            } else {
                matchAll = false;
            }
        }
        if (matchAll) {
            return true;
        }
        for (Iterator it = toRemove.iterator(); it.hasNext(); ) {
            counter[1] += w.remove((DirRecord) it.next());
        }
        return false;
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
default,94944.java,440,452
default,97360.java,495,509
----------------------------------------
    public void compact() throws IOException {
        DirWriter writer = fact.newDirWriter(dirFile, encodeParam());
        long t1 = System.currentTimeMillis();
        long len1 = dirFile.length();
        try {
            writer = writer.compact();
        } finally {
            writer.close();
        }
        long t2 = System.currentTimeMillis();
        long len2 = dirFile.length();
        System.out.println(MessageFormat.format(messages.getString("compactDone"), new Object[] { dirFile, String.valueOf(len1), String.valueOf(len2), String.valueOf((t2 - t1) / 1000f) }));
    }
----------------------------------------
    public void remove(String[] args, int off, boolean delFiles) throws IOException {
        long t1 = System.currentTimeMillis();
        int[] counter = new int[2];
        DirWriter w = fact.newDirWriter(dirFile, encodeParam());
        try {
            for (int i = off; i < args.length; ++i) {
                addFileIDs(w, new File(args[i]));
            }
            doRemove(w, counter, delFiles);
        } finally {
            w.close();
        }
        long t2 = System.currentTimeMillis();
        System.out.println(MessageFormat.format(messages.getString("removeDone"), new Object[] { String.valueOf(counter[1]), String.valueOf(counter[0]), String.valueOf((t2 - t1) / 1000f) }));
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
default,8952.java,629,646
default,129715.java,669,687
----------------------------------------
    private boolean doPurgeStudy(DirWriter w, DirRecord parent, int[] counter) throws IOException {
        boolean matchAll = true;
        LinkedList toRemove = new LinkedList();
        for (DirRecord rec = parent.getFirstChild(true); rec != null; rec = rec.getNextSibling(true)) {
            if (doPurgeSeries(w, rec, counter)) {
                toRemove.add(rec);
            } else {
                matchAll = false;
            }
        }
        if (matchAll) {
            return true;
        }
        for (Iterator it = toRemove.iterator(); it.hasNext(); ) {
            counter[0] += w.remove((DirRecord) it.next());
        }
        return false;
    }
----------------------------------------
    private boolean doPurgeInstances(DirWriter w, DirRecord parent, int[] counter) throws IOException {
        boolean matchAll = true;
        LinkedList toRemove = new LinkedList();
        for (DirRecord rec = parent.getFirstChild(true); rec != null; rec = rec.getNextSibling(true)) {
            File file = w.getRefFile(rec.getRefFileIDs());
            if (!file.exists()) {
                toRemove.add(rec);
            } else {
                matchAll = false;
            }
        }
        if (matchAll) {
            return true;
        }
        for (Iterator it = toRemove.iterator(); it.hasNext(); ) {
            counter[0] += w.remove((DirRecord) it.next());
        }
        return false;
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
default,93943.java,132,146
default,124923.java,233,245
----------------------------------------
    @Test
    public void test3() throws Exception {
        String data = ",";
        CsvReader reader = CsvReader.parse(data);
        Assert.assertTrue(reader.readRecord());
        Assert.assertEquals("", reader.get(0));
        Assert.assertEquals("", reader.get(1));
        Assert.assertEquals(',', reader.getDelimiter());
        Assert.assertEquals(0L, reader.getCurrentRecord());
        Assert.assertEquals(2, reader.getColumnCount());
        Assert.assertEquals(",", reader.getRawRecord());
        Assert.assertFalse(reader.readRecord());
        Assert.assertEquals("", reader.getRawRecord());
        reader.close();
    }
----------------------------------------
    @Test
    public void test9() throws Exception {
        String data = "1\r\n";
        CsvReader reader = CsvReader.parse(data);
        Assert.assertTrue(reader.readRecord());
        Assert.assertEquals("1", reader.get(0));
        Assert.assertEquals(0L, reader.getCurrentRecord());
        Assert.assertEquals(1, reader.getColumnCount());
        Assert.assertEquals("1", reader.getRawRecord());
        Assert.assertFalse(reader.readRecord());
        Assert.assertEquals("", reader.getRawRecord());
        reader.close();
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
default,93943.java,132,146
default,80510.java,320,331
----------------------------------------
    @Test
    public void test3() throws Exception {
        String data = ",";
        CsvReader reader = CsvReader.parse(data);
        Assert.assertTrue(reader.readRecord());
        Assert.assertEquals("", reader.get(0));
        Assert.assertEquals("", reader.get(1));
        Assert.assertEquals(',', reader.getDelimiter());
        Assert.assertEquals(0L, reader.getCurrentRecord());
        Assert.assertEquals(2, reader.getColumnCount());
        Assert.assertEquals(",", reader.getRawRecord());
        Assert.assertFalse(reader.readRecord());
        Assert.assertEquals("", reader.getRawRecord());
        reader.close();
    }
----------------------------------------
    @Test
    public void test15() throws Exception {
        String data = "\"data \r\n here\"";
        CsvReader reader = CsvReader.parse(data);
        Assert.assertTrue(reader.readRecord());
        Assert.assertEquals("data \r\n here", reader.get(0));
        Assert.assertEquals(0L, reader.getCurrentRecord());
        Assert.assertEquals(1, reader.getColumnCount());
        Assert.assertEquals("\"data \r\n here\"", reader.getRawRecord());
        Assert.assertFalse(reader.readRecord());
        reader.close();
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
default,93943.java,219,231
default,5657.java,407,422
----------------------------------------
    @Test
    public void test8() throws Exception {
        String data = "1\n";
        CsvReader reader = CsvReader.parse(data);
        Assert.assertTrue(reader.readRecord());
        Assert.assertEquals("1", reader.get(0));
        Assert.assertEquals(0L, reader.getCurrentRecord());
        Assert.assertEquals(1, reader.getColumnCount());
        Assert.assertEquals("1", reader.getRawRecord());
        Assert.assertFalse(reader.readRecord());
        Assert.assertEquals("", reader.getRawRecord());
        reader.close();
    }
----------------------------------------
    @Test
    public void test21() throws Exception {
        String data = "'bob said, ''Hey!''',2, 3 ";
        CsvReader reader = CsvReader.parse(data);
        reader.setTextQualifier('\'');
        Assert.assertTrue(reader.readRecord());
        Assert.assertEquals("bob said, 'Hey!'", reader.get(0));
        Assert.assertEquals("2", reader.get(1));
        Assert.assertEquals("3", reader.get(2));
        Assert.assertEquals(',', reader.getDelimiter());
        Assert.assertEquals(0L, reader.getCurrentRecord());
        Assert.assertEquals(3, reader.getColumnCount());
        Assert.assertEquals("'bob said, ''Hey!''',2, 3 ", reader.getRawRecord());
        Assert.assertFalse(reader.readRecord());
        reader.close();
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
default,93943.java,276,288
default,39035.java,1735,1745
----------------------------------------
    @Test
    public void test12() throws Exception {
        String data = " 1";
        CsvReader reader = CsvReader.parse(data);
        reader.setTrimWhitespace(false);
        Assert.assertTrue(reader.readRecord());
        Assert.assertEquals(" 1", reader.get(0));
        Assert.assertEquals(0L, reader.getCurrentRecord());
        Assert.assertEquals(1, reader.getColumnCount());
        Assert.assertEquals(" 1", reader.getRawRecord());
        Assert.assertFalse(reader.readRecord());
        reader.close();
    }
----------------------------------------
    @Test
    public void test146() throws Exception {
        CsvReader reader = CsvReader.parse("\"" + generateString('a', 10000) + "\r\nb");
        Assert.assertEquals("", reader.getRawRecord());
        Assert.assertTrue(reader.skipLine());
        Assert.assertEquals("", reader.getRawRecord());
        Assert.assertTrue(reader.readRecord());
        Assert.assertEquals("b", reader.get(0));
        Assert.assertFalse(reader.readRecord());
        reader.close();
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
default,93943.java,589,601
default,124923.java,263,274
----------------------------------------
    @Test
    public void test32() throws Exception {
        String data = "\"Mac \"The Knife\" Peter\",\"Boswell, Jr.\"";
        CsvReader reader = CsvReader.parse(data);
        Assert.assertTrue(reader.readRecord());
        Assert.assertEquals("Mac ", reader.get(0));
        Assert.assertEquals("Boswell, Jr.", reader.get(1));
        Assert.assertEquals(0L, reader.getCurrentRecord());
        Assert.assertEquals(2, reader.getColumnCount());
        Assert.assertEquals("\"Mac \"The Knife\" Peter\",\"Boswell, Jr.\"", reader.getRawRecord());
        Assert.assertFalse(reader.readRecord());
        reader.close();
    }
----------------------------------------
    @Test
    public void test11() throws Exception {
        String data = "\"July 4th, 2005\"";
        CsvReader reader = CsvReader.parse(data);
        Assert.assertTrue(reader.readRecord());
        Assert.assertEquals("July 4th, 2005", reader.get(0));
        Assert.assertEquals(0L, reader.getCurrentRecord());
        Assert.assertEquals(1, reader.getColumnCount());
        Assert.assertEquals("\"July 4th, 2005\"", reader.getRawRecord());
        Assert.assertFalse(reader.readRecord());
        reader.close();
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
default,93943.java,1040,1055
default,28532.java,1567,1580
----------------------------------------
    @Test
    public void test58() throws Exception {
        byte[] buffer;
        ByteArrayOutputStream stream = new ByteArrayOutputStream();
        CsvWriter writer = new CsvWriter(stream, '\t', Charset.forName("ISO-8859-1"));
        writer.write("data\r\nmore data");
        writer.write(" 3\t", false);
        writer.write(" 3\t");
        writer.write(" 3\t", true);
        writer.endRecord();
        writer.close();
        buffer = stream.toByteArray();
        stream.close();
        String data = Charset.forName("ISO-8859-1").decode(ByteBuffer.wrap(buffer)).toString();
        Assert.assertEquals("\"data\r\nmore data\"\t3\t3\t\" 3\t\"\r\n", data);
    }
----------------------------------------
    @Test
    public void test132() throws Exception {
        byte[] buffer;
        ByteArrayOutputStream stream = new ByteArrayOutputStream();
        CsvWriter writer = new CsvWriter(stream, ',', Charset.forName("ISO-8859-1"));
        writer.setEscapeMode(CsvWriter.ESCAPE_MODE_BACKSLASH);
        writer.write("1,\\2");
        writer.endRecord();
        writer.close();
        buffer = stream.toByteArray();
        stream.close();
        String data = Charset.forName("ISO-8859-1").decode(ByteBuffer.wrap(buffer)).toString();
        Assert.assertEquals("\"1,\\\\2\"\r\n", data);
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
default,93943.java,1288,1301
default,39035.java,545,557
----------------------------------------
    @Test
    public void test87() throws Exception {
        CsvWriter writer = new CsvWriter("temp.csv");
        writer.write("1");
        writer.close();
        CsvReader reader = new CsvReader("temp.csv");
        Assert.assertTrue(reader.readRecord());
        Assert.assertEquals("1", reader.get(0));
        Assert.assertEquals(1, reader.getColumnCount());
        Assert.assertEquals(0L, reader.getCurrentRecord());
        Assert.assertFalse(reader.readRecord());
        reader.close();
        new File("temp.csv").delete();
    }
----------------------------------------
    @Test
    public void test29() throws Exception {
        String data = "\"double\\\"\\\"double quotes\"";
        CsvReader reader = CsvReader.parse(data);
        reader.setEscapeMode(CsvReader.ESCAPE_MODE_BACKSLASH);
        Assert.assertTrue(reader.readRecord());
        Assert.assertEquals("double\"\"double quotes", reader.get(0));
        Assert.assertEquals(0L, reader.getCurrentRecord());
        Assert.assertEquals(1, reader.getColumnCount());
        Assert.assertEquals("\"double\\\"\\\"double quotes\"", reader.getRawRecord());
        Assert.assertFalse(reader.readRecord());
        reader.close();
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
default,51140.java,885,898
default,132453.java,307,321
----------------------------------------
    @SuppressWarnings("unchecked")
    private void loadSchedule() {
        try {
            FileInputStream fis = new FileInputStream(this.getProperty("path.data") + File.separator + "Times.sof");
            ObjectInputStream ois = new ObjectInputStream(fis);
            times = (HashMap<String, ScheduleItem>) ois.readObject();
            ois.close();
            System.out.println("Times.sof found and loaded (" + times.size() + ")");
            refreshWakeupTime();
        } catch (Exception e) {
            times = new HashMap<String, ScheduleItem>();
            System.out.println("Error loading Times.sof, starting with blank schedule");
        }
    }
----------------------------------------
    @SuppressWarnings("unchecked")
    public void loadChannelMap() {
        DataStore store = DataStore.getInstance();
        String loadFrom = store.getProperty("path.data") + File.separator + "ChannelMap.sof";
        try {
            FileInputStream fis = new FileInputStream(loadFrom);
            ObjectInputStream ois = new ObjectInputStream(fis);
            Vector<String[]> channelMap = (Vector<String[]>) ois.readObject();
            ois.close();
            System.out.println("ChannelMap.sof loaded.");
            setChannelMap(channelMap);
        } catch (Exception e) {
            System.out.println("Error loading ChannelMap.sof, starting with no channel mapping.");
        }
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
default,108171.java,81,86
default,66262.java,66,71
----------------------------------------
    public void addSecondaryZone(String zone, String remote) throws IOException {
        Cache cache = getCache(DClass.IN);
        Name zname = Name.fromString(zone, Name.root);
        Zone newzone = new Zone(zname, DClass.IN, remote, cache);
        znames.put(zname, newzone);
    }
----------------------------------------
    public void addSecondaryZone(String zone, String remote) throws IOException {
        Cache cache = getCache(DClass.IN);
        Name zname = new Name(zone);
        Zone newzone = new Zone(zname, DClass.IN, remote, cache);
        znames.put(zname, newzone);
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
default,71045.java,304,312
default,71045.java,176,182
----------------------------------------
    public boolean Test270(String methodName) {
        USBPort usbPort = new USBPort();
        USBDrive usbDrive = new USBDrive();
        CDRW cd = new CDRW();
        usbPort.plugIn(usbDrive);
        usbDrive.load(cd);
        usbPort.use(400000);
        return this.matchResultToInteger(methodName, 300000, usbPort.available());
    }
----------------------------------------
    public boolean Test58(String methodName) {
        Disc disc1 = new CDRW();
        DiscDrive dd1 = new BlueRayDrive();
        dd1.load(disc1);
        dd1.use(65);
        return this.matchResultToInteger(methodName, -1, dd1.available());
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
default,114239.java,276,288
default,114239.java,247,261
----------------------------------------
    @Test
    public void test12() throws Exception {
        String data = " 1";
        CsvReader reader = CsvReader.parse(data);
        reader.setTrimWhitespace(false);
        Assert.assertTrue(reader.readRecord());
        Assert.assertEquals(" 1", reader.get(0));
        Assert.assertEquals(0L, reader.getCurrentRecord());
        Assert.assertEquals(1, reader.getColumnCount());
        Assert.assertEquals(" 1", reader.getRawRecord());
        Assert.assertFalse(reader.readRecord());
        reader.close();
    }
----------------------------------------
    @Test
    public void test10() throws Exception {
        String data = "1\r2\n";
        CsvReader reader = CsvReader.parse(data);
        reader.setDelimiter('\r');
        Assert.assertTrue(reader.readRecord());
        Assert.assertEquals("1", reader.get(0));
        Assert.assertEquals("2", reader.get(1));
        Assert.assertEquals(0L, reader.getCurrentRecord());
        Assert.assertEquals(2, reader.getColumnCount());
        Assert.assertEquals("1\r2", reader.getRawRecord());
        Assert.assertFalse(reader.readRecord());
        Assert.assertEquals("", reader.getRawRecord());
        reader.close();
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,1778122.java,1555,1561
default,130693.java,142,148
----------------------------------------
    public static double[] toDoubleArray(Number[] numberArray) {
        double[] returnValue = new double[numberArray.length];
        for (int i = 0; i < numberArray.length; i++) {
            returnValue[i] = numberArray[i].doubleValue();
        }
        return returnValue;
    }
----------------------------------------
    private static int[] toTags(String[] tagStr) {
        int[] tags = new int[tagStr.length];
        for (int i = 0; i < tags.length; i++) {
            tags[i] = toTag(tagStr[i]);
        }
        return tags;
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
default,21681.java,629,646
default,79012.java,570,590
----------------------------------------
    private boolean doPurgeStudy(DirWriter w, DirRecord parent, int[] counter) throws IOException {
        boolean matchAll = true;
        LinkedList toRemove = new LinkedList();
        for (DirRecord rec = parent.getFirstChild(true); rec != null; rec = rec.getNextSibling(true)) {
            if (doPurgeSeries(w, rec, counter)) {
                toRemove.add(rec);
            } else {
                matchAll = false;
            }
        }
        if (matchAll) {
            return true;
        }
        for (Iterator it = toRemove.iterator(); it.hasNext(); ) {
            counter[0] += w.remove((DirRecord) it.next());
        }
        return false;
    }
----------------------------------------
    private boolean doRemoveInstances(DirWriter w, DirRecord parent, int[] counter, boolean delFiles) throws IOException {
        boolean matchAll = true;
        LinkedList toRemove = new LinkedList();
        for (DirRecord rec = parent.getFirstChild(true); rec != null; rec = rec.getNextSibling(true)) {
            if (sopInstUIDs.contains(rec.getRefSOPInstanceUID()) || matchFileIDs(rec.getRefFileIDs())) {
                if (delFiles) {
                    deleteRefFiles(w, rec, counter);
                }
                toRemove.add(rec);
            } else {
                matchAll = false;
            }
        }
        if (matchAll) {
            return true;
        }
        for (Iterator it = toRemove.iterator(); it.hasNext(); ) {
            counter[1] += w.remove((DirRecord) it.next());
        }
        return false;
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
default,118948.java,126,133
default,16697.java,56,63
----------------------------------------
    private static void set(Configuration cfg, String s) {
        int pos = s.indexOf(':');
        if (pos == -1) {
            cfg.put("set." + s, "");
        } else {
            cfg.put("set." + s.substring(0, pos), s.substring(pos + 1));
        }
    }
----------------------------------------
    private static void add(Configuration cfg, String s) {
        int pos = s.indexOf('=');
        if (pos == -1) {
            cfg.put(s, "");
        } else {
            cfg.put(s.substring(0, pos), s.substring(pos + 1));
        }
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
default,114488.java,315,326
default,26124.java,295,307
----------------------------------------
    private void send(ActiveAssociation active, File file) throws InterruptedException, IOException {
        if (!file.isDirectory()) {
            for (int i = 0; i < repeatSingle; ++i) {
                sendFile(active, file);
            }
            return;
        }
        File[] list = file.listFiles();
        for (int i = 0; i < list.length; ++i) {
            send(active, list[i]);
        }
    }
----------------------------------------
    private void send(ActiveAssociation active, File file, Dataset ds) throws InterruptedException, IOException {
        if (!file.isDirectory()) {
            for (int i = 0; i < repeatSingle; ++i) {
                if (ds != null && random) ds.putUI(Tags.SOPInstanceUID, uidGen.createUID());
                sendFile(active, file, ds);
            }
            return;
        }
        File[] list = file.listFiles();
        for (int i = 0; i < list.length; ++i) {
            send(active, list[i], ds);
        }
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
default,42859.java,86,91
default,42530.java,86,90
----------------------------------------
    public void addPrimaryZone(String zname, String zonefile) throws IOException {
        Name origin = null;
        if (zname != null) origin = Name.fromString(zname, Name.root);
        Zone newzone = new Zone(origin, zonefile);
        znames.put(newzone.getOrigin(), newzone);
    }
----------------------------------------
    public void addSecondaryZone(String zone, String remote) throws IOException, ZoneTransferException {
        Name zname = Name.fromString(zone, Name.root);
        Zone newzone = new Zone(zname, DClass.IN, remote);
        znames.put(zname, newzone);
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
default,71930.java,270,291
default,62165.java,303,323
----------------------------------------
    void buildCondRegion(Vector region) throws IOException {
        Vector intern = new Vector();
        for (; ; ) {
            String inLine = readLine();
            if (inLine == null) throw new IOException("Unexpected end of file");
            if (isTemplateLine(inLine)) {
                int command = getTemplateCommand(inLine);
                if (command == END) {
                    region.addElement(intern);
                    break;
                } else if (command == ELSE) {
                    region.addElement(intern);
                    intern = new Vector();
                } else {
                    intern.addElement(buildTemplateRegion(inLine));
                }
            } else {
                if (DEBUG) System.out.println("adding line to region :" + inLine);
                intern.addElement(inLine);
            }
        }
    }
----------------------------------------
    void buildIncludeRegion(Vector region) throws IOException {
        QuotedStringTokenizer pst = new QuotedStringTokenizer(params);
        if (!pst.hasMoreTokens()) throw new IOException("Missing filename in INCLUDE");
        String file_name = pst.nextToken();
        LineNumberReader old_in = in;
        try {
            in = new LineNumberReader(new FileReader(file_name));
        } catch (java.io.FileNotFoundException e) {
            in = new LineNumberReader(new FileReader(inDir + file_name));
        }
        String inLine;
        for (inLine = readLine(); inLine != null; inLine = readLine()) {
            if (isTemplateLine(inLine)) {
                region.addElement(buildTemplateRegion(inLine));
            } else {
                if (DEBUG) System.out.println("adding line to region :" + inLine);
                region.addElement(inLine);
            }
        }
        in = old_in;
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
default,43540.java,126,133
default,1297.java,56,63
----------------------------------------
    private static void set(Configuration cfg, String s) {
        int pos = s.indexOf(':');
        if (pos == -1) {
            cfg.put("set." + s, "");
        } else {
            cfg.put("set." + s.substring(0, pos), s.substring(pos + 1));
        }
    }
----------------------------------------
    private static void add(Configuration cfg, String s) {
        int pos = s.indexOf('=');
        if (pos == -1) {
            cfg.put(s, "");
        } else {
            cfg.put(s.substring(0, pos), s.substring(pos + 1));
        }
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
default,12819.java,629,646
default,4439.java,570,590
----------------------------------------
    private boolean doPurgeStudy(DirWriter w, DirRecord parent, int[] counter) throws IOException {
        boolean matchAll = true;
        LinkedList toRemove = new LinkedList();
        for (DirRecord rec = parent.getFirstChild(true); rec != null; rec = rec.getNextSibling(true)) {
            if (doPurgeSeries(w, rec, counter)) {
                toRemove.add(rec);
            } else {
                matchAll = false;
            }
        }
        if (matchAll) {
            return true;
        }
        for (Iterator it = toRemove.iterator(); it.hasNext(); ) {
            counter[0] += w.remove((DirRecord) it.next());
        }
        return false;
    }
----------------------------------------
    private boolean doRemoveInstances(DirWriter w, DirRecord parent, int[] counter, boolean delFiles) throws IOException {
        boolean matchAll = true;
        LinkedList toRemove = new LinkedList();
        for (DirRecord rec = parent.getFirstChild(true); rec != null; rec = rec.getNextSibling(true)) {
            if (sopInstUIDs.contains(rec.getRefSOPInstanceUID()) || matchFileIDs(rec.getRefFileIDs())) {
                if (delFiles) {
                    deleteRefFiles(w, rec, counter);
                }
                toRemove.add(rec);
            } else {
                matchAll = false;
            }
        }
        if (matchAll) {
            return true;
        }
        for (Iterator it = toRemove.iterator(); it.hasNext(); ) {
            counter[1] += w.remove((DirRecord) it.next());
        }
        return false;
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
default,85127.java,459,472
default,94821.java,435,447
----------------------------------------
    public void purge() throws IOException {
        DirWriter writer = fact.newDirWriter(dirFile, encodeParam());
        long t1 = System.currentTimeMillis();
        long len1 = dirFile.length();
        int count = 0;
        try {
            count = doPurge(writer);
        } finally {
            writer.close();
        }
        long t2 = System.currentTimeMillis();
        long len2 = dirFile.length();
        System.out.println(MessageFormat.format(messages.getString("purgeDone"), new Object[] { String.valueOf(count), String.valueOf((t2 - t1) / 1000f) }));
    }
----------------------------------------
    public void compact() throws IOException {
        DirWriter writer = fact.newDirWriter(dirFile, encodeParam());
        long t1 = System.currentTimeMillis();
        long len1 = dirFile.length();
        try {
            writer = writer.compact();
        } finally {
            writer.close();
        }
        long t2 = System.currentTimeMillis();
        long len2 = dirFile.length();
        System.out.println(MessageFormat.format(messages.getString("compactDone"), new Object[] { dirFile, String.valueOf(len1), String.valueOf(len2), String.valueOf((t2 - t1) / 1000f) }));
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
default,122249.java,247,261
default,80510.java,669,683
----------------------------------------
    @Test
    public void test10() throws Exception {
        String data = "1\r2\n";
        CsvReader reader = CsvReader.parse(data);
        reader.setDelimiter('\r');
        Assert.assertTrue(reader.readRecord());
        Assert.assertEquals("1", reader.get(0));
        Assert.assertEquals("2", reader.get(1));
        Assert.assertEquals(0L, reader.getCurrentRecord());
        Assert.assertEquals(2, reader.getColumnCount());
        Assert.assertEquals("1\r2", reader.getRawRecord());
        Assert.assertFalse(reader.readRecord());
        Assert.assertEquals("", reader.getRawRecord());
        reader.close();
    }
----------------------------------------
    @Test
    public void test37() throws Exception {
        String data = "  \" Chicane\"  junk here  , Love on the Run, Knight Rider, \"This field contains a comma, but it doesn't matter as the field is quoted\"";
        CsvReader reader = CsvReader.parse(data);
        Assert.assertTrue(reader.readRecord());
        Assert.assertEquals(" Chicane", reader.get(0));
        Assert.assertEquals("Love on the Run", reader.get(1));
        Assert.assertEquals("Knight Rider", reader.get(2));
        Assert.assertEquals("This field contains a comma, but it doesn't matter as the field is quoted", reader.get(3));
        Assert.assertEquals(0L, reader.getCurrentRecord());
        Assert.assertEquals(4, reader.getColumnCount());
        Assert.assertEquals("  \" Chicane\"  junk here  , Love on the Run, Knight Rider, \"This field contains a comma, but it doesn't matter as the field is quoted\"", reader.getRawRecord());
        Assert.assertFalse(reader.readRecord());
        reader.close();
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
default,122249.java,492,504
default,28532.java,394,405
----------------------------------------
    @Test
    public void test26() throws Exception {
        String data = "\"Mac \"The Knife\" Peter\",\"Boswell, Jr.\"";
        CsvReader reader = CsvReader.parse(data);
        Assert.assertTrue(reader.readRecord());
        Assert.assertEquals("Mac ", reader.get(0));
        Assert.assertEquals("Boswell, Jr.", reader.get(1));
        Assert.assertEquals(0L, reader.getCurrentRecord());
        Assert.assertEquals(2, reader.getColumnCount());
        Assert.assertEquals("\"Mac \"The Knife\" Peter\",\"Boswell, Jr.\"", reader.getRawRecord());
        Assert.assertFalse(reader.readRecord());
        reader.close();
    }
----------------------------------------
    @Test
    public void test20() throws Exception {
        String data = "1\n";
        CsvReader reader = CsvReader.parse(data);
        Assert.assertTrue(reader.readRecord());
        Assert.assertEquals("1", reader.get(0));
        Assert.assertEquals(0L, reader.getCurrentRecord());
        Assert.assertEquals(1, reader.getColumnCount());
        Assert.assertEquals("1", reader.getRawRecord());
        Assert.assertFalse(reader.readRecord());
        reader.close();
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
default,122249.java,589,601
default,114239.java,148,165
----------------------------------------
    @Test
    public void test32() throws Exception {
        String data = "\"Mac \"The Knife\" Peter\",\"Boswell, Jr.\"";
        CsvReader reader = CsvReader.parse(data);
        Assert.assertTrue(reader.readRecord());
        Assert.assertEquals("Mac ", reader.get(0));
        Assert.assertEquals("Boswell, Jr.", reader.get(1));
        Assert.assertEquals(0L, reader.getCurrentRecord());
        Assert.assertEquals(2, reader.getColumnCount());
        Assert.assertEquals("\"Mac \"The Knife\" Peter\",\"Boswell, Jr.\"", reader.getRawRecord());
        Assert.assertFalse(reader.readRecord());
        reader.close();
    }
----------------------------------------
    @Test
    public void test4() throws Exception {
        String data = "1\r2";
        CsvReader reader = CsvReader.parse(data);
        Assert.assertTrue(reader.readRecord());
        Assert.assertEquals("1", reader.get(0));
        Assert.assertEquals(0L, reader.getCurrentRecord());
        Assert.assertEquals(1, reader.getColumnCount());
        Assert.assertEquals("1", reader.getRawRecord());
        Assert.assertTrue(reader.readRecord());
        Assert.assertEquals("2", reader.get(0));
        Assert.assertEquals(1L, reader.getCurrentRecord());
        Assert.assertEquals(1, reader.getColumnCount());
        Assert.assertEquals("2", reader.getRawRecord());
        Assert.assertFalse(reader.readRecord());
        Assert.assertEquals("", reader.getRawRecord());
        reader.close();
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
default,122249.java,939,952
default,80510.java,247,261
----------------------------------------
    @Test
    public void test51() throws Exception {
        String data = "\"\\xfa\\u0afa\\xFA\\u0AFA\"";
        CsvReader reader = CsvReader.parse(data);
        reader.setUseTextQualifier(true);
        reader.setEscapeMode(CsvReader.ESCAPE_MODE_BACKSLASH);
        Assert.assertTrue(reader.readRecord());
        Assert.assertEquals("úૺúૺ", reader.get(0));
        Assert.assertEquals("\"\\xfa\\u0afa\\xFA\\u0AFA\"", reader.getRawRecord());
        Assert.assertEquals(0L, reader.getCurrentRecord());
        Assert.assertEquals(1, reader.getColumnCount());
        Assert.assertFalse(reader.readRecord());
        reader.close();
    }
----------------------------------------
    @Test
    public void test10() throws Exception {
        String data = "1\r2\n";
        CsvReader reader = CsvReader.parse(data);
        reader.setDelimiter('\r');
        Assert.assertTrue(reader.readRecord());
        Assert.assertEquals("1", reader.get(0));
        Assert.assertEquals("2", reader.get(1));
        Assert.assertEquals(0L, reader.getCurrentRecord());
        Assert.assertEquals(2, reader.getColumnCount());
        Assert.assertEquals("1\r2", reader.getRawRecord());
        Assert.assertFalse(reader.readRecord());
        Assert.assertEquals("", reader.getRawRecord());
        reader.close();
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
default,49259.java,394,402
default,112268.java,245,251
----------------------------------------
    private static void extractFile(InputStream in, File target) throws IOException {
        byte[] buf = new byte[8192];
        FileOutputStream out = new FileOutputStream(target);
        int c;
        while ((c = in.read(buf)) != -1) {
            out.write(buf, 0, c);
        }
        out.close();
    }
----------------------------------------
    private void copyFile(InputStream in, OutputStream out) throws IOException {
        byte[] buffer = new byte[4096];
        int bytesRead;
        while ((bytesRead = in.read(buffer)) != -1) out.write(buffer, 0, bytesRead);
        in.close();
        out.close();
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
default,55109.java,459,472
default,85127.java,440,452
----------------------------------------
    public void purge() throws IOException {
        DirWriter writer = fact.newDirWriter(dirFile, encodeParam());
        long t1 = System.currentTimeMillis();
        long len1 = dirFile.length();
        int count = 0;
        try {
            count = doPurge(writer);
        } finally {
            writer.close();
        }
        long t2 = System.currentTimeMillis();
        long len2 = dirFile.length();
        System.out.println(MessageFormat.format(messages.getString("purgeDone"), new Object[] { String.valueOf(count), String.valueOf((t2 - t1) / 1000f) }));
    }
----------------------------------------
    public void compact() throws IOException {
        DirWriter writer = fact.newDirWriter(dirFile, encodeParam());
        long t1 = System.currentTimeMillis();
        long len1 = dirFile.length();
        try {
            writer = writer.compact();
        } finally {
            writer.close();
        }
        long t2 = System.currentTimeMillis();
        long len2 = dirFile.length();
        System.out.println(MessageFormat.format(messages.getString("compactDone"), new Object[] { dirFile, String.valueOf(len1), String.valueOf(len2), String.valueOf((t2 - t1) / 1000f) }));
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
default,74234.java,30,44
default,98990.java,687,703
----------------------------------------
    public Configuration(URL url) {
        InputStream in = null;
        try {
            load(in = url.openStream());
        } catch (Exception e) {
            throw new RuntimeException("Could not load configuration from " + url, e);
        } finally {
            if (in != null) {
                try {
                    in.close();
                } catch (IOException ignore) {
                }
            }
        }
    }
----------------------------------------
    private static Properties loadConfig() {
        InputStream in = DcmDir.class.getResourceAsStream("dcmdir.cfg");
        try {
            Properties retval = new Properties();
            retval.load(in);
            return retval;
        } catch (Exception e) {
            throw new RuntimeException("Could not read dcmdir.cfg", e);
        } finally {
            if (in != null) {
                try {
                    in.close();
                } catch (IOException ignore) {
                }
            }
        }
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
default,72294.java,461,474
default,24621.java,440,452
----------------------------------------
    public void purge() throws IOException {
        DirWriter writer = fact.newDirWriter(dirFile, encodeParam());
        long t1 = System.currentTimeMillis();
        long len1 = dirFile.length();
        int count = 0;
        try {
            count = doPurge(writer);
        } finally {
            writer.close();
        }
        long t2 = System.currentTimeMillis();
        long len2 = dirFile.length();
        System.out.println(MessageFormat.format(messages.getString("purgeDone"), new Object[] { String.valueOf(count), String.valueOf((t2 - t1) / 1000f) }));
    }
----------------------------------------
    public void compact() throws IOException {
        DirWriter writer = fact.newDirWriter(dirFile, encodeParam());
        long t1 = System.currentTimeMillis();
        long len1 = dirFile.length();
        try {
            writer = writer.compact();
        } finally {
            writer.close();
        }
        long t2 = System.currentTimeMillis();
        long len2 = dirFile.length();
        System.out.println(MessageFormat.format(messages.getString("compactDone"), new Object[] { dirFile, String.valueOf(len1), String.valueOf(len2), String.valueOf((t2 - t1) / 1000f) }));
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
default,40654.java,199,206
default,3702.java,56,63
----------------------------------------
    private static void putKey(Properties cfg, String s) {
        int pos = s.indexOf(':');
        if (pos == -1) {
            cfg.put("key." + s, "");
        } else {
            cfg.put("key." + s.substring(0, pos), s.substring(pos + 1));
        }
    }
----------------------------------------
    private static void add(Configuration cfg, String s) {
        int pos = s.indexOf('=');
        if (pos == -1) {
            cfg.put(s, "");
        } else {
            cfg.put(s.substring(0, pos), s.substring(pos + 1));
        }
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
default,36204.java,126,133
default,11989.java,56,63
----------------------------------------
    private static void set(Configuration cfg, String s) {
        int pos = s.indexOf(':');
        if (pos == -1) {
            cfg.put("set." + s, "");
        } else {
            cfg.put("set." + s.substring(0, pos), s.substring(pos + 1));
        }
    }
----------------------------------------
    private static void add(Configuration cfg, String s) {
        int pos = s.indexOf('=');
        if (pos == -1) {
            cfg.put(s, "");
        } else {
            cfg.put(s.substring(0, pos), s.substring(pos + 1));
        }
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
default,23409.java,199,206
default,130693.java,56,63
----------------------------------------
    private static void putKey(Properties cfg, String s) {
        int pos = s.indexOf(':');
        if (pos == -1) {
            cfg.put("key." + s, "");
        } else {
            cfg.put("key." + s.substring(0, pos), s.substring(pos + 1));
        }
    }
----------------------------------------
    private static void add(Configuration cfg, String s) {
        int pos = s.indexOf('=');
        if (pos == -1) {
            cfg.put(s, "");
        } else {
            cfg.put(s.substring(0, pos), s.substring(pos + 1));
        }
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
default,59932.java,233,245
default,124923.java,775,787
----------------------------------------
    @Test
    public void test9() throws Exception {
        String data = "1\r\n";
        CsvReader reader = CsvReader.parse(data);
        Assert.assertTrue(reader.readRecord());
        Assert.assertEquals("1", reader.get(0));
        Assert.assertEquals(0L, reader.getCurrentRecord());
        Assert.assertEquals(1, reader.getColumnCount());
        Assert.assertEquals("1", reader.getRawRecord());
        Assert.assertFalse(reader.readRecord());
        Assert.assertEquals("", reader.getRawRecord());
        reader.close();
    }
----------------------------------------
    @Test
    public void test42() throws Exception {
        String data = "some \\stuff";
        CsvReader reader = CsvReader.parse(data);
        reader.setUseTextQualifier(false);
        reader.setEscapeMode(CsvReader.ESCAPE_MODE_BACKSLASH);
        Assert.assertTrue(reader.readRecord());
        Assert.assertEquals("some stuff", reader.get(0));
        Assert.assertEquals(0L, reader.getCurrentRecord());
        Assert.assertEquals(1, reader.getColumnCount());
        Assert.assertFalse(reader.readRecord());
        reader.close();
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
default,59932.java,761,773
default,59932.java,492,504
----------------------------------------
    @Test
    public void test41() throws Exception {
        String data = "double\\\\\\\\double backslash";
        CsvReader reader = CsvReader.parse(data);
        reader.setUseTextQualifier(false);
        reader.setEscapeMode(CsvReader.ESCAPE_MODE_BACKSLASH);
        Assert.assertTrue(reader.readRecord());
        Assert.assertEquals("double\\\\double backslash", reader.get(0));
        Assert.assertEquals(0L, reader.getCurrentRecord());
        Assert.assertEquals(1, reader.getColumnCount());
        Assert.assertFalse(reader.readRecord());
        reader.close();
    }
----------------------------------------
    @Test
    public void test26() throws Exception {
        String data = "\"Mac \"The Knife\" Peter\",\"Boswell, Jr.\"";
        CsvReader reader = CsvReader.parse(data);
        Assert.assertTrue(reader.readRecord());
        Assert.assertEquals("Mac ", reader.get(0));
        Assert.assertEquals("Boswell, Jr.", reader.get(1));
        Assert.assertEquals(0L, reader.getCurrentRecord());
        Assert.assertEquals(2, reader.getColumnCount());
        Assert.assertEquals("\"Mac \"The Knife\" Peter\",\"Boswell, Jr.\"", reader.getRawRecord());
        Assert.assertFalse(reader.readRecord());
        reader.close();
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
default,43190.java,648,665
default,49247.java,570,590
----------------------------------------
    private boolean doPurgeSeries(DirWriter w, DirRecord parent, int[] counter) throws IOException {
        boolean matchAll = true;
        LinkedList toRemove = new LinkedList();
        for (DirRecord rec = parent.getFirstChild(true); rec != null; rec = rec.getNextSibling(true)) {
            if (doPurgeInstances(w, rec, counter)) {
                toRemove.add(rec);
            } else {
                matchAll = false;
            }
        }
        if (matchAll) {
            return true;
        }
        for (Iterator it = toRemove.iterator(); it.hasNext(); ) {
            counter[0] += w.remove((DirRecord) it.next());
        }
        return false;
    }
----------------------------------------
    private boolean doRemoveInstances(DirWriter w, DirRecord parent, int[] counter, boolean delFiles) throws IOException {
        boolean matchAll = true;
        LinkedList toRemove = new LinkedList();
        for (DirRecord rec = parent.getFirstChild(true); rec != null; rec = rec.getNextSibling(true)) {
            if (sopInstUIDs.contains(rec.getRefSOPInstanceUID()) || matchFileIDs(rec.getRefFileIDs())) {
                if (delFiles) {
                    deleteRefFiles(w, rec, counter);
                }
                toRemove.add(rec);
            } else {
                matchAll = false;
            }
        }
        if (matchAll) {
            return true;
        }
        for (Iterator it = toRemove.iterator(); it.hasNext(); ) {
            counter[1] += w.remove((DirRecord) it.next());
        }
        return false;
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
default,125218.java,355,366
default,28532.java,939,952
----------------------------------------
    @Test
    public void test17() throws Exception {
        String data = "\"double\"\"\"\"double quotes\"";
        CsvReader reader = CsvReader.parse(data);
        Assert.assertTrue(reader.readRecord());
        Assert.assertEquals("double\"\"double quotes", reader.get(0));
        Assert.assertEquals(0L, reader.getCurrentRecord());
        Assert.assertEquals(1, reader.getColumnCount());
        Assert.assertEquals("\"double\"\"\"\"double quotes\"", reader.getRawRecord());
        Assert.assertFalse(reader.readRecord());
        reader.close();
    }
----------------------------------------
    @Test
    public void test51() throws Exception {
        String data = "\"\\xfa\\u0afa\\xFA\\u0AFA\"";
        CsvReader reader = CsvReader.parse(data);
        reader.setUseTextQualifier(true);
        reader.setEscapeMode(CsvReader.ESCAPE_MODE_BACKSLASH);
        Assert.assertTrue(reader.readRecord());
        Assert.assertEquals("úૺúૺ", reader.get(0));
        Assert.assertEquals("\"\\xfa\\u0afa\\xFA\\u0AFA\"", reader.getRawRecord());
        Assert.assertEquals(0L, reader.getCurrentRecord());
        Assert.assertEquals(1, reader.getColumnCount());
        Assert.assertFalse(reader.readRecord());
        reader.close();
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
default,125218.java,939,952
default,119807.java,407,422
----------------------------------------
    @Test
    public void test51() throws Exception {
        String data = "\"\\xfa\\u0afa\\xFA\\u0AFA\"";
        CsvReader reader = CsvReader.parse(data);
        reader.setUseTextQualifier(true);
        reader.setEscapeMode(CsvReader.ESCAPE_MODE_BACKSLASH);
        Assert.assertTrue(reader.readRecord());
        Assert.assertEquals("úૺúૺ", reader.get(0));
        Assert.assertEquals("\"\\xfa\\u0afa\\xFA\\u0AFA\"", reader.getRawRecord());
        Assert.assertEquals(0L, reader.getCurrentRecord());
        Assert.assertEquals(1, reader.getColumnCount());
        Assert.assertFalse(reader.readRecord());
        reader.close();
    }
----------------------------------------
    @Test
    public void test21() throws Exception {
        String data = "'bob said, ''Hey!''',2, 3 ";
        CsvReader reader = CsvReader.parse(data);
        reader.setTextQualifier('\'');
        Assert.assertTrue(reader.readRecord());
        Assert.assertEquals("bob said, 'Hey!'", reader.get(0));
        Assert.assertEquals("2", reader.get(1));
        Assert.assertEquals("3", reader.get(2));
        Assert.assertEquals(',', reader.getDelimiter());
        Assert.assertEquals(0L, reader.getCurrentRecord());
        Assert.assertEquals(3, reader.getColumnCount());
        Assert.assertEquals("'bob said, ''Hey!''',2, 3 ", reader.getRawRecord());
        Assert.assertFalse(reader.readRecord());
        reader.close();
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,2144047.java,216,221
selected,1596016.java,232,237
----------------------------------------
    private int[] getPage(int pte) {
        if (readableMemory[pte] != null) return readableMemory[pte];
        if (writableMemory[pte] != null) return writableMemory[pte];
        if (executableMemory[pte] != null) return executableMemory[pte];
        return null;
    }
----------------------------------------
    private byte[] getPage(int pte) {
        if (readableMemory[pte] != null) return readableMemory[pte];
        if (writableMemory[pte] != null) return writableMemory[pte];
        if (executableMemory[pte] != null) return executableMemory[pte];
        return null;
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
default,57168.java,648,665
default,135495.java,570,590
----------------------------------------
    private boolean doPurgeSeries(DirWriter w, DirRecord parent, int[] counter) throws IOException {
        boolean matchAll = true;
        LinkedList toRemove = new LinkedList();
        for (DirRecord rec = parent.getFirstChild(true); rec != null; rec = rec.getNextSibling(true)) {
            if (doPurgeInstances(w, rec, counter)) {
                toRemove.add(rec);
            } else {
                matchAll = false;
            }
        }
        if (matchAll) {
            return true;
        }
        for (Iterator it = toRemove.iterator(); it.hasNext(); ) {
            counter[0] += w.remove((DirRecord) it.next());
        }
        return false;
    }
----------------------------------------
    private boolean doRemoveInstances(DirWriter w, DirRecord parent, int[] counter, boolean delFiles) throws IOException {
        boolean matchAll = true;
        LinkedList toRemove = new LinkedList();
        for (DirRecord rec = parent.getFirstChild(true); rec != null; rec = rec.getNextSibling(true)) {
            if (sopInstUIDs.contains(rec.getRefSOPInstanceUID()) || matchFileIDs(rec.getRefFileIDs())) {
                if (delFiles) {
                    deleteRefFiles(w, rec, counter);
                }
                toRemove.add(rec);
            } else {
                matchAll = false;
            }
        }
        if (matchAll) {
            return true;
        }
        for (Iterator it = toRemove.iterator(); it.hasNext(); ) {
            counter[1] += w.remove((DirRecord) it.next());
        }
        return false;
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
default,106112.java,132,146
default,39035.java,276,288
----------------------------------------
    @Test
    public void test3() throws Exception {
        String data = ",";
        CsvReader reader = CsvReader.parse(data);
        Assert.assertTrue(reader.readRecord());
        Assert.assertEquals("", reader.get(0));
        Assert.assertEquals("", reader.get(1));
        Assert.assertEquals(',', reader.getDelimiter());
        Assert.assertEquals(0L, reader.getCurrentRecord());
        Assert.assertEquals(2, reader.getColumnCount());
        Assert.assertEquals(",", reader.getRawRecord());
        Assert.assertFalse(reader.readRecord());
        Assert.assertEquals("", reader.getRawRecord());
        reader.close();
    }
----------------------------------------
    @Test
    public void test12() throws Exception {
        String data = " 1";
        CsvReader reader = CsvReader.parse(data);
        reader.setTrimWhitespace(false);
        Assert.assertTrue(reader.readRecord());
        Assert.assertEquals(" 1", reader.get(0));
        Assert.assertEquals(0L, reader.getCurrentRecord());
        Assert.assertEquals(1, reader.getColumnCount());
        Assert.assertEquals(" 1", reader.getRawRecord());
        Assert.assertFalse(reader.readRecord());
        reader.close();
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
default,106112.java,775,787
default,93943.java,743,759
----------------------------------------
    @Test
    public void test42() throws Exception {
        String data = "some \\stuff";
        CsvReader reader = CsvReader.parse(data);
        reader.setUseTextQualifier(false);
        reader.setEscapeMode(CsvReader.ESCAPE_MODE_BACKSLASH);
        Assert.assertTrue(reader.readRecord());
        Assert.assertEquals("some stuff", reader.get(0));
        Assert.assertEquals(0L, reader.getCurrentRecord());
        Assert.assertEquals(1, reader.getColumnCount());
        Assert.assertFalse(reader.readRecord());
        reader.close();
    }
----------------------------------------
    @Test
    public void test40() throws Exception {
        String data = "Chicane, Love on the Run, Knight Rider, This field contains a comma\\, but it doesn't matter as the delimiter is escaped";
        CsvReader reader = CsvReader.parse(data);
        reader.setUseTextQualifier(false);
        reader.setEscapeMode(CsvReader.ESCAPE_MODE_BACKSLASH);
        Assert.assertTrue(reader.readRecord());
        Assert.assertEquals("Chicane", reader.get(0));
        Assert.assertEquals("Love on the Run", reader.get(1));
        Assert.assertEquals("Knight Rider", reader.get(2));
        Assert.assertEquals("This field contains a comma, but it doesn't matter as the delimiter is escaped", reader.get(3));
        Assert.assertEquals(0L, reader.getCurrentRecord());
        Assert.assertEquals(4, reader.getColumnCount());
        Assert.assertEquals("Chicane, Love on the Run, Knight Rider, This field contains a comma\\, but it doesn't matter as the delimiter is escaped", reader.getRawRecord());
        Assert.assertFalse(reader.readRecord());
        reader.close();
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
default,106112.java,909,922
default,5657.java,276,288
----------------------------------------
    @Test
    public void test49() throws Exception {
        String data = "\"\\n\\r\\t\\b\\f\\e\\v\\a\\z\\d065\\o101\\101\\x41\\u0041\"";
        CsvReader reader = CsvReader.parse(data);
        reader.setUseTextQualifier(true);
        reader.setEscapeMode(CsvReader.ESCAPE_MODE_BACKSLASH);
        Assert.assertTrue(reader.readRecord());
        Assert.assertEquals("\n\r\t\b\fzAAAAA", reader.get(0));
        Assert.assertEquals("\"\\n\\r\\t\\b\\f\\e\\v\\a\\z\\d065\\o101\\101\\x41\\u0041\"", reader.getRawRecord());
        Assert.assertEquals(0L, reader.getCurrentRecord());
        Assert.assertEquals(1, reader.getColumnCount());
        Assert.assertFalse(reader.readRecord());
        reader.close();
    }
----------------------------------------
    @Test
    public void test12() throws Exception {
        String data = " 1";
        CsvReader reader = CsvReader.parse(data);
        reader.setTrimWhitespace(false);
        Assert.assertTrue(reader.readRecord());
        Assert.assertEquals(" 1", reader.get(0));
        Assert.assertEquals(0L, reader.getCurrentRecord());
        Assert.assertEquals(1, reader.getColumnCount());
        Assert.assertEquals(" 1", reader.getRawRecord());
        Assert.assertFalse(reader.readRecord());
        reader.close();
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
default,106112.java,1531,1546
default,28532.java,1155,1170
----------------------------------------
    @Test
    public void test124() throws Exception {
        byte[] buffer;
        ByteArrayOutputStream stream = new ByteArrayOutputStream();
        CsvWriter writer = new CsvWriter(stream, ',', Charset.forName("ISO-8859-1"));
        writer.setRecordDelimiter(';');
        writer.setUseTextQualifier(false);
        writer.setEscapeMode(CsvWriter.ESCAPE_MODE_BACKSLASH);
        writer.write("1;2");
        writer.endRecord();
        writer.close();
        buffer = stream.toByteArray();
        stream.close();
        String data = Charset.forName("ISO-8859-1").decode(ByteBuffer.wrap(buffer)).toString();
        Assert.assertEquals("1\\;2;", data);
    }
----------------------------------------
    @Test
    public void test75() throws Exception {
        byte[] buffer;
        ByteArrayOutputStream stream = new ByteArrayOutputStream();
        CsvWriter writer = new CsvWriter(stream, ',', Charset.forName("ISO-8859-1"));
        writer.write("1");
        writer.endRecord();
        writer.writeComment("blah");
        writer.write("2");
        writer.endRecord();
        writer.close();
        buffer = stream.toByteArray();
        stream.close();
        String data = Charset.forName("ISO-8859-1").decode(ByteBuffer.wrap(buffer)).toString();
        Assert.assertEquals("1\r\n#blah\r\n2\r\n", data);
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
default,106112.java,1715,1723
default,5657.java,545,557
----------------------------------------
    @Test
    public void test144() throws Exception {
        CsvReader reader = CsvReader.parse("\"" + generateString('a', 100000) + "\"");
        Assert.assertTrue(reader.readRecord());
        Assert.assertEquals(generateString('a', 100000), reader.get(0));
        Assert.assertEquals("\"" + generateString('a', 100000) + "\"", reader.getRawRecord());
        Assert.assertFalse(reader.readRecord());
        reader.close();
    }
----------------------------------------
    @Test
    public void test29() throws Exception {
        String data = "\"double\\\"\\\"double quotes\"";
        CsvReader reader = CsvReader.parse(data);
        reader.setEscapeMode(CsvReader.ESCAPE_MODE_BACKSLASH);
        Assert.assertTrue(reader.readRecord());
        Assert.assertEquals("double\"\"double quotes", reader.get(0));
        Assert.assertEquals(0L, reader.getCurrentRecord());
        Assert.assertEquals(1, reader.getColumnCount());
        Assert.assertEquals("\"double\\\"\\\"double quotes\"", reader.getRawRecord());
        Assert.assertFalse(reader.readRecord());
        reader.close();
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
default,80832.java,233,245
default,80510.java,320,331
----------------------------------------
    @Test
    public void test9() throws Exception {
        String data = "1\r\n";
        CsvReader reader = CsvReader.parse(data);
        Assert.assertTrue(reader.readRecord());
        Assert.assertEquals("1", reader.get(0));
        Assert.assertEquals(0L, reader.getCurrentRecord());
        Assert.assertEquals(1, reader.getColumnCount());
        Assert.assertEquals("1", reader.getRawRecord());
        Assert.assertFalse(reader.readRecord());
        Assert.assertEquals("", reader.getRawRecord());
        reader.close();
    }
----------------------------------------
    @Test
    public void test15() throws Exception {
        String data = "\"data \r\n here\"";
        CsvReader reader = CsvReader.parse(data);
        Assert.assertTrue(reader.readRecord());
        Assert.assertEquals("data \r\n here", reader.get(0));
        Assert.assertEquals(0L, reader.getCurrentRecord());
        Assert.assertEquals(1, reader.getColumnCount());
        Assert.assertEquals("\"data \r\n here\"", reader.getRawRecord());
        Assert.assertFalse(reader.readRecord());
        reader.close();
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
default,80832.java,233,245
default,114239.java,381,392
----------------------------------------
    @Test
    public void test9() throws Exception {
        String data = "1\r\n";
        CsvReader reader = CsvReader.parse(data);
        Assert.assertTrue(reader.readRecord());
        Assert.assertEquals("1", reader.get(0));
        Assert.assertEquals(0L, reader.getCurrentRecord());
        Assert.assertEquals(1, reader.getColumnCount());
        Assert.assertEquals("1", reader.getRawRecord());
        Assert.assertFalse(reader.readRecord());
        Assert.assertEquals("", reader.getRawRecord());
        reader.close();
    }
----------------------------------------
    @Test
    public void test19() throws Exception {
        String data = "1\r\n";
        CsvReader reader = CsvReader.parse(data);
        Assert.assertTrue(reader.readRecord());
        Assert.assertEquals("1", reader.get(0));
        Assert.assertEquals(0L, reader.getCurrentRecord());
        Assert.assertEquals(1, reader.getColumnCount());
        Assert.assertEquals("1", reader.getRawRecord());
        Assert.assertFalse(reader.readRecord());
        reader.close();
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
default,80832.java,381,392
default,114239.java,233,245
----------------------------------------
    @Test
    public void test19() throws Exception {
        String data = "1\r\n";
        CsvReader reader = CsvReader.parse(data);
        Assert.assertTrue(reader.readRecord());
        Assert.assertEquals("1", reader.get(0));
        Assert.assertEquals(0L, reader.getCurrentRecord());
        Assert.assertEquals(1, reader.getColumnCount());
        Assert.assertEquals("1", reader.getRawRecord());
        Assert.assertFalse(reader.readRecord());
        reader.close();
    }
----------------------------------------
    @Test
    public void test9() throws Exception {
        String data = "1\r\n";
        CsvReader reader = CsvReader.parse(data);
        Assert.assertTrue(reader.readRecord());
        Assert.assertEquals("1", reader.get(0));
        Assert.assertEquals(0L, reader.getCurrentRecord());
        Assert.assertEquals(1, reader.getColumnCount());
        Assert.assertEquals("1", reader.getRawRecord());
        Assert.assertFalse(reader.readRecord());
        Assert.assertEquals("", reader.getRawRecord());
        reader.close();
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
default,80832.java,775,787
default,28532.java,909,922
----------------------------------------
    @Test
    public void test42() throws Exception {
        String data = "some \\stuff";
        CsvReader reader = CsvReader.parse(data);
        reader.setUseTextQualifier(false);
        reader.setEscapeMode(CsvReader.ESCAPE_MODE_BACKSLASH);
        Assert.assertTrue(reader.readRecord());
        Assert.assertEquals("some stuff", reader.get(0));
        Assert.assertEquals(0L, reader.getCurrentRecord());
        Assert.assertEquals(1, reader.getColumnCount());
        Assert.assertFalse(reader.readRecord());
        reader.close();
    }
----------------------------------------
    @Test
    public void test49() throws Exception {
        String data = "\"\\n\\r\\t\\b\\f\\e\\v\\a\\z\\d065\\o101\\101\\x41\\u0041\"";
        CsvReader reader = CsvReader.parse(data);
        reader.setUseTextQualifier(true);
        reader.setEscapeMode(CsvReader.ESCAPE_MODE_BACKSLASH);
        Assert.assertTrue(reader.readRecord());
        Assert.assertEquals("\n\r\t\b\fzAAAAA", reader.get(0));
        Assert.assertEquals("\"\\n\\r\\t\\b\\f\\e\\v\\a\\z\\d065\\o101\\101\\x41\\u0041\"", reader.getRawRecord());
        Assert.assertEquals(0L, reader.getCurrentRecord());
        Assert.assertEquals(1, reader.getColumnCount());
        Assert.assertFalse(reader.readRecord());
        reader.close();
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
default,80832.java,924,937
default,93943.java,655,667
----------------------------------------
    @Test
    public void test50() throws Exception {
        String data = "\\n\\r\\t\\b\\f\\e\\v\\a\\z\\d065\\o101\\101\\x41\\u0041";
        CsvReader reader = CsvReader.parse(data);
        reader.setUseTextQualifier(false);
        reader.setEscapeMode(CsvReader.ESCAPE_MODE_BACKSLASH);
        Assert.assertTrue(reader.readRecord());
        Assert.assertEquals("\n\r\t\b\fzAAAAA", reader.get(0));
        Assert.assertEquals("\\n\\r\\t\\b\\f\\e\\v\\a\\z\\d065\\o101\\101\\x41\\u0041", reader.getRawRecord());
        Assert.assertEquals(0L, reader.getCurrentRecord());
        Assert.assertEquals(1, reader.getColumnCount());
        Assert.assertFalse(reader.readRecord());
        reader.close();
    }
----------------------------------------
    @Test
    public void test36() throws Exception {
        String data = "\"some \\stuff\"";
        CsvReader reader = CsvReader.parse(data);
        reader.setEscapeMode(CsvReader.ESCAPE_MODE_BACKSLASH);
        Assert.assertTrue(reader.readRecord());
        Assert.assertEquals("some stuff", reader.get(0));
        Assert.assertEquals(0L, reader.getCurrentRecord());
        Assert.assertEquals(1, reader.getColumnCount());
        Assert.assertEquals("\"some \\stuff\"", reader.getRawRecord());
        Assert.assertFalse(reader.readRecord());
        reader.close();
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
default,80832.java,939,952
default,80510.java,1747,1760
----------------------------------------
    @Test
    public void test51() throws Exception {
        String data = "\"\\xfa\\u0afa\\xFA\\u0AFA\"";
        CsvReader reader = CsvReader.parse(data);
        reader.setUseTextQualifier(true);
        reader.setEscapeMode(CsvReader.ESCAPE_MODE_BACKSLASH);
        Assert.assertTrue(reader.readRecord());
        Assert.assertEquals("úૺúૺ", reader.get(0));
        Assert.assertEquals("\"\\xfa\\u0afa\\xFA\\u0AFA\"", reader.getRawRecord());
        Assert.assertEquals(0L, reader.getCurrentRecord());
        Assert.assertEquals(1, reader.getColumnCount());
        Assert.assertFalse(reader.readRecord());
        reader.close();
    }
----------------------------------------
    @Test
    public void test147() throws Exception {
        StringBuilder data = new StringBuilder(20000);
        for (int i = 0; i < 10000; i++) {
            data.append("\\b");
        }
        CsvReader reader = CsvReader.parse(data.toString());
        reader.setUseTextQualifier(false);
        reader.setEscapeMode(CsvReader.ESCAPE_MODE_BACKSLASH);
        Assert.assertTrue(reader.readRecord());
        Assert.assertEquals(generateString('\b', 10000), reader.get(0));
        Assert.assertFalse(reader.readRecord());
        reader.close();
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
default,62111.java,629,646
default,118405.java,570,590
----------------------------------------
    private boolean doPurgeStudy(DirWriter w, DirRecord parent, int[] counter) throws IOException {
        boolean matchAll = true;
        LinkedList toRemove = new LinkedList();
        for (DirRecord rec = parent.getFirstChild(true); rec != null; rec = rec.getNextSibling(true)) {
            if (doPurgeSeries(w, rec, counter)) {
                toRemove.add(rec);
            } else {
                matchAll = false;
            }
        }
        if (matchAll) {
            return true;
        }
        for (Iterator it = toRemove.iterator(); it.hasNext(); ) {
            counter[0] += w.remove((DirRecord) it.next());
        }
        return false;
    }
----------------------------------------
    private boolean doRemoveInstances(DirWriter w, DirRecord parent, int[] counter, boolean delFiles) throws IOException {
        boolean matchAll = true;
        LinkedList toRemove = new LinkedList();
        for (DirRecord rec = parent.getFirstChild(true); rec != null; rec = rec.getNextSibling(true)) {
            if (sopInstUIDs.contains(rec.getRefSOPInstanceUID()) || matchFileIDs(rec.getRefFileIDs())) {
                if (delFiles) {
                    deleteRefFiles(w, rec, counter);
                }
                toRemove.add(rec);
            } else {
                matchAll = false;
            }
        }
        if (matchAll) {
            return true;
        }
        for (Iterator it = toRemove.iterator(); it.hasNext(); ) {
            counter[1] += w.remove((DirRecord) it.next());
        }
        return false;
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
default,112878.java,1047,1060
default,32033.java,772,785
----------------------------------------
    public boolean validateVersion_0_2() throws Exception {
        String testRoot = TEST_Version_0_2;
        boolean test = true;
        sReferencePS.clear();
        sReferencePS.set("body", "bodyCheck");
        sReferencePS.set("init", "initCheck");
        sReferencePS.set("declare", "declareCheck");
        sTestPS.load(new File(getTestFolder(), PREFIX_RESULT + testRoot + DOT + TXT));
        test = sTestPS.contains(sReferencePS) && test;
        if (!test) {
            displayPropertySets(sTestPS, sReferencePS);
        }
        return test;
    }
----------------------------------------
    public boolean validateMethodGetThirdUserArg() throws Exception {
        String testRoot = TEST_MethodGetThirdUserArg;
        boolean test = true;
        sReferencePS.clear();
        sReferencePS.set("ua1", "ua1");
        sReferencePS.set("ua2", "ua2");
        sReferencePS.set("ua3", "ua3");
        sTestPS.load(new File(getTestFolder(), PREFIX_RESULT + testRoot + DOT + TXT));
        test = sTestPS.equals(sReferencePS) && test;
        if (!test) {
            displayPropertySets(sTestPS, sReferencePS);
        }
        return test;
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
default,22931.java,459,472
default,103146.java,493,507
----------------------------------------
    public void purge() throws IOException {
        DirWriter writer = fact.newDirWriter(dirFile, encodeParam());
        long t1 = System.currentTimeMillis();
        long len1 = dirFile.length();
        int count = 0;
        try {
            count = doPurge(writer);
        } finally {
            writer.close();
        }
        long t2 = System.currentTimeMillis();
        long len2 = dirFile.length();
        System.out.println(MessageFormat.format(messages.getString("purgeDone"), new Object[] { String.valueOf(count), String.valueOf((t2 - t1) / 1000f) }));
    }
----------------------------------------
    public void remove(String[] args, int off, boolean delFiles) throws IOException {
        long t1 = System.currentTimeMillis();
        int[] counter = new int[2];
        DirWriter w = fact.newDirWriter(dirFile, encodeParam());
        try {
            for (int i = off; i < args.length; ++i) {
                addFileIDs(w, new File(args[i]));
            }
            doRemove(w, counter, delFiles);
        } finally {
            w.close();
        }
        long t2 = System.currentTimeMillis();
        System.out.println(MessageFormat.format(messages.getString("removeDone"), new Object[] { String.valueOf(counter[1]), String.valueOf(counter[0]), String.valueOf((t2 - t1) / 1000f) }));
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
default,105999.java,208,217
default,5385.java,165,172
----------------------------------------
    protected void browseFile(JTextField dest) {
        if (fileChooser == null) {
            fileChooser = new JFileChooser();
            fileChooser.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);
        }
        if (fileChooser.showOpenDialog(frame) == JFileChooser.APPROVE_OPTION) {
            File f = fileChooser.getSelectedFile();
            if (f != null) dest.setText(f.getPath());
        }
    }
----------------------------------------
            public void actionPerformed(ActionEvent event) {
                int result = XMLFilechooser.showOpenDialog(null);
                if (result == JFileChooser.APPROVE_OPTION) {
                    IncludeInFilename = XMLFilechooser.getSelectedFile().getPath();
                    IncludeInFilenamelist = IncludeInFilenamelist + IncludeInFilename + ";";
                    IncludeFileNameField.setText(IncludeInFilenamelist);
                }
            }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
default,23401.java,126,133
default,71089.java,56,63
----------------------------------------
    private static void set(Configuration cfg, String s) {
        int pos = s.indexOf(':');
        if (pos == -1) {
            cfg.put("set." + s, "");
        } else {
            cfg.put("set." + s.substring(0, pos), s.substring(pos + 1));
        }
    }
----------------------------------------
    private static void add(Configuration cfg, String s) {
        int pos = s.indexOf('=');
        if (pos == -1) {
            cfg.put(s, "");
        } else {
            cfg.put(s.substring(0, pos), s.substring(pos + 1));
        }
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
default,47997.java,537,547
default,94364.java,509,525
----------------------------------------
    public boolean pcontinueToReturn(int thread, int printMode) {
        int addr = reg.hardwareIP();
        boolean stillrunning;
        breakpoint bpSaved = bpset.lookup(addr);
        threadstep.setLinkBreakpoint(thread);
        bpset.clearBreakpoint(bpSaved);
        stillrunning = continueCheckingForSignal(thread, printMode, false);
        threadstep.clearStepBreakpoint(thread);
        if (stillrunning && bpSaved != null) bpset.setBreakpoint(bpSaved);
        return stillrunning;
    }
----------------------------------------
    public boolean pcontinue(int thread, int printMode, boolean allThreads) {
        int addr = reg.hardwareIP();
        boolean over_branch = false;
        boolean stillrunning;
        boolean skip_prolog = false;
        breakpoint bpSaved = bpset.lookup(addr);
        if (bpSaved != null) {
            System.out.println("pcontinue: saving current breakpoint " + VM.intAsHexString(addr));
            threadstep.setStepBreakpoint(thread, over_branch, skip_prolog);
            bpset.clearBreakpoint(bpSaved);
            stillrunning = continueCheckingForSignal(thread, PRINTNONE, false);
            threadstep.clearStepBreakpoint(thread);
            bpset.setBreakpoint(bpSaved);
        }
        stillrunning = continueCheckingForSignal(thread, printMode, allThreads);
        return stillrunning;
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
default,62853.java,205,217
default,39035.java,743,759
----------------------------------------
    @Test
    public void test7() throws Exception {
        String data = "1\r";
        CsvReader reader = CsvReader.parse(data);
        Assert.assertTrue(reader.readRecord());
        Assert.assertEquals("1", reader.get(0));
        Assert.assertEquals(0L, reader.getCurrentRecord());
        Assert.assertEquals(1, reader.getColumnCount());
        Assert.assertEquals("1", reader.getRawRecord());
        Assert.assertFalse(reader.readRecord());
        Assert.assertEquals("", reader.getRawRecord());
        reader.close();
    }
----------------------------------------
    @Test
    public void test40() throws Exception {
        String data = "Chicane, Love on the Run, Knight Rider, This field contains a comma\\, but it doesn't matter as the delimiter is escaped";
        CsvReader reader = CsvReader.parse(data);
        reader.setUseTextQualifier(false);
        reader.setEscapeMode(CsvReader.ESCAPE_MODE_BACKSLASH);
        Assert.assertTrue(reader.readRecord());
        Assert.assertEquals("Chicane", reader.get(0));
        Assert.assertEquals("Love on the Run", reader.get(1));
        Assert.assertEquals("Knight Rider", reader.get(2));
        Assert.assertEquals("This field contains a comma, but it doesn't matter as the delimiter is escaped", reader.get(3));
        Assert.assertEquals(0L, reader.getCurrentRecord());
        Assert.assertEquals(4, reader.getColumnCount());
        Assert.assertEquals("Chicane, Love on the Run, Knight Rider, This field contains a comma\\, but it doesn't matter as the delimiter is escaped", reader.getRawRecord());
        Assert.assertFalse(reader.readRecord());
        reader.close();
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
default,62853.java,924,937
default,39035.java,233,245
----------------------------------------
    @Test
    public void test50() throws Exception {
        String data = "\\n\\r\\t\\b\\f\\e\\v\\a\\z\\d065\\o101\\101\\x41\\u0041";
        CsvReader reader = CsvReader.parse(data);
        reader.setUseTextQualifier(false);
        reader.setEscapeMode(CsvReader.ESCAPE_MODE_BACKSLASH);
        Assert.assertTrue(reader.readRecord());
        Assert.assertEquals("\n\r\t\b\fzAAAAA", reader.get(0));
        Assert.assertEquals("\\n\\r\\t\\b\\f\\e\\v\\a\\z\\d065\\o101\\101\\x41\\u0041", reader.getRawRecord());
        Assert.assertEquals(0L, reader.getCurrentRecord());
        Assert.assertEquals(1, reader.getColumnCount());
        Assert.assertFalse(reader.readRecord());
        reader.close();
    }
----------------------------------------
    @Test
    public void test9() throws Exception {
        String data = "1\r\n";
        CsvReader reader = CsvReader.parse(data);
        Assert.assertTrue(reader.readRecord());
        Assert.assertEquals("1", reader.get(0));
        Assert.assertEquals(0L, reader.getCurrentRecord());
        Assert.assertEquals(1, reader.getColumnCount());
        Assert.assertEquals("1", reader.getRawRecord());
        Assert.assertFalse(reader.readRecord());
        Assert.assertEquals("", reader.getRawRecord());
        reader.close();
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
default,81841.java,799,805
default,58393.java,675,688
----------------------------------------
    public static String[] cloneString(String strArray[]) {
        if (strArray == null) return (null);
        int lth = strArray.length;
        String sRtn[] = new String[lth];
        for (int i = 0; i < lth; i++) sRtn[i] = strArray[i];
        return (sRtn);
    }
----------------------------------------
    public void _setFileNameRoots(String[] rFileNameRoots) {
        if (null == rFileNameRoots) {
            return;
        }
        String[] roots = (String[]) rFileNameRoots.clone();
        int numRoots = roots.length;
        for (int rootI = 0; rootI < numRoots; rootI++) {
            if (null == roots[rootI]) {
                roots[rootI] = "";
            }
        }
        writer__iFileNameRoots = roots;
        writer__iNumFiles = numRoots;
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
default,11754.java,219,231
default,80832.java,247,261
----------------------------------------
    @Test
    public void test8() throws Exception {
        String data = "1\n";
        CsvReader reader = CsvReader.parse(data);
        Assert.assertTrue(reader.readRecord());
        Assert.assertEquals("1", reader.get(0));
        Assert.assertEquals(0L, reader.getCurrentRecord());
        Assert.assertEquals(1, reader.getColumnCount());
        Assert.assertEquals("1", reader.getRawRecord());
        Assert.assertFalse(reader.readRecord());
        Assert.assertEquals("", reader.getRawRecord());
        reader.close();
    }
----------------------------------------
    @Test
    public void test10() throws Exception {
        String data = "1\r2\n";
        CsvReader reader = CsvReader.parse(data);
        reader.setDelimiter('\r');
        Assert.assertTrue(reader.readRecord());
        Assert.assertEquals("1", reader.get(0));
        Assert.assertEquals("2", reader.get(1));
        Assert.assertEquals(0L, reader.getCurrentRecord());
        Assert.assertEquals(2, reader.getColumnCount());
        Assert.assertEquals("1\r2", reader.getRawRecord());
        Assert.assertFalse(reader.readRecord());
        Assert.assertEquals("", reader.getRawRecord());
        reader.close();
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
default,11754.java,394,405
default,106112.java,803,816
----------------------------------------
    @Test
    public void test20() throws Exception {
        String data = "1\n";
        CsvReader reader = CsvReader.parse(data);
        Assert.assertTrue(reader.readRecord());
        Assert.assertEquals("1", reader.get(0));
        Assert.assertEquals(0L, reader.getCurrentRecord());
        Assert.assertEquals(1, reader.getColumnCount());
        Assert.assertEquals("1", reader.getRawRecord());
        Assert.assertFalse(reader.readRecord());
        reader.close();
    }
----------------------------------------
    @Test
    public void test44() throws Exception {
        String data = "line 1\\nline 2,line 1\\\nline 2";
        CsvReader reader = CsvReader.parse(data);
        reader.setUseTextQualifier(false);
        reader.setEscapeMode(CsvReader.ESCAPE_MODE_BACKSLASH);
        Assert.assertTrue(reader.readRecord());
        Assert.assertEquals("line 1\nline 2", reader.get(0));
        Assert.assertEquals("line 1\nline 2", reader.get(1));
        Assert.assertEquals(0L, reader.getCurrentRecord());
        Assert.assertEquals(2, reader.getColumnCount());
        Assert.assertFalse(reader.readRecord());
        reader.close();
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
default,11754.java,247,261
default,80510.java,368,379
----------------------------------------
    @Test
    public void test10() throws Exception {
        String data = "1\r2\n";
        CsvReader reader = CsvReader.parse(data);
        reader.setDelimiter('\r');
        Assert.assertTrue(reader.readRecord());
        Assert.assertEquals("1", reader.get(0));
        Assert.assertEquals("2", reader.get(1));
        Assert.assertEquals(0L, reader.getCurrentRecord());
        Assert.assertEquals(2, reader.getColumnCount());
        Assert.assertEquals("1\r2", reader.getRawRecord());
        Assert.assertFalse(reader.readRecord());
        Assert.assertEquals("", reader.getRawRecord());
        reader.close();
    }
----------------------------------------
    @Test
    public void test18() throws Exception {
        String data = "1\r";
        CsvReader reader = CsvReader.parse(data);
        Assert.assertTrue(reader.readRecord());
        Assert.assertEquals("1", reader.get(0));
        Assert.assertEquals(0L, reader.getCurrentRecord());
        Assert.assertEquals(1, reader.getColumnCount());
        Assert.assertEquals("1", reader.getRawRecord());
        Assert.assertFalse(reader.readRecord());
        reader.close();
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
default,11754.java,492,504
default,80832.java,263,274
----------------------------------------
    @Test
    public void test26() throws Exception {
        String data = "\"Mac \"The Knife\" Peter\",\"Boswell, Jr.\"";
        CsvReader reader = CsvReader.parse(data);
        Assert.assertTrue(reader.readRecord());
        Assert.assertEquals("Mac ", reader.get(0));
        Assert.assertEquals("Boswell, Jr.", reader.get(1));
        Assert.assertEquals(0L, reader.getCurrentRecord());
        Assert.assertEquals(2, reader.getColumnCount());
        Assert.assertEquals("\"Mac \"The Knife\" Peter\",\"Boswell, Jr.\"", reader.getRawRecord());
        Assert.assertFalse(reader.readRecord());
        reader.close();
    }
----------------------------------------
    @Test
    public void test11() throws Exception {
        String data = "\"July 4th, 2005\"";
        CsvReader reader = CsvReader.parse(data);
        Assert.assertTrue(reader.readRecord());
        Assert.assertEquals("July 4th, 2005", reader.get(0));
        Assert.assertEquals(0L, reader.getCurrentRecord());
        Assert.assertEquals(1, reader.getColumnCount());
        Assert.assertEquals("\"July 4th, 2005\"", reader.getRawRecord());
        Assert.assertFalse(reader.readRecord());
        reader.close();
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
default,11754.java,939,952
default,93943.java,407,422
----------------------------------------
    @Test
    public void test51() throws Exception {
        String data = "\"\\xfa\\u0afa\\xFA\\u0AFA\"";
        CsvReader reader = CsvReader.parse(data);
        reader.setUseTextQualifier(true);
        reader.setEscapeMode(CsvReader.ESCAPE_MODE_BACKSLASH);
        Assert.assertTrue(reader.readRecord());
        Assert.assertEquals("úૺúૺ", reader.get(0));
        Assert.assertEquals("\"\\xfa\\u0afa\\xFA\\u0AFA\"", reader.getRawRecord());
        Assert.assertEquals(0L, reader.getCurrentRecord());
        Assert.assertEquals(1, reader.getColumnCount());
        Assert.assertFalse(reader.readRecord());
        reader.close();
    }
----------------------------------------
    @Test
    public void test21() throws Exception {
        String data = "'bob said, ''Hey!''',2, 3 ";
        CsvReader reader = CsvReader.parse(data);
        reader.setTextQualifier('\'');
        Assert.assertTrue(reader.readRecord());
        Assert.assertEquals("bob said, 'Hey!'", reader.get(0));
        Assert.assertEquals("2", reader.get(1));
        Assert.assertEquals("3", reader.get(2));
        Assert.assertEquals(',', reader.getDelimiter());
        Assert.assertEquals(0L, reader.getCurrentRecord());
        Assert.assertEquals(3, reader.getColumnCount());
        Assert.assertEquals("'bob said, ''Hey!''',2, 3 ", reader.getRawRecord());
        Assert.assertFalse(reader.readRecord());
        reader.close();
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
default,11754.java,1567,1580
default,93943.java,1511,1529
----------------------------------------
    @Test
    public void test132() throws Exception {
        byte[] buffer;
        ByteArrayOutputStream stream = new ByteArrayOutputStream();
        CsvWriter writer = new CsvWriter(stream, ',', Charset.forName("ISO-8859-1"));
        writer.setEscapeMode(CsvWriter.ESCAPE_MODE_BACKSLASH);
        writer.write("1,\\2");
        writer.endRecord();
        writer.close();
        buffer = stream.toByteArray();
        stream.close();
        String data = Charset.forName("ISO-8859-1").decode(ByteBuffer.wrap(buffer)).toString();
        Assert.assertEquals("\"1,\\\\2\"\r\n", data);
    }
----------------------------------------
    @Test
    public void test123() throws Exception {
        byte[] buffer;
        ByteArrayOutputStream stream = new ByteArrayOutputStream();
        CsvWriter writer = new CsvWriter(stream, ',', Charset.forName("ISO-8859-1"));
        writer.write("#123");
        writer.endRecord();
        writer.setEscapeMode(CsvWriter.ESCAPE_MODE_BACKSLASH);
        writer.setUseTextQualifier(false);
        writer.write("#123");
        writer.endRecord();
        writer.write("#");
        writer.endRecord();
        writer.close();
        buffer = stream.toByteArray();
        stream.close();
        String data = Charset.forName("ISO-8859-1").decode(ByteBuffer.wrap(buffer)).toString();
        Assert.assertEquals("\"#123\"\r\n\\#123\r\n\\#\r\n", data);
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
default,73729.java,219,231
default,80510.java,355,366
----------------------------------------
    @Test
    public void test8() throws Exception {
        String data = "1\n";
        CsvReader reader = CsvReader.parse(data);
        Assert.assertTrue(reader.readRecord());
        Assert.assertEquals("1", reader.get(0));
        Assert.assertEquals(0L, reader.getCurrentRecord());
        Assert.assertEquals(1, reader.getColumnCount());
        Assert.assertEquals("1", reader.getRawRecord());
        Assert.assertFalse(reader.readRecord());
        Assert.assertEquals("", reader.getRawRecord());
        reader.close();
    }
----------------------------------------
    @Test
    public void test17() throws Exception {
        String data = "\"double\"\"\"\"double quotes\"";
        CsvReader reader = CsvReader.parse(data);
        Assert.assertTrue(reader.readRecord());
        Assert.assertEquals("double\"\"double quotes", reader.get(0));
        Assert.assertEquals(0L, reader.getCurrentRecord());
        Assert.assertEquals(1, reader.getColumnCount());
        Assert.assertEquals("\"double\"\"\"\"double quotes\"", reader.getRawRecord());
        Assert.assertFalse(reader.readRecord());
        reader.close();
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
default,73729.java,276,288
default,124923.java,1735,1745
----------------------------------------
    @Test
    public void test12() throws Exception {
        String data = " 1";
        CsvReader reader = CsvReader.parse(data);
        reader.setTrimWhitespace(false);
        Assert.assertTrue(reader.readRecord());
        Assert.assertEquals(" 1", reader.get(0));
        Assert.assertEquals(0L, reader.getCurrentRecord());
        Assert.assertEquals(1, reader.getColumnCount());
        Assert.assertEquals(" 1", reader.getRawRecord());
        Assert.assertFalse(reader.readRecord());
        reader.close();
    }
----------------------------------------
    @Test
    public void test146() throws Exception {
        CsvReader reader = CsvReader.parse("\"" + generateString('a', 10000) + "\r\nb");
        Assert.assertEquals("", reader.getRawRecord());
        Assert.assertTrue(reader.skipLine());
        Assert.assertEquals("", reader.getRawRecord());
        Assert.assertTrue(reader.readRecord());
        Assert.assertEquals("b", reader.get(0));
        Assert.assertFalse(reader.readRecord());
        reader.close();
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
default,73729.java,394,405
default,93943.java,954,967
----------------------------------------
    @Test
    public void test20() throws Exception {
        String data = "1\n";
        CsvReader reader = CsvReader.parse(data);
        Assert.assertTrue(reader.readRecord());
        Assert.assertEquals("1", reader.get(0));
        Assert.assertEquals(0L, reader.getCurrentRecord());
        Assert.assertEquals(1, reader.getColumnCount());
        Assert.assertEquals("1", reader.getRawRecord());
        Assert.assertFalse(reader.readRecord());
        reader.close();
    }
----------------------------------------
    @Test
    public void test52() throws Exception {
        String data = "\\xfa\\u0afa\\xFA\\u0AFA";
        CsvReader reader = CsvReader.parse(data);
        reader.setUseTextQualifier(false);
        reader.setEscapeMode(CsvReader.ESCAPE_MODE_BACKSLASH);
        Assert.assertTrue(reader.readRecord());
        Assert.assertEquals("úૺúૺ", reader.get(0));
        Assert.assertEquals("\\xfa\\u0afa\\xFA\\u0AFA", reader.getRawRecord());
        Assert.assertEquals(0L, reader.getCurrentRecord());
        Assert.assertEquals(1, reader.getColumnCount());
        Assert.assertFalse(reader.readRecord());
        reader.close();
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
default,73729.java,492,504
default,80832.java,233,245
----------------------------------------
    @Test
    public void test26() throws Exception {
        String data = "\"Mac \"The Knife\" Peter\",\"Boswell, Jr.\"";
        CsvReader reader = CsvReader.parse(data);
        Assert.assertTrue(reader.readRecord());
        Assert.assertEquals("Mac ", reader.get(0));
        Assert.assertEquals("Boswell, Jr.", reader.get(1));
        Assert.assertEquals(0L, reader.getCurrentRecord());
        Assert.assertEquals(2, reader.getColumnCount());
        Assert.assertEquals("\"Mac \"The Knife\" Peter\",\"Boswell, Jr.\"", reader.getRawRecord());
        Assert.assertFalse(reader.readRecord());
        reader.close();
    }
----------------------------------------
    @Test
    public void test9() throws Exception {
        String data = "1\r\n";
        CsvReader reader = CsvReader.parse(data);
        Assert.assertTrue(reader.readRecord());
        Assert.assertEquals("1", reader.get(0));
        Assert.assertEquals(0L, reader.getCurrentRecord());
        Assert.assertEquals(1, reader.getColumnCount());
        Assert.assertEquals("1", reader.getRawRecord());
        Assert.assertFalse(reader.readRecord());
        Assert.assertEquals("", reader.getRawRecord());
        reader.close();
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
default,73729.java,775,787
default,73729.java,655,667
----------------------------------------
    @Test
    public void test42() throws Exception {
        String data = "some \\stuff";
        CsvReader reader = CsvReader.parse(data);
        reader.setUseTextQualifier(false);
        reader.setEscapeMode(CsvReader.ESCAPE_MODE_BACKSLASH);
        Assert.assertTrue(reader.readRecord());
        Assert.assertEquals("some stuff", reader.get(0));
        Assert.assertEquals(0L, reader.getCurrentRecord());
        Assert.assertEquals(1, reader.getColumnCount());
        Assert.assertFalse(reader.readRecord());
        reader.close();
    }
----------------------------------------
    @Test
    public void test36() throws Exception {
        String data = "\"some \\stuff\"";
        CsvReader reader = CsvReader.parse(data);
        reader.setEscapeMode(CsvReader.ESCAPE_MODE_BACKSLASH);
        Assert.assertTrue(reader.readRecord());
        Assert.assertEquals("some stuff", reader.get(0));
        Assert.assertEquals(0L, reader.getCurrentRecord());
        Assert.assertEquals(1, reader.getColumnCount());
        Assert.assertEquals("\"some \\stuff\"", reader.getRawRecord());
        Assert.assertFalse(reader.readRecord());
        reader.close();
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
default,73729.java,909,922
default,122249.java,1735,1745
----------------------------------------
    @Test
    public void test49() throws Exception {
        String data = "\"\\n\\r\\t\\b\\f\\e\\v\\a\\z\\d065\\o101\\101\\x41\\u0041\"";
        CsvReader reader = CsvReader.parse(data);
        reader.setUseTextQualifier(true);
        reader.setEscapeMode(CsvReader.ESCAPE_MODE_BACKSLASH);
        Assert.assertTrue(reader.readRecord());
        Assert.assertEquals("\n\r\t\b\fzAAAAA", reader.get(0));
        Assert.assertEquals("\"\\n\\r\\t\\b\\f\\e\\v\\a\\z\\d065\\o101\\101\\x41\\u0041\"", reader.getRawRecord());
        Assert.assertEquals(0L, reader.getCurrentRecord());
        Assert.assertEquals(1, reader.getColumnCount());
        Assert.assertFalse(reader.readRecord());
        reader.close();
    }
----------------------------------------
    @Test
    public void test146() throws Exception {
        CsvReader reader = CsvReader.parse("\"" + generateString('a', 10000) + "\r\nb");
        Assert.assertEquals("", reader.getRawRecord());
        Assert.assertTrue(reader.skipLine());
        Assert.assertEquals("", reader.getRawRecord());
        Assert.assertTrue(reader.readRecord());
        Assert.assertEquals("b", reader.get(0));
        Assert.assertFalse(reader.readRecord());
        reader.close();
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
default,73729.java,1735,1745
default,39035.java,205,217
----------------------------------------
    @Test
    public void test146() throws Exception {
        CsvReader reader = CsvReader.parse("\"" + generateString('a', 10000) + "\r\nb");
        Assert.assertEquals("", reader.getRawRecord());
        Assert.assertTrue(reader.skipLine());
        Assert.assertEquals("", reader.getRawRecord());
        Assert.assertTrue(reader.readRecord());
        Assert.assertEquals("b", reader.get(0));
        Assert.assertFalse(reader.readRecord());
        reader.close();
    }
----------------------------------------
    @Test
    public void test7() throws Exception {
        String data = "1\r";
        CsvReader reader = CsvReader.parse(data);
        Assert.assertTrue(reader.readRecord());
        Assert.assertEquals("1", reader.get(0));
        Assert.assertEquals(0L, reader.getCurrentRecord());
        Assert.assertEquals(1, reader.getColumnCount());
        Assert.assertEquals("1", reader.getRawRecord());
        Assert.assertFalse(reader.readRecord());
        Assert.assertEquals("", reader.getRawRecord());
        reader.close();
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
default,67669.java,205,217
default,80832.java,1735,1745
----------------------------------------
    @Test
    public void test7() throws Exception {
        String data = "1\r";
        CsvReader reader = CsvReader.parse(data);
        Assert.assertTrue(reader.readRecord());
        Assert.assertEquals("1", reader.get(0));
        Assert.assertEquals(0L, reader.getCurrentRecord());
        Assert.assertEquals(1, reader.getColumnCount());
        Assert.assertEquals("1", reader.getRawRecord());
        Assert.assertFalse(reader.readRecord());
        Assert.assertEquals("", reader.getRawRecord());
        reader.close();
    }
----------------------------------------
    @Test
    public void test146() throws Exception {
        CsvReader reader = CsvReader.parse("\"" + generateString('a', 10000) + "\r\nb");
        Assert.assertEquals("", reader.getRawRecord());
        Assert.assertTrue(reader.skipLine());
        Assert.assertEquals("", reader.getRawRecord());
        Assert.assertTrue(reader.readRecord());
        Assert.assertEquals("b", reader.get(0));
        Assert.assertFalse(reader.readRecord());
        reader.close();
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
default,67669.java,263,274
default,5657.java,276,288
----------------------------------------
    @Test
    public void test11() throws Exception {
        String data = "\"July 4th, 2005\"";
        CsvReader reader = CsvReader.parse(data);
        Assert.assertTrue(reader.readRecord());
        Assert.assertEquals("July 4th, 2005", reader.get(0));
        Assert.assertEquals(0L, reader.getCurrentRecord());
        Assert.assertEquals(1, reader.getColumnCount());
        Assert.assertEquals("\"July 4th, 2005\"", reader.getRawRecord());
        Assert.assertFalse(reader.readRecord());
        reader.close();
    }
----------------------------------------
    @Test
    public void test12() throws Exception {
        String data = " 1";
        CsvReader reader = CsvReader.parse(data);
        reader.setTrimWhitespace(false);
        Assert.assertTrue(reader.readRecord());
        Assert.assertEquals(" 1", reader.get(0));
        Assert.assertEquals(0L, reader.getCurrentRecord());
        Assert.assertEquals(1, reader.getColumnCount());
        Assert.assertEquals(" 1", reader.getRawRecord());
        Assert.assertFalse(reader.readRecord());
        reader.close();
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
default,67669.java,219,231
default,125218.java,639,653
----------------------------------------
    @Test
    public void test8() throws Exception {
        String data = "1\n";
        CsvReader reader = CsvReader.parse(data);
        Assert.assertTrue(reader.readRecord());
        Assert.assertEquals("1", reader.get(0));
        Assert.assertEquals(0L, reader.getCurrentRecord());
        Assert.assertEquals(1, reader.getColumnCount());
        Assert.assertEquals("1", reader.getRawRecord());
        Assert.assertFalse(reader.readRecord());
        Assert.assertEquals("", reader.getRawRecord());
        reader.close();
    }
----------------------------------------
    @Test
    public void test35() throws Exception {
        String data = "Chicane, Love on the Run, Knight Rider, \"This field contains a comma, but it doesn't matter as the field is quoted\"";
        CsvReader reader = CsvReader.parse(data);
        Assert.assertTrue(reader.readRecord());
        Assert.assertEquals("Chicane", reader.get(0));
        Assert.assertEquals("Love on the Run", reader.get(1));
        Assert.assertEquals("Knight Rider", reader.get(2));
        Assert.assertEquals("This field contains a comma, but it doesn't matter as the field is quoted", reader.get(3));
        Assert.assertEquals(0L, reader.getCurrentRecord());
        Assert.assertEquals(4, reader.getColumnCount());
        Assert.assertEquals("Chicane, Love on the Run, Knight Rider, \"This field contains a comma, but it doesn't matter as the field is quoted\"", reader.getRawRecord());
        Assert.assertFalse(reader.readRecord());
        reader.close();
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
default,67669.java,545,557
default,124923.java,954,967
----------------------------------------
    @Test
    public void test29() throws Exception {
        String data = "\"double\\\"\\\"double quotes\"";
        CsvReader reader = CsvReader.parse(data);
        reader.setEscapeMode(CsvReader.ESCAPE_MODE_BACKSLASH);
        Assert.assertTrue(reader.readRecord());
        Assert.assertEquals("double\"\"double quotes", reader.get(0));
        Assert.assertEquals(0L, reader.getCurrentRecord());
        Assert.assertEquals(1, reader.getColumnCount());
        Assert.assertEquals("\"double\\\"\\\"double quotes\"", reader.getRawRecord());
        Assert.assertFalse(reader.readRecord());
        reader.close();
    }
----------------------------------------
    @Test
    public void test52() throws Exception {
        String data = "\\xfa\\u0afa\\xFA\\u0AFA";
        CsvReader reader = CsvReader.parse(data);
        reader.setUseTextQualifier(false);
        reader.setEscapeMode(CsvReader.ESCAPE_MODE_BACKSLASH);
        Assert.assertTrue(reader.readRecord());
        Assert.assertEquals("úૺúૺ", reader.get(0));
        Assert.assertEquals("\\xfa\\u0afa\\xFA\\u0AFA", reader.getRawRecord());
        Assert.assertEquals(0L, reader.getCurrentRecord());
        Assert.assertEquals(1, reader.getColumnCount());
        Assert.assertFalse(reader.readRecord());
        reader.close();
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
default,67669.java,909,922
default,124923.java,589,601
----------------------------------------
    @Test
    public void test49() throws Exception {
        String data = "\"\\n\\r\\t\\b\\f\\e\\v\\a\\z\\d065\\o101\\101\\x41\\u0041\"";
        CsvReader reader = CsvReader.parse(data);
        reader.setUseTextQualifier(true);
        reader.setEscapeMode(CsvReader.ESCAPE_MODE_BACKSLASH);
        Assert.assertTrue(reader.readRecord());
        Assert.assertEquals("\n\r\t\b\fzAAAAA", reader.get(0));
        Assert.assertEquals("\"\\n\\r\\t\\b\\f\\e\\v\\a\\z\\d065\\o101\\101\\x41\\u0041\"", reader.getRawRecord());
        Assert.assertEquals(0L, reader.getCurrentRecord());
        Assert.assertEquals(1, reader.getColumnCount());
        Assert.assertFalse(reader.readRecord());
        reader.close();
    }
----------------------------------------
    @Test
    public void test32() throws Exception {
        String data = "\"Mac \"The Knife\" Peter\",\"Boswell, Jr.\"";
        CsvReader reader = CsvReader.parse(data);
        Assert.assertTrue(reader.readRecord());
        Assert.assertEquals("Mac ", reader.get(0));
        Assert.assertEquals("Boswell, Jr.", reader.get(1));
        Assert.assertEquals(0L, reader.getCurrentRecord());
        Assert.assertEquals(2, reader.getColumnCount());
        Assert.assertEquals("\"Mac \"The Knife\" Peter\",\"Boswell, Jr.\"", reader.getRawRecord());
        Assert.assertFalse(reader.readRecord());
        reader.close();
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
default,67669.java,761,773
default,125218.java,669,683
----------------------------------------
    @Test
    public void test41() throws Exception {
        String data = "double\\\\\\\\double backslash";
        CsvReader reader = CsvReader.parse(data);
        reader.setUseTextQualifier(false);
        reader.setEscapeMode(CsvReader.ESCAPE_MODE_BACKSLASH);
        Assert.assertTrue(reader.readRecord());
        Assert.assertEquals("double\\\\double backslash", reader.get(0));
        Assert.assertEquals(0L, reader.getCurrentRecord());
        Assert.assertEquals(1, reader.getColumnCount());
        Assert.assertFalse(reader.readRecord());
        reader.close();
    }
----------------------------------------
    @Test
    public void test37() throws Exception {
        String data = "  \" Chicane\"  junk here  , Love on the Run, Knight Rider, \"This field contains a comma, but it doesn't matter as the field is quoted\"";
        CsvReader reader = CsvReader.parse(data);
        Assert.assertTrue(reader.readRecord());
        Assert.assertEquals(" Chicane", reader.get(0));
        Assert.assertEquals("Love on the Run", reader.get(1));
        Assert.assertEquals("Knight Rider", reader.get(2));
        Assert.assertEquals("This field contains a comma, but it doesn't matter as the field is quoted", reader.get(3));
        Assert.assertEquals(0L, reader.getCurrentRecord());
        Assert.assertEquals(4, reader.getColumnCount());
        Assert.assertEquals("  \" Chicane\"  junk here  , Love on the Run, Knight Rider, \"This field contains a comma, but it doesn't matter as the field is quoted\"", reader.getRawRecord());
        Assert.assertFalse(reader.readRecord());
        reader.close();
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
default,67669.java,924,937
default,114239.java,407,422
----------------------------------------
    @Test
    public void test50() throws Exception {
        String data = "\\n\\r\\t\\b\\f\\e\\v\\a\\z\\d065\\o101\\101\\x41\\u0041";
        CsvReader reader = CsvReader.parse(data);
        reader.setUseTextQualifier(false);
        reader.setEscapeMode(CsvReader.ESCAPE_MODE_BACKSLASH);
        Assert.assertTrue(reader.readRecord());
        Assert.assertEquals("\n\r\t\b\fzAAAAA", reader.get(0));
        Assert.assertEquals("\\n\\r\\t\\b\\f\\e\\v\\a\\z\\d065\\o101\\101\\x41\\u0041", reader.getRawRecord());
        Assert.assertEquals(0L, reader.getCurrentRecord());
        Assert.assertEquals(1, reader.getColumnCount());
        Assert.assertFalse(reader.readRecord());
        reader.close();
    }
----------------------------------------
    @Test
    public void test21() throws Exception {
        String data = "'bob said, ''Hey!''',2, 3 ";
        CsvReader reader = CsvReader.parse(data);
        reader.setTextQualifier('\'');
        Assert.assertTrue(reader.readRecord());
        Assert.assertEquals("bob said, 'Hey!'", reader.get(0));
        Assert.assertEquals("2", reader.get(1));
        Assert.assertEquals("3", reader.get(2));
        Assert.assertEquals(',', reader.getDelimiter());
        Assert.assertEquals(0L, reader.getCurrentRecord());
        Assert.assertEquals(3, reader.getColumnCount());
        Assert.assertEquals("'bob said, ''Hey!''',2, 3 ", reader.getRawRecord());
        Assert.assertFalse(reader.readRecord());
        reader.close();
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
default,67669.java,1288,1301
default,125218.java,368,379
----------------------------------------
    @Test
    public void test87() throws Exception {
        CsvWriter writer = new CsvWriter("temp.csv");
        writer.write("1");
        writer.close();
        CsvReader reader = new CsvReader("temp.csv");
        Assert.assertTrue(reader.readRecord());
        Assert.assertEquals("1", reader.get(0));
        Assert.assertEquals(1, reader.getColumnCount());
        Assert.assertEquals(0L, reader.getCurrentRecord());
        Assert.assertFalse(reader.readRecord());
        reader.close();
        new File("temp.csv").delete();
    }
----------------------------------------
    @Test
    public void test18() throws Exception {
        String data = "1\r";
        CsvReader reader = CsvReader.parse(data);
        Assert.assertTrue(reader.readRecord());
        Assert.assertEquals("1", reader.get(0));
        Assert.assertEquals(0L, reader.getCurrentRecord());
        Assert.assertEquals(1, reader.getColumnCount());
        Assert.assertEquals("1", reader.getRawRecord());
        Assert.assertFalse(reader.readRecord());
        reader.close();
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
default,67669.java,1567,1580
default,80510.java,1478,1493
----------------------------------------
    @Test
    public void test132() throws Exception {
        byte[] buffer;
        ByteArrayOutputStream stream = new ByteArrayOutputStream();
        CsvWriter writer = new CsvWriter(stream, ',', Charset.forName("ISO-8859-1"));
        writer.setEscapeMode(CsvWriter.ESCAPE_MODE_BACKSLASH);
        writer.write("1,\\2");
        writer.endRecord();
        writer.close();
        buffer = stream.toByteArray();
        stream.close();
        String data = Charset.forName("ISO-8859-1").decode(ByteBuffer.wrap(buffer)).toString();
        Assert.assertEquals("\"1,\\\\2\"\r\n", data);
    }
----------------------------------------
    @Test
    public void test121() throws Exception {
        byte[] buffer;
        ByteArrayOutputStream stream = new ByteArrayOutputStream();
        CsvWriter writer = new CsvWriter(stream, ',', Charset.forName("ISO-8859-1"));
        writer.writeRecord(new String[] { " 1 ", "2" }, false);
        writer.writeRecord(new String[] { " 1 ", "2" });
        writer.writeRecord(new String[] { " 1 ", "2" }, true);
        writer.writeRecord(new String[0], true);
        writer.writeRecord(null, true);
        writer.close();
        buffer = stream.toByteArray();
        stream.close();
        String data = Charset.forName("ISO-8859-1").decode(ByteBuffer.wrap(buffer)).toString();
        Assert.assertEquals("1,2\r\n1,2\r\n\" 1 \",2\r\n", data);
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
default,67669.java,1747,1760
default,67669.java,939,952
----------------------------------------
    @Test
    public void test147() throws Exception {
        StringBuilder data = new StringBuilder(20000);
        for (int i = 0; i < 10000; i++) {
            data.append("\\b");
        }
        CsvReader reader = CsvReader.parse(data.toString());
        reader.setUseTextQualifier(false);
        reader.setEscapeMode(CsvReader.ESCAPE_MODE_BACKSLASH);
        Assert.assertTrue(reader.readRecord());
        Assert.assertEquals(generateString('\b', 10000), reader.get(0));
        Assert.assertFalse(reader.readRecord());
        reader.close();
    }
----------------------------------------
    @Test
    public void test51() throws Exception {
        String data = "\"\\xfa\\u0afa\\xFA\\u0AFA\"";
        CsvReader reader = CsvReader.parse(data);
        reader.setUseTextQualifier(true);
        reader.setEscapeMode(CsvReader.ESCAPE_MODE_BACKSLASH);
        Assert.assertTrue(reader.readRecord());
        Assert.assertEquals("úૺúૺ", reader.get(0));
        Assert.assertEquals("\"\\xfa\\u0afa\\xFA\\u0AFA\"", reader.getRawRecord());
        Assert.assertEquals(0L, reader.getCurrentRecord());
        Assert.assertEquals(1, reader.getColumnCount());
        Assert.assertFalse(reader.readRecord());
        reader.close();
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
default,78160.java,309,320
default,117081.java,295,307
----------------------------------------
    private void send(ActiveAssociation active, File file) throws InterruptedException, IOException {
        if (!file.isDirectory()) {
            for (int i = 0; i < repeatSingle; ++i) {
                sendFile(active, file);
            }
            return;
        }
        File[] list = file.listFiles();
        for (int i = 0; i < list.length; ++i) {
            send(active, list[i]);
        }
    }
----------------------------------------
    private void send(ActiveAssociation active, File file, Dataset ds) throws InterruptedException, IOException {
        if (!file.isDirectory()) {
            for (int i = 0; i < repeatSingle; ++i) {
                if (ds != null && random) ds.putUI(Tags.SOPInstanceUID, uidGen.createUID());
                sendFile(active, file, ds);
            }
            return;
        }
        File[] list = file.listFiles();
        for (int i = 0; i < list.length; ++i) {
            send(active, list[i], ds);
        }
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
default,102869.java,381,392
default,119807.java,589,601
----------------------------------------
    @Test
    public void test19() throws Exception {
        String data = "1\r\n";
        CsvReader reader = CsvReader.parse(data);
        Assert.assertTrue(reader.readRecord());
        Assert.assertEquals("1", reader.get(0));
        Assert.assertEquals(0L, reader.getCurrentRecord());
        Assert.assertEquals(1, reader.getColumnCount());
        Assert.assertEquals("1", reader.getRawRecord());
        Assert.assertFalse(reader.readRecord());
        reader.close();
    }
----------------------------------------
    @Test
    public void test32() throws Exception {
        String data = "\"Mac \"The Knife\" Peter\",\"Boswell, Jr.\"";
        CsvReader reader = CsvReader.parse(data);
        Assert.assertTrue(reader.readRecord());
        Assert.assertEquals("Mac ", reader.get(0));
        Assert.assertEquals("Boswell, Jr.", reader.get(1));
        Assert.assertEquals(0L, reader.getCurrentRecord());
        Assert.assertEquals(2, reader.getColumnCount());
        Assert.assertEquals("\"Mac \"The Knife\" Peter\",\"Boswell, Jr.\"", reader.getRawRecord());
        Assert.assertFalse(reader.readRecord());
        reader.close();
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
default,102869.java,492,504
default,119807.java,573,587
----------------------------------------
    @Test
    public void test26() throws Exception {
        String data = "\"Mac \"The Knife\" Peter\",\"Boswell, Jr.\"";
        CsvReader reader = CsvReader.parse(data);
        Assert.assertTrue(reader.readRecord());
        Assert.assertEquals("Mac ", reader.get(0));
        Assert.assertEquals("Boswell, Jr.", reader.get(1));
        Assert.assertEquals(0L, reader.getCurrentRecord());
        Assert.assertEquals(2, reader.getColumnCount());
        Assert.assertEquals("\"Mac \"The Knife\" Peter\",\"Boswell, Jr.\"", reader.getRawRecord());
        Assert.assertFalse(reader.readRecord());
        reader.close();
    }
----------------------------------------
    @Test
    public void test31() throws Exception {
        CsvWriter writer = new CsvWriter(new PrintWriter(new OutputStreamWriter(new FileOutputStream("temp.csv"), Charset.forName("UTF-8"))), ',');
        writer.write(" \t \t");
        writer.close();
        CsvReader reader = new CsvReader(new InputStreamReader(new FileInputStream("temp.csv"), Charset.forName("UTF-8")));
        Assert.assertTrue(reader.readRecord());
        Assert.assertEquals("", reader.get(0));
        Assert.assertEquals(1, reader.getColumnCount());
        Assert.assertEquals(0L, reader.getCurrentRecord());
        Assert.assertEquals("\"\"", reader.getRawRecord());
        Assert.assertFalse(reader.readRecord());
        reader.close();
        new File("temp.csv").delete();
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
default,102869.java,775,787
default,11754.java,355,366
----------------------------------------
    @Test
    public void test42() throws Exception {
        String data = "some \\stuff";
        CsvReader reader = CsvReader.parse(data);
        reader.setUseTextQualifier(false);
        reader.setEscapeMode(CsvReader.ESCAPE_MODE_BACKSLASH);
        Assert.assertTrue(reader.readRecord());
        Assert.assertEquals("some stuff", reader.get(0));
        Assert.assertEquals(0L, reader.getCurrentRecord());
        Assert.assertEquals(1, reader.getColumnCount());
        Assert.assertFalse(reader.readRecord());
        reader.close();
    }
----------------------------------------
    @Test
    public void test17() throws Exception {
        String data = "\"double\"\"\"\"double quotes\"";
        CsvReader reader = CsvReader.parse(data);
        Assert.assertTrue(reader.readRecord());
        Assert.assertEquals("double\"\"double quotes", reader.get(0));
        Assert.assertEquals(0L, reader.getCurrentRecord());
        Assert.assertEquals(1, reader.getColumnCount());
        Assert.assertEquals("\"double\"\"\"\"double quotes\"", reader.getRawRecord());
        Assert.assertFalse(reader.readRecord());
        reader.close();
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
default,102869.java,789,801
default,106112.java,424,436
----------------------------------------
    @Test
    public void test43() throws Exception {
        String data = "\"line 1\\nline 2\",\"line 1\\\nline 2\"";
        CsvReader reader = CsvReader.parse(data);
        reader.setEscapeMode(CsvReader.ESCAPE_MODE_BACKSLASH);
        Assert.assertTrue(reader.readRecord());
        Assert.assertEquals("line 1\nline 2", reader.get(0));
        Assert.assertEquals("line 1\nline 2", reader.get(1));
        Assert.assertEquals(0L, reader.getCurrentRecord());
        Assert.assertEquals(2, reader.getColumnCount());
        Assert.assertFalse(reader.readRecord());
        reader.close();
    }
----------------------------------------
    @Test
    public void test22() throws Exception {
        String data = "\"data \"\" here\"";
        CsvReader reader = CsvReader.parse(data);
        reader.setUseTextQualifier(false);
        Assert.assertTrue(reader.readRecord());
        Assert.assertEquals("\"data \"\" here\"", reader.get(0));
        Assert.assertEquals(0L, reader.getCurrentRecord());
        Assert.assertEquals(1, reader.getColumnCount());
        Assert.assertEquals("\"data \"\" here\"", reader.getRawRecord());
        Assert.assertFalse(reader.readRecord());
        reader.close();
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
default,102869.java,559,571
default,80832.java,589,601
----------------------------------------
    @Test
    public void test30() throws Exception {
        String data = "\"double\\\\\\\\double backslash\"";
        CsvReader reader = CsvReader.parse(data);
        reader.setEscapeMode(CsvReader.ESCAPE_MODE_BACKSLASH);
        Assert.assertTrue(reader.readRecord());
        Assert.assertEquals("double\\\\double backslash", reader.get(0));
        Assert.assertEquals(0L, reader.getCurrentRecord());
        Assert.assertEquals(1, reader.getColumnCount());
        Assert.assertEquals("\"double\\\\\\\\double backslash\"", reader.getRawRecord());
        Assert.assertFalse(reader.readRecord());
        reader.close();
    }
----------------------------------------
    @Test
    public void test32() throws Exception {
        String data = "\"Mac \"The Knife\" Peter\",\"Boswell, Jr.\"";
        CsvReader reader = CsvReader.parse(data);
        Assert.assertTrue(reader.readRecord());
        Assert.assertEquals("Mac ", reader.get(0));
        Assert.assertEquals("Boswell, Jr.", reader.get(1));
        Assert.assertEquals(0L, reader.getCurrentRecord());
        Assert.assertEquals(2, reader.getColumnCount());
        Assert.assertEquals("\"Mac \"The Knife\" Peter\",\"Boswell, Jr.\"", reader.getRawRecord());
        Assert.assertFalse(reader.readRecord());
        reader.close();
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
default,102869.java,924,937
default,124923.java,528,543
----------------------------------------
    @Test
    public void test50() throws Exception {
        String data = "\\n\\r\\t\\b\\f\\e\\v\\a\\z\\d065\\o101\\101\\x41\\u0041";
        CsvReader reader = CsvReader.parse(data);
        reader.setUseTextQualifier(false);
        reader.setEscapeMode(CsvReader.ESCAPE_MODE_BACKSLASH);
        Assert.assertTrue(reader.readRecord());
        Assert.assertEquals("\n\r\t\b\fzAAAAA", reader.get(0));
        Assert.assertEquals("\\n\\r\\t\\b\\f\\e\\v\\a\\z\\d065\\o101\\101\\x41\\u0041", reader.getRawRecord());
        Assert.assertEquals(0L, reader.getCurrentRecord());
        Assert.assertEquals(1, reader.getColumnCount());
        Assert.assertFalse(reader.readRecord());
        reader.close();
    }
----------------------------------------
    @Test
    public void test28() throws Exception {
        String data = "\"bob said, \\\"Hey!\\\"\",2, 3 ";
        CsvReader reader = CsvReader.parse(data);
        reader.setEscapeMode(CsvReader.ESCAPE_MODE_BACKSLASH);
        Assert.assertTrue(reader.readRecord());
        Assert.assertEquals("bob said, \"Hey!\"", reader.get(0));
        Assert.assertEquals("2", reader.get(1));
        Assert.assertEquals("3", reader.get(2));
        Assert.assertEquals(',', reader.getDelimiter());
        Assert.assertEquals(0L, reader.getCurrentRecord());
        Assert.assertEquals(3, reader.getColumnCount());
        Assert.assertEquals("\"bob said, \\\"Hey!\\\"\",2, 3 ", reader.getRawRecord());
        Assert.assertFalse(reader.readRecord());
        reader.close();
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
default,102869.java,1288,1301
default,93943.java,803,816
----------------------------------------
    @Test
    public void test87() throws Exception {
        CsvWriter writer = new CsvWriter("temp.csv");
        writer.write("1");
        writer.close();
        CsvReader reader = new CsvReader("temp.csv");
        Assert.assertTrue(reader.readRecord());
        Assert.assertEquals("1", reader.get(0));
        Assert.assertEquals(1, reader.getColumnCount());
        Assert.assertEquals(0L, reader.getCurrentRecord());
        Assert.assertFalse(reader.readRecord());
        reader.close();
        new File("temp.csv").delete();
    }
----------------------------------------
    @Test
    public void test44() throws Exception {
        String data = "line 1\\nline 2,line 1\\\nline 2";
        CsvReader reader = CsvReader.parse(data);
        reader.setUseTextQualifier(false);
        reader.setEscapeMode(CsvReader.ESCAPE_MODE_BACKSLASH);
        Assert.assertTrue(reader.readRecord());
        Assert.assertEquals("line 1\nline 2", reader.get(0));
        Assert.assertEquals("line 1\nline 2", reader.get(1));
        Assert.assertEquals(0L, reader.getCurrentRecord());
        Assert.assertEquals(2, reader.getColumnCount());
        Assert.assertFalse(reader.readRecord());
        reader.close();
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
default,102869.java,1288,1301
default,80832.java,761,773
----------------------------------------
    @Test
    public void test87() throws Exception {
        CsvWriter writer = new CsvWriter("temp.csv");
        writer.write("1");
        writer.close();
        CsvReader reader = new CsvReader("temp.csv");
        Assert.assertTrue(reader.readRecord());
        Assert.assertEquals("1", reader.get(0));
        Assert.assertEquals(1, reader.getColumnCount());
        Assert.assertEquals(0L, reader.getCurrentRecord());
        Assert.assertFalse(reader.readRecord());
        reader.close();
        new File("temp.csv").delete();
    }
----------------------------------------
    @Test
    public void test41() throws Exception {
        String data = "double\\\\\\\\double backslash";
        CsvReader reader = CsvReader.parse(data);
        reader.setUseTextQualifier(false);
        reader.setEscapeMode(CsvReader.ESCAPE_MODE_BACKSLASH);
        Assert.assertTrue(reader.readRecord());
        Assert.assertEquals("double\\\\double backslash", reader.get(0));
        Assert.assertEquals(0L, reader.getCurrentRecord());
        Assert.assertEquals(1, reader.getColumnCount());
        Assert.assertFalse(reader.readRecord());
        reader.close();
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
default,102869.java,1495,1509
default,80832.java,991,1003
----------------------------------------
    @Test
    public void test122() throws Exception {
        byte[] buffer;
        ByteArrayOutputStream stream = new ByteArrayOutputStream();
        CsvWriter writer = new CsvWriter(stream, ',', Charset.forName("ISO-8859-1"));
        writer.write("1,2");
        writer.write(null);
        writer.write("3 ", true);
        writer.endRecord();
        writer.close();
        buffer = stream.toByteArray();
        stream.close();
        String data = Charset.forName("ISO-8859-1").decode(ByteBuffer.wrap(buffer)).toString();
        Assert.assertEquals("\"1,2\",,\"3 \"\r\n", data);
    }
----------------------------------------
    @Test
    public void test55() throws Exception {
        byte[] buffer;
        ByteArrayOutputStream stream = new ByteArrayOutputStream();
        CsvWriter writer = new CsvWriter(stream, ',', Charset.forName("ISO-8859-1"));
        writer.write("");
        writer.write("1");
        writer.close();
        buffer = stream.toByteArray();
        stream.close();
        String data = Charset.forName("ISO-8859-1").decode(ByteBuffer.wrap(buffer)).toString();
        Assert.assertEquals("\"\",1", data);
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
default,22303.java,368,379
default,119807.java,589,601
----------------------------------------
    @Test
    public void test18() throws Exception {
        String data = "1\r";
        CsvReader reader = CsvReader.parse(data);
        Assert.assertTrue(reader.readRecord());
        Assert.assertEquals("1", reader.get(0));
        Assert.assertEquals(0L, reader.getCurrentRecord());
        Assert.assertEquals(1, reader.getColumnCount());
        Assert.assertEquals("1", reader.getRawRecord());
        Assert.assertFalse(reader.readRecord());
        reader.close();
    }
----------------------------------------
    @Test
    public void test32() throws Exception {
        String data = "\"Mac \"The Knife\" Peter\",\"Boswell, Jr.\"";
        CsvReader reader = CsvReader.parse(data);
        Assert.assertTrue(reader.readRecord());
        Assert.assertEquals("Mac ", reader.get(0));
        Assert.assertEquals("Boswell, Jr.", reader.get(1));
        Assert.assertEquals(0L, reader.getCurrentRecord());
        Assert.assertEquals(2, reader.getColumnCount());
        Assert.assertEquals("\"Mac \"The Knife\" Peter\",\"Boswell, Jr.\"", reader.getRawRecord());
        Assert.assertFalse(reader.readRecord());
        reader.close();
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
default,22303.java,381,392
default,5657.java,775,787
----------------------------------------
    @Test
    public void test19() throws Exception {
        String data = "1\r\n";
        CsvReader reader = CsvReader.parse(data);
        Assert.assertTrue(reader.readRecord());
        Assert.assertEquals("1", reader.get(0));
        Assert.assertEquals(0L, reader.getCurrentRecord());
        Assert.assertEquals(1, reader.getColumnCount());
        Assert.assertEquals("1", reader.getRawRecord());
        Assert.assertFalse(reader.readRecord());
        reader.close();
    }
----------------------------------------
    @Test
    public void test42() throws Exception {
        String data = "some \\stuff";
        CsvReader reader = CsvReader.parse(data);
        reader.setUseTextQualifier(false);
        reader.setEscapeMode(CsvReader.ESCAPE_MODE_BACKSLASH);
        Assert.assertTrue(reader.readRecord());
        Assert.assertEquals("some stuff", reader.get(0));
        Assert.assertEquals(0L, reader.getCurrentRecord());
        Assert.assertEquals(1, reader.getColumnCount());
        Assert.assertFalse(reader.readRecord());
        reader.close();
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
default,22303.java,368,379
default,80832.java,559,571
----------------------------------------
    @Test
    public void test18() throws Exception {
        String data = "1\r";
        CsvReader reader = CsvReader.parse(data);
        Assert.assertTrue(reader.readRecord());
        Assert.assertEquals("1", reader.get(0));
        Assert.assertEquals(0L, reader.getCurrentRecord());
        Assert.assertEquals(1, reader.getColumnCount());
        Assert.assertEquals("1", reader.getRawRecord());
        Assert.assertFalse(reader.readRecord());
        reader.close();
    }
----------------------------------------
    @Test
    public void test30() throws Exception {
        String data = "\"double\\\\\\\\double backslash\"";
        CsvReader reader = CsvReader.parse(data);
        reader.setEscapeMode(CsvReader.ESCAPE_MODE_BACKSLASH);
        Assert.assertTrue(reader.readRecord());
        Assert.assertEquals("double\\\\double backslash", reader.get(0));
        Assert.assertEquals(0L, reader.getCurrentRecord());
        Assert.assertEquals(1, reader.getColumnCount());
        Assert.assertEquals("\"double\\\\\\\\double backslash\"", reader.getRawRecord());
        Assert.assertFalse(reader.readRecord());
        reader.close();
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
default,22303.java,394,405
default,125218.java,528,543
----------------------------------------
    @Test
    public void test20() throws Exception {
        String data = "1\n";
        CsvReader reader = CsvReader.parse(data);
        Assert.assertTrue(reader.readRecord());
        Assert.assertEquals("1", reader.get(0));
        Assert.assertEquals(0L, reader.getCurrentRecord());
        Assert.assertEquals(1, reader.getColumnCount());
        Assert.assertEquals("1", reader.getRawRecord());
        Assert.assertFalse(reader.readRecord());
        reader.close();
    }
----------------------------------------
    @Test
    public void test28() throws Exception {
        String data = "\"bob said, \\\"Hey!\\\"\",2, 3 ";
        CsvReader reader = CsvReader.parse(data);
        reader.setEscapeMode(CsvReader.ESCAPE_MODE_BACKSLASH);
        Assert.assertTrue(reader.readRecord());
        Assert.assertEquals("bob said, \"Hey!\"", reader.get(0));
        Assert.assertEquals("2", reader.get(1));
        Assert.assertEquals("3", reader.get(2));
        Assert.assertEquals(',', reader.getDelimiter());
        Assert.assertEquals(0L, reader.getCurrentRecord());
        Assert.assertEquals(3, reader.getColumnCount());
        Assert.assertEquals("\"bob said, \\\"Hey!\\\"\",2, 3 ", reader.getRawRecord());
        Assert.assertFalse(reader.readRecord());
        reader.close();
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
default,22303.java,991,1003
default,28532.java,1137,1153
----------------------------------------
    @Test
    public void test55() throws Exception {
        byte[] buffer;
        ByteArrayOutputStream stream = new ByteArrayOutputStream();
        CsvWriter writer = new CsvWriter(stream, ',', Charset.forName("ISO-8859-1"));
        writer.write("");
        writer.write("1");
        writer.close();
        buffer = stream.toByteArray();
        stream.close();
        String data = Charset.forName("ISO-8859-1").decode(ByteBuffer.wrap(buffer)).toString();
        Assert.assertEquals("\"\",1", data);
    }
----------------------------------------
    @Test
    public void test74() throws Exception {
        byte[] buffer;
        ByteArrayOutputStream stream = new ByteArrayOutputStream();
        CsvWriter writer = new CsvWriter(stream, ',', Charset.forName("ISO-8859-1"));
        writer.setEscapeMode(CsvWriter.ESCAPE_MODE_BACKSLASH);
        writer.setUseTextQualifier(false);
        writer.write("1,2");
        writer.write("3");
        writer.write("blah \"some stuff in quotes\"");
        writer.endRecord();
        writer.close();
        buffer = stream.toByteArray();
        stream.close();
        String data = Charset.forName("ISO-8859-1").decode(ByteBuffer.wrap(buffer)).toString();
        Assert.assertEquals("1\\,2,3,blah \"some stuff in quotes\"\r\n", data);
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
default,22303.java,1567,1580
default,119807.java,1082,1095
----------------------------------------
    @Test
    public void test132() throws Exception {
        byte[] buffer;
        ByteArrayOutputStream stream = new ByteArrayOutputStream();
        CsvWriter writer = new CsvWriter(stream, ',', Charset.forName("ISO-8859-1"));
        writer.setEscapeMode(CsvWriter.ESCAPE_MODE_BACKSLASH);
        writer.write("1,\\2");
        writer.endRecord();
        writer.close();
        buffer = stream.toByteArray();
        stream.close();
        String data = Charset.forName("ISO-8859-1").decode(ByteBuffer.wrap(buffer)).toString();
        Assert.assertEquals("\"1,\\\\2\"\r\n", data);
    }
----------------------------------------
    @Test
    public void test71() throws Exception {
        byte[] buffer;
        ByteArrayOutputStream stream = new ByteArrayOutputStream();
        CsvWriter writer = new CsvWriter(stream, ',', Charset.forName("ISO-8859-1"));
        writer.setForceQualifier(true);
        writer.write(" data ");
        writer.endRecord();
        writer.close();
        buffer = stream.toByteArray();
        stream.close();
        String data = Charset.forName("ISO-8859-1").decode(ByteBuffer.wrap(buffer)).toString();
        Assert.assertEquals("\"data\"\r\n", data);
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
default,22303.java,1715,1723
default,59932.java,368,379
----------------------------------------
    @Test
    public void test144() throws Exception {
        CsvReader reader = CsvReader.parse("\"" + generateString('a', 100000) + "\"");
        Assert.assertTrue(reader.readRecord());
        Assert.assertEquals(generateString('a', 100000), reader.get(0));
        Assert.assertEquals("\"" + generateString('a', 100000) + "\"", reader.getRawRecord());
        Assert.assertFalse(reader.readRecord());
        reader.close();
    }
----------------------------------------
    @Test
    public void test18() throws Exception {
        String data = "1\r";
        CsvReader reader = CsvReader.parse(data);
        Assert.assertTrue(reader.readRecord());
        Assert.assertEquals("1", reader.get(0));
        Assert.assertEquals(0L, reader.getCurrentRecord());
        Assert.assertEquals(1, reader.getColumnCount());
        Assert.assertEquals("1", reader.getRawRecord());
        Assert.assertFalse(reader.readRecord());
        reader.close();
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,480309.java,415,433
default,107439.java,196,210
----------------------------------------
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                try {
                    UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
                } catch (UnsupportedLookAndFeelException ex) {
                    ex.printStackTrace();
                } catch (InstantiationException ex) {
                    ex.printStackTrace();
                } catch (ClassNotFoundException ex) {
                    ex.printStackTrace();
                } catch (IllegalAccessException ex) {
                    ex.printStackTrace();
                }
                new EveSkillWatch();
            }
        });
    }
----------------------------------------
    public static void main(String[] args) {
        try {
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
        } catch (ClassNotFoundException e) {
            e.printStackTrace();
        } catch (InstantiationException e) {
            e.printStackTrace();
        } catch (IllegalAccessException e) {
            e.printStackTrace();
        } catch (UnsupportedLookAndFeelException e) {
            e.printStackTrace();
        }
        InstructorUI GUI = new InstructorUI();
        GUI.run();
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,2646299.java,1338,1341
selected,351574.java,154,161
----------------------------------------
    private YahooIdentity identityIdToObject(String yid) {
        for (int i = 0; i < identities.length; i++) if (yid.equals(identities[i].getId())) return identities[i];
        return null;
    }
----------------------------------------
    private static X509Certificate findCert(Principal issuer, X509Certificate[] candidates) {
        for (int i = 0; i < candidates.length; i++) {
            if (issuer.equals(candidates[i].getSubjectDN())) {
                return candidates[i];
            }
        }
        return null;
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
default,7413.java,73,82
default,75612.java,64,71
----------------------------------------
    String sequenceUsingWhile(int start, int stop) {
        StringBuilder builder = new StringBuilder();
        int i = start;
        while (i <= stop) {
            if (i > start) builder.append(',');
            builder.append(i);
            i++;
        }
        return builder.toString();
    }
----------------------------------------
    String sequenceUsingFor(int start, int stop) {
        StringBuilder builder = new StringBuilder();
        for (int i = start; i <= stop; i++) {
            if (i > start) builder.append(',');
            builder.append(i);
        }
        return builder.toString();
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,1041679.java,383,393
default,10497.java,312,318
----------------------------------------
        public void write(OutputStream out) throws IOException, CMSException {
            byte b[] = new byte[8192];
            int read = in.read(b);
            while (read > 0) {
                out.write(b, 0, read);
                read = in.read(b);
            }
            out.close();
            in.close();
            digestResult = digester.digest();
        }
----------------------------------------
    private void copyFile(InputStream in, OutputStream out) throws IOException {
        byte[] buffer = new byte[4096];
        int bytesRead;
        while ((bytesRead = in.read(buffer)) != -1) out.write(buffer, 0, bytesRead);
        in.close();
        out.close();
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,784065.java,145,155
selected,633882.java,42,56
----------------------------------------
    public static void copyToStream(InputStream from, OutputStream to) throws Exception {
        byte[] buffer = new byte[BUFFER_SIZE];
        int bytes_read;
        while (true) {
            bytes_read = from.read(buffer);
            if (bytes_read == -1) break;
            to.write(buffer, 0, bytes_read);
        }
        to.flush();
        from.close();
    }
----------------------------------------
    public static void writeContent(final FileObject file, final OutputStream outstr) throws IOException {
        final InputStream instr = file.getContent().getInputStream();
        try {
            final byte[] buffer = new byte[1024];
            while (true) {
                final int nread = instr.read(buffer);
                if (nread < 0) {
                    break;
                }
                outstr.write(buffer, 0, nread);
            }
        } finally {
            instr.close();
        }
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,1950269.java,1190,1199
selected,1158085.java,297,306
----------------------------------------
    protected void unread(@SuppressWarnings("hiding") Token token) throws IOException {
        @SuppressWarnings("hiding") String text = token.getText();
        int length = text.length();
        for (int i = length - 1; i >= 0; i--) {
            this.eof = false;
            this.in.unread(text.charAt(i));
        }
        this.pos = token.getPos() - 1;
        this.line = token.getLine() - 1;
    }
----------------------------------------
    protected void unread(Token token) throws IOException {
        String text = token.getText();
        int length = text.length();
        for (int i = length - 1; i >= 0; i--) {
            eof = false;
            in.unread(text.charAt(i));
        }
        pos = token.getPos() - 1;
        line = token.getLine() - 1;
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,1830095.java,712,722
default,2207.java,126,130
----------------------------------------
    public static void copy(InputStream in, OutputStream out) throws IOException {
        try {
            byte[] buf = new byte[1024];
            int len;
            while ((len = in.read(buf)) > 0) {
                out.write(buf, 0, len);
            }
        } finally {
            if (out != null) out.close();
        }
    }
----------------------------------------
    private static void copy(InputStream in, OutputStream out) throws IOException {
        byte[] buf = new byte[BUFFER_SIZE];
        int read;
        while ((read = in.read(buf, 0, BUFFER_SIZE)) != -1) out.write(buf, 0, read);
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,1314452.java,470,479
default,859.java,64,71
----------------------------------------
        public String toString() {
            StringBuffer sb = new StringBuffer();
            for (int idx = 0; idx < volumes.length; idx++) {
                sb.append(volumes[idx].toString());
                if (idx != volumes.length - 1) {
                    sb.append(",");
                }
            }
            return sb.toString();
        }
----------------------------------------
    String sequenceUsingFor(int start, int stop) {
        StringBuilder builder = new StringBuilder();
        for (int i = start; i <= stop; i++) {
            if (i > start) builder.append(',');
            builder.append(i);
        }
        return builder.toString();
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,1314452.java,470,479
default,96830.java,64,71
----------------------------------------
        public String toString() {
            StringBuffer sb = new StringBuffer();
            for (int idx = 0; idx < volumes.length; idx++) {
                sb.append(volumes[idx].toString());
                if (idx != volumes.length - 1) {
                    sb.append(",");
                }
            }
            return sb.toString();
        }
----------------------------------------
    String sequenceUsingFor(int start, int stop) {
        StringBuilder builder = new StringBuilder();
        for (int i = start; i <= stop; i++) {
            if (i > start) builder.append(',');
            builder.append(i);
        }
        return builder.toString();
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,341601.java,369,376
selected,341601.java,235,246
----------------------------------------
    @Override
    public List<Kontrata> listKontrataPaFature(Date fromDate, Date toDate) {
        try {
            return em.createQuery("Select distinct o from Kontrata o where  NOT EXISTS (Select f.kontrata from Fatura f where f.kontrata = o and f.paguar = :paguar and f.anulluar != :anulluar  and f.dataLeximAktual >= :fromDate and f.dataLeximAktual < :toDate)").setParameter("paguar", false).setParameter("anulluar", false).setParameter("fromDate", fromDate).setParameter("toDate", toDate).getResultList();
        } catch (Exception e) {
            throw new NestedException(e.getMessage(), e);
        }
    }
----------------------------------------
    @Override
    public List<Fatura> queryFatura(Kontrata kontrata, Boolean paguar) {
        try {
            if (paguar == null) {
                return em.createQuery("Select o from Fatura o where o.kontrata = :kontrata and o.anulluar = :anulluar order by o.dataLeximAktual DESC").setParameter("kontrata", kontrata).setParameter("anulluar", false).getResultList();
            } else {
                return em.createQuery("Select o from Fatura o where o.kontrata = :kontrata and o.paguar = :paguar and o.anulluar = :anulluar order by o.dataLeximAktual DESC").setParameter("kontrata", kontrata).setParameter("paguar", paguar.booleanValue()).setParameter("anulluar", false).getResultList();
            }
        } catch (Exception e) {
            throw new NestedException(e.getMessage(), e);
        }
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,2012348.java,127,142
default,8930.java,30,44
----------------------------------------
    public ApiInfo parseApi(URL xmlURL) throws ApiParseException {
        InputStream xmlStream = null;
        try {
            xmlStream = xmlURL.openStream();
            return parseApi(xmlStream);
        } catch (IOException e) {
            throw new ApiParseException("Could not open stream for parsing: " + xmlURL, e);
        } finally {
            if (xmlStream != null) {
                try {
                    xmlStream.close();
                } catch (IOException ignored) {
                }
            }
        }
    }
----------------------------------------
    public Configuration(URL url) {
        InputStream in = null;
        try {
            load(in = url.openStream());
        } catch (Exception e) {
            throw new RuntimeException("Could not load configuration from " + url, e);
        } finally {
            if (in != null) {
                try {
                    in.close();
                } catch (IOException ignore) {
                }
            }
        }
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,1554515.java,316,325
selected,1406991.java,743,753
----------------------------------------
    public static Boolean appendToFile(String sFilename, String sContent) {
        try {
            FileWriter oFileWriter = new FileWriter(sFilename, true);
            oFileWriter.write(sContent);
            oFileWriter.close();
        } catch (IOException oException) {
            throw new FilesystemException("Could not write file", sFilename, oException);
        }
        return true;
    }
----------------------------------------
    public static final File appendToFile(char[] data, String fileTo) {
        try {
            File file = new File(fileTo);
            OutputStreamWriter sw = new OutputStreamWriter(makeFile(file, true));
            sw.write(data);
            sw.close();
            return file;
        } catch (Exception e) {
        }
        return null;
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,1834509.java,208,221
selected,1580574.java,22,29
----------------------------------------
    public static void copy(RandomAccessFile in, RandomAccessFile out) {
        try {
            byte[] buf = new byte[1024];
            for (; ; ) {
                int n = in.read(buf);
                if (n < 0) {
                    break;
                }
                out.write(buf, 0, n);
            }
        } catch (IOException e) {
            throw new IOError(e.getMessage(), e);
        }
    }
----------------------------------------
    public static void transfer(InputStream in, OutputStream out) throws IOException {
        byte[] buf = new byte[BUFFER_SIZE];
        while (true) {
            int read = in.read(buf, 0, BUFFER_SIZE);
            if (read == -1) break;
            out.write(buf, 0, read);
        }
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,1352740.java,123,130
default,53106.java,64,71
----------------------------------------
        public static String getHexString(byte[] bytes) {
            if (bytes == null) return null;
            StringBuilder hex = new StringBuilder(2 * bytes.length);
            for (byte b : bytes) {
                hex.append(HEX_CHARS[(b & 0xF0) >> 4]).append(HEX_CHARS[(b & 0x0F)]);
            }
            return hex.toString();
        }
----------------------------------------
    String sequenceUsingFor(int start, int stop) {
        StringBuilder builder = new StringBuilder();
        for (int i = start; i <= stop; i++) {
            if (i > start) builder.append(',');
            builder.append(i);
        }
        return builder.toString();
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,87099.java,100,113
default,86184.java,293,304
----------------------------------------
    public static boolean deleteDir(File dir, boolean deleteRootDir) {
        if (dir.isDirectory()) {
            File[] children = dir.listFiles();
            for (int i = 0; i < children.length; i++) {
                if (!deleteDir(children[i])) {
                    return false;
                }
            }
        }
        if (deleteRootDir) {
            return dir.delete();
        }
        return true;
    }
----------------------------------------
    private void send(ActiveAssociation active, File file) throws InterruptedException, IOException {
        if (!file.isDirectory()) {
            for (int i = 0; i < repeatSingle; ++i) {
                sendFile(active, file);
            }
            return;
        }
        File[] list = file.listFiles();
        for (int i = 0; i < list.length; ++i) {
            send(active, list[i]);
        }
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,387982.java,226,244
default,127778.java,23,38
----------------------------------------
    private static String convertStreamToString(InputStream is) {
        BufferedReader reader = new BufferedReader(new InputStreamReader(is));
        StringBuilder sb = new StringBuilder();
        String line = null;
        try {
            while ((line = reader.readLine()) != null) {
                sb.append(line + "\n");
            }
        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            try {
                is.close();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
        return sb.toString();
    }
----------------------------------------
    private static String getDocumentAt(String urlString) {
        StringBuffer html_text = new StringBuffer();
        try {
            URL url = new URL(urlString);
            URLConnection conn = url.openConnection();
            BufferedReader reader = new BufferedReader(new InputStreamReader(conn.getInputStream()));
            String line = null;
            while ((line = reader.readLine()) != null) html_text.append(line + "\n");
            reader.close();
        } catch (MalformedURLException e) {
            System.out.println("��Ч��URL: " + urlString);
        } catch (IOException e) {
            e.printStackTrace();
        }
        return html_text.toString();
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,307116.java,228,241
default,116349.java,126,130
----------------------------------------
    public static void copy(InputStream in, OutputStream out) throws IOException {
        synchronized (in) {
            synchronized (out) {
                byte[] buffer = new byte[256];
                while (true) {
                    int bytesRead = in.read(buffer);
                    if (bytesRead == -1) {
                        break;
                    }
                    out.write(buffer, 0, bytesRead);
                }
            }
        }
    }
----------------------------------------
    private static void copy(InputStream in, OutputStream out) throws IOException {
        byte[] buf = new byte[BUFFER_SIZE];
        int read;
        while ((read = in.read(buf, 0, BUFFER_SIZE)) != -1) out.write(buf, 0, read);
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,298295.java,162,177
selected,2226196.java,40,53
----------------------------------------
    private static char[] readChars(File file) {
        CharArrayWriter caw = new CharArrayWriter();
        try {
            Reader fr = new FileReader(file);
            Reader in = new BufferedReader(fr);
            int count = 0;
            char[] buf = new char[16384];
            while ((count = in.read(buf)) != -1) {
                if (count > 0) caw.write(buf, 0, count);
            }
            in.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
        return caw.toCharArray();
    }
----------------------------------------
    public static String getContents(InputStream is) throws IOException {
        byte[] buffer = new byte[4096];
        OutputStream outputStream = new ByteArrayOutputStream();
        while (true) {
            int read = is.read(buffer);
            if (read == -1) {
                break;
            }
            outputStream.write(buffer, 0, read);
        }
        outputStream.close();
        String s = outputStream.toString();
        return s;
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,1636296.java,182,192
selected,1680585.java,23,31
----------------------------------------
    public static void getFileFromZip(ZipFile zip, String fileName, File outputFile) throws IOException {
        InputStream in = zip.getInputStream(zip.getEntry(fileName));
        OutputStream out = new FileOutputStream(outputFile);
        byte[] buffer = new byte[1024];
        int len;
        while ((len = in.read(buffer)) >= 0) {
            out.write(buffer, 0, len);
        }
        in.close();
        out.close();
    }
----------------------------------------
    public static void copyInputReader2OutWriter(Reader reader, Writer writer) throws IOException {
        int read = 0;
        char buffer[] = new char[8192];
        while ((read = reader.read(buffer)) > -1) {
            writer.write(buffer, 0, read);
        }
        reader.close();
        writer.close();
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,2734181.java,241,256
default,7993.java,126,130
----------------------------------------
    public static void copy(InputStream is, OutputStream os) {
        try {
            int read = 0;
            byte[] buffer = new byte[8096];
            while ((read = is.read(buffer)) > 0) {
                os.write(buffer, 0, read);
            }
        } catch (IOException e) {
            throw new UnexpectedException(e);
        } finally {
            try {
                is.close();
            } catch (Exception e) {
            }
        }
    }
----------------------------------------
    private static void copy(InputStream in, OutputStream out) throws IOException {
        byte[] buf = new byte[BUFFER_SIZE];
        int read;
        while ((read = in.read(buf, 0, BUFFER_SIZE)) != -1) out.write(buf, 0, read);
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,2035585.java,150,159
selected,1411785.java,62,71
----------------------------------------
    private Sequence parseAsString(InputStream is, String encoding) throws IOException {
        ByteArrayOutputStream bos = new ByteArrayOutputStream();
        byte[] buf = new byte[4096];
        int read = -1;
        while ((read = is.read(buf)) > -1) {
            bos.write(buf, 0, read);
        }
        String s = new String(bos.toByteArray(), encoding);
        return new StringValue(s);
    }
----------------------------------------
    public static void streamData(Reader reader, Writer writer) throws IOException {
        BufferedReader bufreader = new BufferedReader(reader);
        BufferedWriter bufwriter = new BufferedWriter(writer);
        final char[] buffer = new char[512];
        int length;
        while ((length = bufreader.read(buffer)) != -1) {
            bufwriter.write(buffer, 0, length);
        }
        bufwriter.flush();
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,1819337.java,144,162
selected,1372098.java,24,35
----------------------------------------
    private static void copyFile(File sourceFile, File destFile) throws IOException {
        if (!destFile.exists()) {
            destFile.createNewFile();
        }
        FileChannel source = null;
        FileChannel destination = null;
        try {
            source = new FileInputStream(sourceFile).getChannel();
            destination = new FileOutputStream(destFile).getChannel();
            destination.transferFrom(source, 0, source.size());
        } finally {
            if (source != null) {
                source.close();
            }
            if (destination != null) {
                destination.close();
            }
        }
    }
----------------------------------------
    public static void copyFile(File in, File out) throws IOException {
        FileChannel inChannel = new FileInputStream(in).getChannel();
        FileChannel outChannel = new FileOutputStream(out).getChannel();
        try {
            inChannel.transferTo(0, inChannel.size(), outChannel);
        } catch (IOException e) {
            throw e;
        } finally {
            if (inChannel != null) inChannel.close();
            if (outChannel != null) outChannel.close();
        }
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,1106829.java,149,158
selected,2577277.java,167,177
----------------------------------------
    public static byte[] readBytes(InputStream in) throws IOException {
        ByteArrayOutputStream out = new ByteArrayOutputStream();
        byte[] buffer = new byte[4000];
        while (true) {
            int n = in.read(buffer);
            if (n < 0) break;
            out.write(buffer, 0, n);
        }
        return out.toByteArray();
    }
----------------------------------------
    public static byte[] InputStreamToArray(InputStream is) throws IOException {
        byte b[] = new byte[8192];
        ByteArrayOutputStream out = new ByteArrayOutputStream();
        while (true) {
            int read = is.read(b);
            if (read < 1) break;
            out.write(b, 0, read);
        }
        out.close();
        return out.toByteArray();
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,780597.java,1022,1038
selected,780597.java,557,574
----------------------------------------
    public static String getCategoryName(long aid) throws Exception {
        Session s = null;
        try {
            s = HibernateUtils.getSessionFactory().getCurrentSession();
            s.beginTransaction();
            String query = "select R.categoryName from AccountCategory R where R.categoryId=(select A.categoryId from Account A where A.accountId=?)";
            Query q = s.createQuery(query);
            q.setLong(0, aid);
            String aname = (String) q.uniqueResult();
            s.getTransaction().commit();
            return aname;
        } catch (Exception e) {
            throw e;
        } finally {
            if (s != null) HibernateUtils.closeSession();
        }
    }
----------------------------------------
    public int getTransactionsCount(long uid, long accountId) throws Exception {
        Session s = null;
        try {
            s = HibernateUtils.getSessionFactory().getCurrentSession();
            s.beginTransaction();
            String query = "select count(R.txId) from Transaction R " + "where R.initiatorId=? and (R.fromAccountId=? or R.toAccountId=?)";
            Query q = s.createQuery(query);
            q.setLong(0, uid);
            q.setLong(1, accountId);
            q.setLong(2, accountId);
            int count = (Integer) q.uniqueResult();
            return count;
        } catch (Exception e) {
            throw e;
        } finally {
            if (s != null) HibernateUtils.closeSession();
        }
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,780597.java,1483,1497
selected,780597.java,933,951
----------------------------------------
    public List<Favourites> getFavourites(long uid) throws Exception {
        Session s = null;
        try {
            s = HibernateUtils.getSessionFactory().getCurrentSession();
            s.beginTransaction();
            String query = "select R from Favourites R where R.uid=? order by R.name";
            Query q = s.createQuery(query);
            q.setLong(0, uid);
            return q.list();
        } catch (Exception e) {
            throw e;
        } finally {
            if (s != null) HibernateUtils.closeSession();
        }
    }
----------------------------------------
    public int updateAccountForCategory(Long accountId, Long newcategory) throws Exception {
        Session s = null;
        try {
            s = HibernateUtils.getSessionFactory().getCurrentSession();
            s.beginTransaction();
            if (accountId == null || newcategory == null) return -1;
            String query = "update Account R set R.categoryId=? where R.accountId=?";
            Query q = s.createQuery(query);
            q.setLong(0, newcategory);
            q.setLong(1, accountId);
            int r = q.executeUpdate();
            s.getTransaction().commit();
            return r;
        } catch (Exception e) {
            throw e;
        } finally {
            if (s != null) HibernateUtils.closeSession();
        }
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,2144364.java,145,158
selected,421895.java,41,57
----------------------------------------
    public void storePatch(Patch p, int bankNum, int patchNum) {
        try {
            Thread.sleep(100);
        } catch (Exception e) {
        }
        p.sysex[3] = (byte) 0x16;
        p.sysex[6] = (byte) bankNum;
        p.sysex[7] = (byte) patchNum;
        sendPatchWorker(p);
        try {
            Thread.sleep(100);
        } catch (Exception e) {
        }
    }
----------------------------------------
    public void storePatch(Patch p, int bankNum, int patchNum) {
        setBankNum(bankNum);
        setPatchNum(patchNum);
        try {
            Thread.sleep(100);
        } catch (Exception e) {
        }
        p.sysex[3] = (byte) 0x20;
        p.sysex[6] = (byte) (bankNum << 1);
        p.sysex[7] = (byte) (patchNum);
        sendPatchWorker(p);
        try {
            Thread.sleep(100);
        } catch (Exception e) {
        }
        setPatchNum(patchNum);
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,2067083.java,201,211
selected,1584180.java,324,332
----------------------------------------
        private String toChecksum(byte[] data) {
            StringBuffer checksum = new StringBuffer();
            for (int j = 0; j < data.length; j++) {
                String hexString = Integer.toHexString(data[j] & BYTE_MASK);
                if (hexString.length() == 1) {
                    checksum.append("0");
                }
                checksum.append(hexString);
            }
            return checksum.toString();
        }
----------------------------------------
    private String toHex(byte[] buf) {
        StringBuffer hexString = new StringBuffer();
        for (int i = 0; i < buf.length; i++) {
            String h = Integer.toHexString(0xFF & buf[i]);
            while (h.length() < 2) h = "0" + h;
            hexString.append(h);
        }
        return hexString.toString();
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,1138061.java,46,55
selected,1675442.java,182,189
----------------------------------------
    public static String toHex(byte input[]) {
        if (input == null) return null;
        StringBuffer output = new StringBuffer(input.length * 2);
        for (int i = 0; i < input.length; i++) {
            int current = input[i] & 0xff;
            if (current < 16) output.append(" 0 ");
            output.append(Integer.toString(current, 16));
        }
        return output.toString();
    }
----------------------------------------
    private static String toHexString(byte[] v) {
        StringBuffer sb = new StringBuffer(v.length * 2);
        for (int i = 0; i < v.length; i++) {
            int b = v[i] & 0xFF;
            sb.append(HEX_DIGITS.charAt(b >>> 4)).append(HEX_DIGITS.charAt(b & 0xF));
        }
        return sb.toString();
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,549982.java,102,112
selected,1368312.java,105,120
----------------------------------------
    public void copyFile(File source, File destination) throws FileNotFoundException, IOException {
        FileInputStream fis = new FileInputStream(source);
        FileOutputStream fos = new FileOutputStream(destination);
        byte[] buf = new byte[1024];
        int i = 0;
        while ((i = fis.read(buf)) != -1) {
            fos.write(buf, 0, i);
        }
        fis.close();
        fos.close();
    }
----------------------------------------
    public static boolean downloadFile(String srcUri, String srcDest) {
        try {
            URL url = new URL(srcUri);
            InputStream is = url.openStream();
            BufferedOutputStream bos = new BufferedOutputStream(new FileOutputStream(srcDest));
            byte[] buff = new byte[10000];
            int b;
            while ((b = is.read(buff)) > 0) bos.write(buff, 0, b);
            is.close();
            bos.close();
        } catch (Exception e) {
            e.printStackTrace();
            return false;
        }
        return true;
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,1865210.java,38,48
selected,315974.java,110,120
----------------------------------------
    public static byte[] readInputStream(InputStream inStream) throws Exception {
        ByteArrayOutputStream outSteam = new ByteArrayOutputStream();
        byte[] buffer = new byte[4096];
        int len = 0;
        while ((len = inStream.read(buffer)) != -1) {
            outSteam.write(buffer, 0, len);
        }
        outSteam.close();
        inStream.close();
        return outSteam.toByteArray();
    }
----------------------------------------
    private void writeFileToZip(ZipOutputStream out, String sourceFilename, String vPath) throws IOException {
        FileInputStream in = new FileInputStream(sourceFilename);
        out.putNextEntry(new ZipEntry(vPath));
        int len;
        byte[] buf = new byte[1024];
        while ((len = in.read(buf)) > 0) {
            out.write(buf, 0, len);
        }
        out.closeEntry();
        in.close();
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,594524.java,224,244
selected,2252964.java,204,217
----------------------------------------
    private static Class<?> getPrimitiveWrapper(Class<?> primitiveType) {
        if (boolean.class.equals(primitiveType)) {
            return Boolean.class;
        } else if (float.class.equals(primitiveType)) {
            return Float.class;
        } else if (long.class.equals(primitiveType)) {
            return Long.class;
        } else if (int.class.equals(primitiveType)) {
            return Integer.class;
        } else if (short.class.equals(primitiveType)) {
            return Short.class;
        } else if (byte.class.equals(primitiveType)) {
            return Byte.class;
        } else if (double.class.equals(primitiveType)) {
            return Double.class;
        } else if (char.class.equals(primitiveType)) {
            return Character.class;
        } else {
            return null;
        }
    }
----------------------------------------
    public HashMap<String, Date> getStartDateMap(String type) {
        if (type.equals(ST_INST)) {
            return instanceDateMap;
        } else if (type.equals(ST_ORIG)) {
            return originatorDateMap;
        } else if (type.equals(ST_TASK)) {
            return taskDateMap;
        } else if (type.equals(ST_EVEN)) {
            return eventDateMap;
        } else if (type.equals(ST_DATA)) {
            return dataDateMap;
        }
        return null;
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,2447320.java,516,523
selected,2447320.java,370,377
----------------------------------------
    public final HTTPResponse OPTIONS(final String uri, final byte[] data, final NVPair[] headers) throws Exception {
        return new AbstractRequest(uri) {

            HTTPResponse doRequest(HTTPConnection connection, String path) throws IOException, ModuleException {
                return connection.Options(path, mergeHeaders(headers), data);
            }
        }.getHTTPResponse();
    }
----------------------------------------
    public final HTTPResponse GET(final String uri, final NVPair[] queryData, final NVPair[] headers) throws Exception {
        return new AbstractRequest(uri) {

            HTTPResponse doRequest(HTTPConnection connection, String path) throws IOException, ModuleException {
                return connection.Get(path, queryData, mergeHeaders(headers));
            }
        }.getHTTPResponse();
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,918301.java,118,127
selected,946331.java,63,70
----------------------------------------
    public static void pump(InputStream ins, OutputStream outs) throws IOException {
        byte[] buff = new byte[4096];
        int count;
        do {
            count = ins.read(buff, 0, 4096);
            if (count > 0) {
                outs.write(buff, 0, count);
            }
        } while (count > 0);
    }
----------------------------------------
    public static void copy(InputStream inputStream, RandomAccessFile randomAccessFile) throws IOException {
        int bytesRead;
        byte[] buffer = new byte[2048];
        while ((bytesRead = inputStream.read(buffer)) > 0) {
            randomAccessFile.write(buffer, 0, bytesRead);
        }
        inputStream.close();
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,918301.java,118,127
default,118309.java,126,130
----------------------------------------
    public static void pump(InputStream ins, OutputStream outs) throws IOException {
        byte[] buff = new byte[4096];
        int count;
        do {
            count = ins.read(buff, 0, 4096);
            if (count > 0) {
                outs.write(buff, 0, count);
            }
        } while (count > 0);
    }
----------------------------------------
    private static void copy(InputStream in, OutputStream out) throws IOException {
        byte[] buf = new byte[BUFFER_SIZE];
        int read;
        while ((read = in.read(buf, 0, BUFFER_SIZE)) != -1) out.write(buf, 0, read);
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,1202455.java,91,98
selected,1710788.java,571,578
----------------------------------------
    public static double[][] scalarMultiply(double[][] mat, double scalar) {
        for (int r = 0; r < mat.length; r++) {
            for (int c = 0; c < mat[0].length; c++) {
                mat[r][c] *= scalar;
            }
        }
        return mat;
    }
----------------------------------------
        public static void fromMatrixByRow(double[][] in, double[] out) {
            int eleI = 0;
            for (int rowI = 0; rowI < 2; rowI++) {
                for (int colI = 0; colI < 2; colI++) {
                    out[eleI++] = in[rowI][colI];
                }
            }
        }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,840057.java,67,74
default,122700.java,36,41
----------------------------------------
    private static void generateUploadBoxID() throws Exception {
        String rand = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXTZabcdefghiklmnopqrstuvwxyz";
        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < 16; i++) {
            sb.append(rand.charAt((int) Math.round(1 + (int) (Math.random() * 60))));
        }
        uid = sb.toString();
    }
----------------------------------------
    public void testForSkip() {
        StringBuilder builder = new StringBuilder();
        String string = "123456";
        for (int i = 0; i < string.length(); i += 2) builder.append(string.charAt(i));
        assertEquals("135", builder.toString());
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,1918348.java,52,59
selected,2523147.java,190,204
----------------------------------------
    public static final byte[] readAll(InputStream in) throws IOException {
        final ByteArrayOutputStream out = new ByteArrayOutputStream();
        final byte[] buf = new byte[1024 * 16];
        for (int v; (v = in.read(buf)) >= 0; ) {
            out.write(buf, 0, v);
        }
        return out.toByteArray();
    }
----------------------------------------
    public static String readerToString(Reader rdr) {
        String ret = null;
        try {
            int len = 0;
            char[] buf = new char[2048];
            StringWriter wrt = new StringWriter();
            while ((len = rdr.read(buf)) != -1) {
                wrt.write(buf, 0, len);
            }
            ret = wrt.toString();
        } catch (UnsupportedEncodingException e) {
        } catch (IOException e) {
        }
        return ret;
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,704843.java,167,178
selected,704843.java,142,158
----------------------------------------
        public float[] toFloatArray(byte[] in_buff, int in_offset, float[] out_buff, int out_offset, int out_len) {
            int in_len = out_len * 4;
            if (bytebuffer == null || bytebuffer.capacity() < in_len) {
                bytebuffer = ByteBuffer.allocate(in_len).order(ByteOrder.LITTLE_ENDIAN);
                floatbuffer = bytebuffer.asFloatBuffer();
            }
            bytebuffer.position(0);
            floatbuffer.position(0);
            bytebuffer.put(in_buff, in_offset, in_len);
            floatbuffer.get(out_buff, out_offset, out_len);
            return out_buff;
        }
----------------------------------------
        public byte[] toByteArray(float[] in_buff, int in_offset, int in_len, byte[] out_buff, int out_offset) {
            int out_len = in_len * 8;
            if (bytebuffer == null || bytebuffer.capacity() < out_len) {
                bytebuffer = ByteBuffer.allocate(out_len).order(ByteOrder.BIG_ENDIAN);
                floatbuffer = bytebuffer.asDoubleBuffer();
            }
            floatbuffer.position(0);
            bytebuffer.position(0);
            if (double_buff == null || double_buff.length < in_offset + in_len) double_buff = new double[in_offset + in_len];
            int in_offset_end = in_offset + in_len;
            for (int i = in_offset; i < in_offset_end; i++) {
                double_buff[i] = in_buff[i];
            }
            floatbuffer.put(double_buff, in_offset, in_len);
            bytebuffer.get(out_buff, out_offset, out_len);
            return out_buff;
        }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,831833.java,344,352
selected,831833.java,211,222
----------------------------------------
    public static String getFingerprintAsString(X509Certificate cert) {
        try {
            byte[] res = generateSHA1Fingerprint(cert.getEncoded());
            return Hex.encode(res);
        } catch (CertificateEncodingException cee) {
            System.err.println("Error encoding X509 certificate." + cee.getLocalizedMessage());
        }
        return null;
    }
----------------------------------------
    public static String getCertFingerprintAsString(byte[] ba) {
        try {
            X509Certificate cert = getCertfromByteArray(ba);
            byte[] res = generateSHA1Fingerprint(cert.getEncoded());
            return Hex.encode(res);
        } catch (CertificateEncodingException cee) {
            System.err.println("Error encoding X509 certificate." + cee.getLocalizedMessage());
        } catch (CertificateException cee) {
            System.err.println("Error decoding X509 certificate." + cee.getLocalizedMessage());
        }
        return null;
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,448380.java,453,463
selected,1578910.java,500,510
----------------------------------------
    public void setMatrix(int[] r, int[] c, Matrix X) {
        try {
            for (int i = 0; i < r.length; i++) {
                for (int j = 0; j < c.length; j++) {
                    A[r[i]][c[j]] = X.get(i, j);
                }
            }
        } catch (ArrayIndexOutOfBoundsException e) {
            throw new ArrayIndexOutOfBoundsException("Submatrix indices");
        }
    }
----------------------------------------
    public void setMatrix(int[] r, int j0, int j1, Matrix X) {
        try {
            for (int i = 0; i < r.length; i++) {
                for (int j = j0; j <= j1; j++) {
                    A[r[i]][j] = X.get(i, j - j0);
                }
            }
        } catch (ArrayIndexOutOfBoundsException e) {
            throw new ArrayIndexOutOfBoundsException("Submatrix indices");
        }
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,448380.java,733,741
selected,448380.java,652,662
----------------------------------------
    public Matrix arrayRightDivideEquals(Matrix B) {
        checkMatrixDimensions(B);
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                A[i][j] = A[i][j] / B.A[i][j];
            }
        }
        return this;
    }
----------------------------------------
    public Matrix minus(Matrix B) {
        checkMatrixDimensions(B);
        Matrix X = new Matrix(m, n);
        double[][] C = X.getArray();
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                C[i][j] = A[i][j] - B.A[i][j];
            }
        }
        return X;
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,165236.java,103,118
default,24048.java,49,62
----------------------------------------
    private static boolean verifyAppId(String appid) {
        try {
            String urlstr = "http://" + appid + ".appspot.com";
            URL url = new URL(urlstr);
            BufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream()));
            StringBuffer buf = new StringBuffer();
            String line;
            while ((line = reader.readLine()) != null) {
                buf.append(line);
            }
            reader.close();
            return buf.toString().contains("snova");
        } catch (Exception e) {
        }
        return false;
    }
----------------------------------------
    String read(File f) throws IOException {
        StringBuilder sb = new StringBuilder();
        BufferedReader in = new BufferedReader(new FileReader(f));
        try {
            String line;
            while ((line = in.readLine()) != null) {
                sb.append(line);
                sb.append("\n");
            }
        } finally {
            in.close();
        }
        return sb.toString();
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,100172.java,473,481
selected,2678801.java,253,259
----------------------------------------
    public double[] getColumnPackedCopy() {
        double[] vals = new double[m * n];
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                vals[i + j * m] = A[i][j];
            }
        }
        return vals;
    }
----------------------------------------
    private void clearMappedData() {
        for (int i = 0; i < mappedDatas.length; i++) {
            for (int j = 0; j < mappedDatas[i].length; j++) {
                mappedDatas[i][j] = null;
            }
        }
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,100172.java,698,708
selected,448380.java,765,773
----------------------------------------
    public Matrix minus(Matrix B) {
        checkMatrixDimensions(B);
        Matrix X = new Matrix(m, n);
        double[][] C = X.getArray();
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                C[i][j] = A[i][j] - B.A[i][j];
            }
        }
        return X;
    }
----------------------------------------
    public Matrix arrayLeftDivideEquals(Matrix B) {
        checkMatrixDimensions(B);
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                A[i][j] = B.A[i][j] / A[i][j];
            }
        }
        return this;
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,2130165.java,370,379
default,107906.java,290,295
----------------------------------------
    protected void writeDocumentNoClosing(Document document, OutputStream documentOutputStream, boolean omitXmlDeclaration) throws TransformerConfigurationException, TransformerFactoryConfigurationError, TransformerException, IOException {
        NoCloseOutputStream outputStream = new NoCloseOutputStream(documentOutputStream);
        Result result = new StreamResult(outputStream);
        Transformer xformer = TransformerFactory.newInstance().newTransformer();
        if (omitXmlDeclaration) {
            xformer.setOutputProperty(OutputKeys.OMIT_XML_DECLARATION, "yes");
        }
        Source source = new DOMSource(document);
        xformer.transform(source, result);
    }
----------------------------------------
    public static void exampleSimple2(String sourceID, String xslID) throws TransformerException, TransformerConfigurationException {
        TransformerFactory tfactory = TransformerFactory.newInstance();
        Transformer transformer = tfactory.newTransformer(new StreamSource(xslID));
        transformer.transform(new StreamSource(sourceID), new StreamResult(new File("exampleSimple2.out")));
        System.out.println("\nOutput written to exampleSimple2.out\n");
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,2638560.java,100,115
selected,1259974.java,40,56
----------------------------------------
    private static void delete(EntityManagerFactory entityManagerFactory) {
        EntityManager entityManager = entityManagerFactory.createEntityManager();
        try {
            entityManager.getTransaction().begin();
            Query query = entityManager.createQuery("DELETE FROM Person p");
            query.executeUpdate();
            Query query2 = entityManager.createQuery("DELETE FROM Address a");
            query2.executeUpdate();
            entityManager.getTransaction().commit();
        } finally {
            if (entityManager.getTransaction().isActive()) {
                entityManager.getTransaction().rollback();
            }
            entityManager.close();
        }
    }
----------------------------------------
    private static void insertanddetach(EntityManagerFactory entityManagerFactory) {
        EntityManager entityManager = entityManagerFactory.createEntityManager();
        Person person = new Person();
        try {
            entityManager.getTransaction().begin();
            person.setFirstName("Jesse");
            person.setLastName("Clark");
            entityManager.persist(person);
            entityManager.getTransaction().commit();
        } finally {
            if (entityManager.getTransaction().isActive()) {
                entityManager.getTransaction().rollback();
            }
            entityManager.close();
        }
        attachedPerson = person;
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,1522322.java,143,150
default,26963.java,64,71
----------------------------------------
    public static String flattenStrarr(String[] strs) {
        StringBuffer sb = new StringBuffer();
        for (int i = 0; i < strs.length; ++i) {
            if (i > 0) sb.append(' ');
            sb.append(strs[i]);
        }
        return sb.toString();
    }
----------------------------------------
    String sequenceUsingFor(int start, int stop) {
        StringBuilder builder = new StringBuilder();
        for (int i = start; i <= stop; i++) {
            if (i > start) builder.append(',');
            builder.append(i);
        }
        return builder.toString();
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,653187.java,45,56
selected,2564261.java,93,104
----------------------------------------
    public static void copyFile(FileInputStream source, FileOutputStream target) throws Exception {
        FileChannel inChannel = source.getChannel();
        FileChannel outChannel = target.getChannel();
        try {
            inChannel.transferTo(0, inChannel.size(), outChannel);
        } catch (IOException e) {
            throw e;
        } finally {
            if (inChannel != null) inChannel.close();
            if (outChannel != null) outChannel.close();
        }
    }
----------------------------------------
    public static void copyFile(File in, File out) throws IOException {
        FileChannel inChannel = new FileInputStream(in).getChannel();
        FileChannel outChannel = new FileOutputStream(out).getChannel();
        try {
            inChannel.transferTo(0, inChannel.size(), outChannel);
        } catch (IOException e) {
            throw e;
        } finally {
            if (inChannel != null) inChannel.close();
            if (outChannel != null) outChannel.close();
        }
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,653187.java,58,70
default,71042.java,26,44
----------------------------------------
    public static void copyFile(InputStream source, String target) throws Exception {
        InputStreamReader reader = new InputStreamReader(source);
        FileWriter writer = new FileWriter(target);
        try {
            int c = -1;
            while ((c = reader.read()) != -1) writer.write(c);
        } catch (IOException e) {
            throw e;
        } finally {
            reader.close();
            writer.close();
        }
    }
----------------------------------------
    public static void copyFile(File source, File dest) throws IOException {
        if (!dest.exists()) {
            dest.createNewFile();
        }
        InputStream in = null;
        OutputStream out = null;
        try {
            in = new FileInputStream(source);
            out = new FileOutputStream(dest);
            byte[] buf = new byte[1024];
            int len;
            while ((len = in.read(buf)) > 0) {
                out.write(buf, 0, len);
            }
        } finally {
            in.close();
            out.close();
        }
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,2078036.java,69,77
selected,2225359.java,152,162
----------------------------------------
    private String formatHash(byte[] digest) {
        StringBuffer hexValue = new StringBuffer();
        for (int i = 0; i < digest.length; i++) {
            int b = digest[i] & 0xff;
            if (Integer.toHexString(b).length() == 1) hexValue = hexValue.append("0");
            hexValue.append(Integer.toHexString(b));
        }
        return hexValue.toString();
    }
----------------------------------------
    private String byteArrayToHexString(byte[] b) {
        StringBuffer sb = new StringBuffer(b.length * 2);
        for (int i = 0; i < b.length; i++) {
            int v = b[i] & 0xff;
            if (v < 16) {
                sb.append('0');
            }
            sb.append(Integer.toHexString(v));
        }
        return sb.toString().toUpperCase();
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,124086.java,169,176
selected,567687.java,59,67
----------------------------------------
    public static void copyPipe(InputStream in, OutputStream out, int bufSizeHint) throws IOException {
        int read = -1;
        byte[] buf = new byte[bufSizeHint];
        while ((read = in.read(buf, 0, bufSizeHint)) >= 0) {
            out.write(buf, 0, read);
        }
        out.flush();
    }
----------------------------------------
    private static void copyStreamToJarStream(JarOutputStream jout, InputStream src) throws IOException {
        byte[] buf = new byte[512];
        do {
            int bread = src.read(buf);
            if (bread <= 0) break;
            jout.write(buf, 0, bread);
        } while (true);
        jout.closeEntry();
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,602619.java,30,43
selected,998396.java,36,46
----------------------------------------
    public String checksum(File file, String algorithm) throws FileNotFoundException, NoSuchAlgorithmException, IOException {
        InputStream filein = new FileInputStream(file);
        byte[] buffer = new byte[4096];
        MessageDigest digest = MessageDigest.getInstance(algorithm);
        int i;
        do {
            i = filein.read(buffer);
            if (i > 0) {
                digest.update(buffer, 0, i);
            }
        } while (i != -1);
        filein.close();
        return toHexString(digest.digest());
    }
----------------------------------------
    public static byte[] computeDigest(String hashAlgorithm, File pathname, final int chunkLength) throws NoSuchAlgorithmException, IOException {
        byte[] data = new byte[chunkLength];
        MessageDigest md = MessageDigest.getInstance(hashAlgorithm);
        FileInputStream in = new FileInputStream(pathname);
        int chunkBytesRead;
        while ((chunkBytesRead = in.read(data, 0, chunkLength)) != -1) {
            md.update(data, 0, chunkBytesRead);
        }
        in.close();
        return md.digest();
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,2082697.java,72,80
selected,2186127.java,96,106
----------------------------------------
    public static String convertTextFile2String(File f) throws IOException {
        BufferedReader br = new BufferedReader(new FileReader(f));
        StringBuffer sb = new StringBuffer("");
        String ligne = null;
        while ((ligne = br.readLine()) != null) {
            sb.append(ligne).append(" ");
        }
        return sb.toString().trim();
    }
----------------------------------------
    public static String readFromURL(String urlStr) throws IOException {
        URL url = new URL(urlStr);
        StringBuilder sb = new StringBuilder();
        BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));
        String inputLine;
        while ((inputLine = in.readLine()) != null) {
            sb.append(inputLine);
        }
        in.close();
        return sb.toString();
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,626499.java,316,329
selected,826753.java,78,88
----------------------------------------
    public static void saveFile(final InputStream in, final File file) throws IOException {
        FileOutputStream out = null;
        try {
            out = new FileOutputStream(file);
            final byte[] data = new byte[8 * 1024];
            int length;
            while ((length = in.read(data)) != -1) {
                out.write(data, 0, length);
            }
        } finally {
            close(in);
            close(out);
        }
    }
----------------------------------------
    public static ByteArrayOutputStream getByteArrayOutputStream(InputStream in) throws IOException {
        ByteArrayOutputStream out = new ByteArrayOutputStream();
        byte[] buffer = new byte[__copyBufferSize];
        int length = 0;
        while ((length = in.read(buffer, 0, __copyBufferSize)) != -1) out.write(buffer, 0, length);
        try {
            in.close();
        } catch (Exception e) {
        }
        return out;
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,1347077.java,208,222
selected,1347077.java,29,42
----------------------------------------
    private Party getUser(String id, Class c) {
        Transaction tx = null;
        Party party = null;
        Session session = HibernateUtil.getSessionFactory().getCurrentSession();
        try {
            tx = session.beginTransaction();
            System.out.println("OST: Query to database some action");
            party = (Party) session.createQuery("SELECT m FROM " + c.getName() + " as m WHERE party_id like '" + id + "'").uniqueResult();
            tx.commit();
        } catch (HibernateException e) {
            if (tx != null && tx.isActive()) tx.rollback();
            throw e;
        }
        return party;
    }
----------------------------------------
    public AbstractDataModel getMessage(int id, Class c) {
        Transaction tx = null;
        AbstractDataModel model = null;
        Session session = HibernateUtil.getSessionFactory().getCurrentSession();
        try {
            tx = session.beginTransaction();
            model = (AbstractDataModel) session.createQuery("SELECT m FROM " + c.getName() + " as m WHERE id=" + id).uniqueResult();
            tx.commit();
        } catch (HibernateException e) {
            if (tx != null && tx.isActive()) tx.rollback();
            throw e;
        }
        return model;
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,2509245.java,538,557
selected,497716.java,662,681
----------------------------------------
    public static String nullSafeToString(Object[] array) {
        if (array == null) {
            return NULL_STRING;
        }
        int length = array.length;
        if (length == 0) {
            return EMPTY_ARRAY;
        }
        StringBuffer buffer = new StringBuffer();
        for (int i = 0; i < length; i++) {
            if (i == 0) {
                buffer.append(ARRAY_START);
            } else {
                buffer.append(ARRAY_ELEMENT_SEPARATOR);
            }
            buffer.append(String.valueOf(array[i]));
        }
        buffer.append(ARRAY_END);
        return buffer.toString();
    }
----------------------------------------
    public static String nullSafeToString(double[] array) {
        if (array == null) {
            return NULL_STRING;
        }
        int length = array.length;
        if (length == 0) {
            return EMPTY_ARRAY;
        }
        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < length; i++) {
            if (i == 0) {
                sb.append(ARRAY_START);
            } else {
                sb.append(ARRAY_ELEMENT_SEPARATOR);
            }
            sb.append(array[i]);
        }
        sb.append(ARRAY_END);
        return sb.toString();
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,1737768.java,45,56
selected,396771.java,24,33
----------------------------------------
    public static String getHash(String text) {
        String ret = null;
        try {
            MessageDigest md = MessageDigest.getInstance("SHA-256");
            md.update(text.getBytes());
            ret = getHex(md.digest());
        } catch (NoSuchAlgorithmException e) {
            log.error(e);
            throw new OopsException(e, "Hash Error.");
        }
        return ret;
    }
----------------------------------------
    public String hash(String text) {
        try {
            MessageDigest md = MessageDigest.getInstance(hashFunction);
            md.update(text.getBytes(charset));
            byte[] raw = md.digest();
            return new String(encodeHex(raw));
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,2662703.java,151,161
selected,2674335.java,94,105
----------------------------------------
    private String toString(InputStream inputStream) throws IOException {
        String string;
        StringBuilder outputBuilder = new StringBuilder();
        if (inputStream != null) {
            BufferedReader reader = new BufferedReader(new InputStreamReader(inputStream));
            while (null != (string = reader.readLine())) {
                outputBuilder.append(string).append('\n');
            }
        }
        return outputBuilder.toString();
    }
----------------------------------------
    public static String readAll(File file) throws Exception {
        StringBuffer contents = new StringBuffer();
        BufferedReader reader = new BufferedReader(new FileReader(file));
        String text = null;
        while ((text = reader.readLine()) != null) {
            contents.append(text).append(System.getProperty("line.separator"));
        }
        if (reader != null) {
            reader.close();
        }
        return contents.toString();
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,2730348.java,551,562
selected,1427993.java,371,380
----------------------------------------
    public static String toString(double[]... v) {
        StringBuffer str = new StringBuffer();
        for (int i = 0; i < v.length; i++) {
            for (int j = 0; j < v[i].length; j++) {
                str.append(v[i][j] + " ");
            }
            if (i < v.length - 1) {
                str.append("\n");
            }
        }
        return str.toString();
    }
----------------------------------------
    public String getString(int[] indices) {
        StringBuffer string = new StringBuffer();
        for (int i = 0; i < indices.length; i++) {
            if (i > 0) {
                string.append(',');
            }
            string.append(indices[i]);
        }
        return string.toString();
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,2059760.java,18,26
selected,1157126.java,17,23
----------------------------------------
    public static String encodeSha256(String s) throws UnsupportedEncodingException, NoSuchAlgorithmException {
        MessageDigest m = null;
        String result = null;
        m = MessageDigest.getInstance("SHA-256");
        m.reset();
        byte[] hash = m.digest(s.getBytes("UTF-8"));
        result = byteToBase64(hash);
        return result;
    }
----------------------------------------
    public static String encrypt(String txt) throws Exception {
        MessageDigest md = MessageDigest.getInstance("SHA");
        md.update(txt.getBytes("UTF-8"));
        byte raw[] = md.digest();
        String hash = (new BASE64Encoder()).encode(raw);
        return hash;
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,1723164.java,188,198
default,20490.java,54,59
----------------------------------------
    private static String getAttributeValue(Node node, String attribname) {
        final NamedNodeMap attributes = node.getAttributes();
        String value = null;
        if (attributes != null) {
            Node attribute = attributes.getNamedItem(attribname);
            if (attribute != null) {
                value = attribute.getNodeValue();
            }
        }
        return value;
    }
----------------------------------------
    private static String findAttribute(Node node, String name) {
        NamedNodeMap map = node.getAttributes();
        if (map == null) return null;
        Node att = map.getNamedItem(name);
        if (att == null) return null; else return att.getNodeValue();
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,1966734.java,484,494
selected,1966734.java,476,482
----------------------------------------
    protected String findAndRemoveUsername(StringBuffer io_urlBuffer) {
        int indexOfAt = io_urlBuffer.toString().lastIndexOf('@');
        int indexOfColon = io_urlBuffer.toString().indexOf(':');
        int endOfUsername = indexOfAt;
        if (indexOfColon < indexOfAt && indexOfColon != -1) {
            endOfUsername = indexOfColon;
        }
        String username = io_urlBuffer.substring(0, indexOfColon);
        io_urlBuffer.delete(0, endOfUsername);
        return username;
    }
----------------------------------------
    protected String findAndRemovePortNr(StringBuffer io_urlBuffer) {
        int indexOfSlash = io_urlBuffer.toString().indexOf('/');
        if (indexOfSlash == -1) indexOfSlash = io_urlBuffer.length();
        String portNrString = io_urlBuffer.substring(1, indexOfSlash);
        io_urlBuffer.delete(0, indexOfSlash);
        return portNrString;
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,2497703.java,462,468
default,58057.java,142,148
----------------------------------------
    private static double[] toPrimitiveDoubleArray(Double[] array) {
        double[] returnArray = new double[array.length];
        for (int i = 0; i < array.length; i++) {
            returnArray[i] = array[i].doubleValue();
        }
        return returnArray;
    }
----------------------------------------
    private static int[] toTags(String[] tagStr) {
        int[] tags = new int[tagStr.length];
        for (int i = 0; i < tags.length; i++) {
            tags[i] = toTag(tagStr[i]);
        }
        return tags;
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,86563.java,53,67
selected,96650.java,100,117
----------------------------------------
    @Test
    public void testReadLengthField() throws Exception {
        System.out.println("test read length field");
        IServer server = new Server(new ReadServerHandler());
        ConnectionUtils.start(server);
        IBlockingConnection bc = new BlockingConnection("localhost", server.getLocalPort());
        byte[] request = QAUtil.generateByteArray(20);
        bc.write((int) (request.length));
        QAUtil.sleep(500);
        bc.write(request);
        byte[] response = bc.readBytesByLength(request.length);
        Assert.assertTrue(QAUtil.isEquals(request, response));
        bc.close();
        server.close();
    }
----------------------------------------
    @Test
    public void testReadMulti() throws Exception {
        System.out.println("test read multi");
        MultiServerHandler handler = new MultiServerHandler();
        final IServer server = new Server(handler);
        StreamUtils.start(server);
        IBlockingConnection bc = new BlockingConnection("localhost", server.getLocalPort());
        bc.write((int) 45);
        QAUtil.sleep(500);
        bc.write((int) 77);
        QAUtil.sleep(500);
        bc.write((int) 99);
        QAUtil.sleep(500);
        bc.write((int) 43);
        Assert.assertTrue(handler.errorOccured == false);
        bc.close();
        server.close();
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,687849.java,488,498
selected,1030949.java,426,436
----------------------------------------
    public void setMatrix(int i0, int i1, int[] c, Matrix X) {
        try {
            for (int i = i0; i <= i1; i++) {
                for (int j = 0; j < c.length; j++) {
                    A[i][c[j]] = X.get(i - i0, j);
                }
            }
        } catch (ArrayIndexOutOfBoundsException e) {
            throw new ArrayIndexOutOfBoundsException("Submatrix indices");
        }
    }
----------------------------------------
    public void setMatrix(int i0, int i1, int j0, int j1, Matrix X) {
        try {
            for (int i = i0; i <= i1; i++) {
                for (int j = j0; j <= j1; j++) {
                    A[i][j] = X.get(i - i0, j - j0);
                }
            }
        } catch (ArrayIndexOutOfBoundsException e) {
            throw new ArrayIndexOutOfBoundsException("Submatrix indices");
        }
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,1200879.java,213,224
selected,1718247.java,56,69
----------------------------------------
    public static void copyFile(File src, File dest) {
        try {
            FileInputStream in = new FileInputStream(src);
            FileOutputStream out = new FileOutputStream(dest);
            int c;
            while ((c = in.read()) != -1) out.write(c);
            in.close();
            out.close();
        } catch (IOException ioe) {
            System.err.println(ioe);
        }
    }
----------------------------------------
    protected static final void copyFile(String from, String to) throws SeleniumException {
        try {
            java.io.File fileFrom = new File(from);
            java.io.File fileTo = new File(to);
            FileReader in = new FileReader(fileFrom);
            FileWriter out = new FileWriter(fileTo);
            int c;
            while ((c = in.read()) != -1) out.write(c);
            in.close();
            out.close();
        } catch (Exception e) {
            throw new SeleniumException("Failed to copy new file : " + from + " to : " + to, e);
        }
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,2257917.java,449,451
selected,16259.java,35,43
----------------------------------------
    public static void fill(double[][] m, double fill) {
        for (int i = 0; i < m.length; i++) for (int j = 0; j < m[i].length; j++) m[i][j] = fill;
    }
----------------------------------------
    public static double[][] transpose(double[][] object) {
        double[][] transpose = new double[object[0].length][object.length];
        for (int i = 0; i < object.length; i++) {
            for (int x = 0; x < transpose.length; x++) {
                transpose[x][i] = object[i][x];
            }
        }
        return transpose;
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,2309711.java,198,210
selected,10759.java,261,275
----------------------------------------
    public RestServiceResult searchCourseName(RestServiceResult serviceResult, String sCourseName) {
        List<CoCourse> list = new CoCourseDAO().findByCourseName(sCourseName);
        if (list.size() == 0) {
            serviceResult.setError(true);
            serviceResult.setMessage(bundle.getString("course.search.notFound"));
        } else {
            Object[] args = { list.size() };
            serviceResult.setMessage(MessageFormat.format(bundle.getString("course.search.success"), args));
            serviceResult.setObjResult(list);
            serviceResult.setNumResult(list.size());
        }
        return serviceResult;
    }
----------------------------------------
    public RestServiceResult listMatrixExercises1ForExercises1(RestServiceResult serviceResult, Long nExerciseId) {
        CoExercises1 coExercises1 = new CoExercises1DAO().findById(nExerciseId);
        EntityManagerHelper.refresh(coExercises1);
        if (coExercises1 == null) {
            serviceResult.setError(true);
            serviceResult.setMessage(bundle.getString("matrixExercises1.search.notFound"));
        } else {
            List<CoMatrixExercises1> list = new ArrayList<CoMatrixExercises1>(coExercises1.getCoMatrixExercises1s());
            Object[] arrayParam = { list.size(), coExercises1.getExerciseName() };
            serviceResult.setMessage(MessageFormat.format(bundle.getString("matrixExercises1.listMatrixExercises1ForExercises1.success"), arrayParam));
            serviceResult.setObjResult(list);
            serviceResult.setNumResult(list.size());
        }
        return serviceResult;
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,2701118.java,605,624
selected,1782576.java,675,694
----------------------------------------
    public static String nullSafeToString(char[] array) {
        if (array == null) {
            return NULL_STRING;
        }
        int length = array.length;
        if (length == 0) {
            return EMPTY_ARRAY;
        }
        StringBuffer buffer = new StringBuffer();
        for (int i = 0; i < length; i++) {
            if (i == 0) {
                buffer.append(ARRAY_START);
            } else {
                buffer.append(ARRAY_ELEMENT_SEPARATOR);
            }
            buffer.append("'").append(array[i]).append("'");
        }
        buffer.append(ARRAY_END);
        return buffer.toString();
    }
----------------------------------------
    public static String nullSafeToString(float[] array) {
        if (array == null) {
            return NULL_STRING;
        }
        int length = array.length;
        if (length == 0) {
            return EMPTY_ARRAY;
        }
        StringBuffer buffer = new StringBuffer();
        for (int i = 0; i < length; i++) {
            if (i == 0) {
                buffer.append(ARRAY_START);
            } else {
                buffer.append(ARRAY_ELEMENT_SEPARATOR);
            }
            buffer.append(array[i]);
        }
        buffer.append(ARRAY_END);
        return buffer.toString();
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,1716261.java,141,155
selected,1657904.java,20,38
----------------------------------------
    private String encryptPassword(String password) throws NoSuchAlgorithmException {
        StringBuffer encryptedPassword = new StringBuffer();
        MessageDigest md5 = MessageDigest.getInstance("MD5");
        md5.reset();
        md5.update(password.getBytes());
        byte digest[] = md5.digest();
        for (int i = 0; i < digest.length; i++) {
            String hex = Integer.toHexString(0xFF & digest[i]);
            if (hex.length() == 1) {
                encryptedPassword.append('0');
            }
            encryptedPassword.append(hex);
        }
        return encryptedPassword.toString();
    }
----------------------------------------
    public static String encode(String text, String alg) {
        byte[] passwordBytes = text.getBytes();
        String encoded = null;
        try {
            MessageDigest algorithm = MessageDigest.getInstance(alg);
            algorithm.reset();
            algorithm.update(passwordBytes);
            byte messageDigest[] = algorithm.digest();
            StringBuffer hexString = new StringBuffer();
            for (int i = 0; i < messageDigest.length; i++) {
                hexString.append(Integer.toHexString(0xFF & messageDigest[i]));
            }
            encoded = hexString.toString();
        } catch (NoSuchAlgorithmException e) {
            System.out.println(e.getMessage());
            return null;
        }
        return encoded;
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,582021.java,32,40
selected,1396406.java,33,42
----------------------------------------
    public static void copyFile(InputStream is, OutputStream os) throws IOException {
        byte[] buf = new byte[BUF_SIZE];
        int len;
        while ((len = is.read(buf)) > 0) {
            os.write(buf, 0, len);
        }
        is.close();
        os.close();
    }
----------------------------------------
    public void addEntry(String name, byte[] byteArray) throws IOException {
        ZipEntry entry = new ZipEntry(name);
        _zos.putNextEntry(entry);
        BufferedInputStream bis = new BufferedInputStream(new ByteArrayInputStream(byteArray), _BUFFER);
        int count;
        while ((count = bis.read(_data, 0, _BUFFER)) != -1) {
            _zos.write(_data, 0, count);
        }
        bis.close();
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,1712367.java,490,509
selected,952606.java,778,797
----------------------------------------
    public static String nullSafeToString(Object[] array) {
        if (array == null) {
            return NULL_STRING;
        }
        int length = array.length;
        if (length == 0) {
            return EMPTY_ARRAY;
        }
        StringBuffer buffer = new StringBuffer();
        for (int i = 0; i < length; i++) {
            if (i == 0) {
                buffer.append(ARRAY_START);
            } else {
                buffer.append(ARRAY_ELEMENT_SEPARATOR);
            }
            buffer.append(String.valueOf(array[i]));
        }
        buffer.append(ARRAY_END);
        return buffer.toString();
    }
----------------------------------------
    public static String nullSafeToString(short[] array) {
        if (array == null) {
            return NULL_STRING;
        }
        int length = array.length;
        if (length == 0) {
            return EMPTY_ARRAY;
        }
        StringBuffer buffer = new StringBuffer();
        for (int i = 0; i < length; i++) {
            if (i == 0) {
                buffer.append(ARRAY_START);
            } else {
                buffer.append(ARRAY_ELEMENT_SEPARATOR);
            }
            buffer.append(array[i]);
        }
        buffer.append(ARRAY_END);
        return buffer.toString();
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,2678044.java,162,172
selected,1616903.java,20,32
----------------------------------------
    private static String getStringFromFile(File file) throws IOException {
        String s;
        StringBuffer sb = new StringBuffer();
        BufferedReader in = new BufferedReader(new FileReader(file));
        while ((s = in.readLine()) != null) {
            sb.append(s);
            sb.append("\n");
        }
        in.close();
        return sb.toString();
    }
----------------------------------------
    @Override
    public JSONArray getRemoteJsonArr(URL url) throws IOException, JSONException {
        URLConnection conn = url.openConnection();
        BufferedReader reader = new BufferedReader(new InputStreamReader(conn.getInputStream(), "UTF8"));
        response = new StringBuffer();
        String line = "";
        while ((line = reader.readLine()) != null) {
            response.append(line);
        }
        reader.close();
        jSONArray = new JSONArray(response.toString());
        return jSONArray;
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,840915.java,718,730
selected,1429821.java,1253,1270
----------------------------------------
    @SuppressWarnings("unchecked")
    ArrayList new25() {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PBinaryPrim pbinaryprimNode1;
        {
            TIdent tidentNode2;
            tidentNode2 = (TIdent) nodeArrayList1.get(0);
            pbinaryprimNode1 = new ABinaryPrim(tidentNode2);
        }
        nodeList.add(pbinaryprimNode1);
        return nodeList;
    }
----------------------------------------
    ArrayList new32() {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PPhrase pphraseNode1;
        {
            TypedLinkedList listNode3 = new TypedLinkedList();
            {
                TypedLinkedList listNode2 = new TypedLinkedList();
                listNode2 = (TypedLinkedList) nodeArrayList1.get(0);
                if (listNode2 != null) {
                    listNode3.addAll(listNode2);
                }
            }
            pphraseNode1 = new APhrase(listNode3);
        }
        nodeList.add(pphraseNode1);
        return nodeList;
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,1041773.java,1725,1731
selected,2317865.java,121,128
----------------------------------------
        public void endElement(String uri, String localName, String qName) throws SAXException {
            if (uri.equals(oldURI)) {
                super.endElement(newURI, localName, qName);
            } else {
                super.endElement(uri, localName, qName);
            }
        }
----------------------------------------
                        public void endElement(String s, String s1, String s2) throws SAXException {
                            try {
                                super.endElement(s, s1, s2);
                            } catch (ValidationException e) {
                                generateErrorElement(e);
                            }
                            contentHandler.endElement(s, s1, s2);
                        }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,127068.java,982,992
selected,868705.java,640,648
----------------------------------------
    public Matrix ebePow(Matrix B) {
        checkMatrixDimensions(B);
        Matrix X = new Matrix(m, n);
        double[][] C = X.getArray();
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                C[i][j] = Math.pow(A[i][j], B.A[i][j]);
            }
        }
        return X;
    }
----------------------------------------
    public Matrix arrayLeftDivideEquals(Matrix B) {
        checkMatrixDimensions(B);
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                A[i][j] = B.A[i][j] / A[i][j];
            }
        }
        return this;
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,2709882.java,57,65
selected,2012585.java,509,520
----------------------------------------
    public final boolean startsWith(byte haystack[], byte needle[]) {
        if (needle == null) return false;
        if (haystack == null) return false;
        if (needle.length > haystack.length) return false;
        for (int i = 0; i < needle.length; i++) {
            if (needle[i] != haystack[i]) return false;
        }
        return true;
    }
----------------------------------------
    public static boolean startsWith(final byte[] target, final byte[] prefix) {
        final int testlen = prefix.length;
        if (target.length < testlen) {
            return false;
        }
        for (int i = 0; i < testlen; i++) {
            if (target[i] != prefix[i]) {
                return false;
            }
        }
        return true;
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
default,137582.java,54,62
default,130398.java,73,82
----------------------------------------
    String sequenceUsingDo(int start, int stop) {
        StringBuilder builder = new StringBuilder();
        int i = start;
        do {
            if (i > start) builder.append(',');
            builder.append(i);
        } while (++i <= stop);
        return builder.toString();
    }
----------------------------------------
    String sequenceUsingWhile(int start, int stop) {
        StringBuilder builder = new StringBuilder();
        int i = start;
        while (i <= stop) {
            if (i > start) builder.append(',');
            builder.append(i);
            i++;
        }
        return builder.toString();
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,1812318.java,564,574
selected,1322429.java,1070,1080
----------------------------------------
    public Matrix arrayTimes(Matrix B) {
        checkMatrixDimensions(B);
        Matrix X = new Matrix(m, n);
        double[][] C = X.getArray();
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                C[i][j] = A[i][j] * B.A[i][j];
            }
        }
        return X;
    }
----------------------------------------
    public PNMatrix plus(PNMatrix B) {
        checkMatrixDimensions(B);
        PNMatrix X = new PNMatrix(m, n);
        int[][] C = X.getArray();
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                C[i][j] = A[i][j] + B.A[i][j];
            }
        }
        return X;
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,2663737.java,162,174
default,27942.java,129,144
----------------------------------------
    private String loadFile(String sFilename) {
        try {
            ByteArrayOutputStream bsOut = new ByteArrayOutputStream();
            FileInputStream fiIn = new FileInputStream(sFilename);
            int iData = 0;
            while ((iData = fiIn.read()) > -1) bsOut.write(iData);
            String sDataString = bsOut.toString();
            fiIn.close();
            return sDataString;
        } catch (IOException e) {
            return "";
        }
    }
----------------------------------------
    private static byte[] readBytes(File file) {
        ByteArrayOutputStream baos = new ByteArrayOutputStream();
        try {
            InputStream fis = new FileInputStream(file);
            InputStream is = new BufferedInputStream(fis);
            int count = 0;
            byte[] buf = new byte[16384];
            while ((count = is.read(buf)) != -1) {
                if (count > 0) baos.write(buf, 0, count);
            }
            is.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
        return baos.toByteArray();
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,42000.java,86,103
default,100113.java,113,134
----------------------------------------
    public static String loadFile(final File file) {
        final StringBuilder contents = new StringBuilder();
        try {
            final BufferedReader input = new BufferedReader(new FileReader(file));
            try {
                String line = null;
                while ((line = input.readLine()) != null) {
                    contents.append(line);
                    contents.append(System.getProperty("line.separator"));
                }
            } finally {
                input.close();
            }
        } catch (IOException ex) {
            LOG.error(ex.getMessage(), ex);
        }
        return contents.toString();
    }
----------------------------------------
    private String read(File f) {
        try {
            BufferedReader in = new BufferedReader(new FileReader(f));
            try {
                StringBuilder sb = new StringBuilder((int) f.length());
                String line;
                while ((line = in.readLine()) != null) {
                    sb.append(line);
                    sb.append("\n");
                }
                return sb.toString();
            } finally {
                try {
                    in.close();
                } catch (IOException e) {
                }
            }
        } catch (IOException e) {
            error("error reading " + f + ": " + e);
            return "";
        }
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,1484780.java,139,143
default,114569.java,126,130
----------------------------------------
    private static void sendBytes(InputStream fis, OutputStream os) throws Exception {
        byte[] buffer = new byte[1024];
        int bytes = 0;
        while ((bytes = fis.read(buffer)) != -1) os.write(buffer, 0, bytes);
    }
----------------------------------------
    private static void copy(InputStream in, OutputStream out) throws IOException {
        byte[] buf = new byte[BUFFER_SIZE];
        int read;
        while ((read = in.read(buf, 0, BUFFER_SIZE)) != -1) out.write(buf, 0, read);
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
default,106506.java,496,500
default,94944.java,705,713
----------------------------------------
    private static void exit(String prompt, boolean error) {
        if (prompt != null) System.err.println(prompt);
        if (error) System.err.println(messages.getString("try"));
        System.exit(1);
    }
----------------------------------------
    private static void exit(String prompt, boolean error) {
        if (prompt != null) {
            System.err.println(prompt);
        }
        if (error) {
            System.err.println(messages.getString("try"));
        }
        System.exit(1);
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,349082.java,58,68
default,49216.java,21,31
----------------------------------------
    public static void copyToWriter(Reader from, Writer to) throws Exception {
        char[] buffer = new char[8192];
        int chars_read;
        while (true) {
            chars_read = from.read(buffer);
            if (chars_read == -1) break;
            to.write(buffer, 0, chars_read);
        }
        to.flush();
        from.close();
    }
----------------------------------------
    public static void copy(URL url, String outPath) throws IOException {
        System.out.println("copying from: " + url + " to " + outPath);
        InputStream in = url.openStream();
        FileOutputStream fout = new FileOutputStream(outPath);
        byte[] data = new byte[8192];
        int read = -1;
        while ((read = in.read(data)) != -1) {
            fout.write(data, 0, read);
        }
        fout.close();
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,2337922.java,67,83
selected,387963.java,48,64
----------------------------------------
    public static void writeStreamToFile(InputStream srcStream, File destFile) throws IOException {
        OutputStream output;
        InputStream input = null;
        output = null;
        try {
            input = new BufferedInputStream(srcStream);
            output = new BufferedOutputStream(new FileOutputStream(destFile));
            int ch;
            while ((ch = input.read()) != -1) output.write(ch);
        } catch (IOException e) {
            log.error("Error writing stream to file: " + destFile.getAbsolutePath());
            throw e;
        } finally {
            input.close();
        }
        output.close();
    }
----------------------------------------
    public static void downloadFile(String url, String filePath) throws IOException {
        BufferedInputStream inputStream = new BufferedInputStream(new URL(url).openStream());
        BufferedOutputStream bos = new BufferedOutputStream(new FileOutputStream(filePath));
        try {
            int i = 0;
            while ((i = inputStream.read()) != -1) {
                bos.write(i);
            }
        } finally {
            if (inputStream != null) {
                inputStream.close();
            }
            if (bos != null) {
                bos.close();
            }
        }
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,1499663.java,37,48
selected,570032.java,46,56
----------------------------------------
    @Override
    public int executeUpdate(String stm) throws RemoteException {
        try {
            Transaction tx = conn.getTransaction();
            int res = Panda.getPlanner().executeUpdate(stm, tx);
            conn.commit();
            return res;
        } catch (RuntimeException r) {
            conn.rollback();
            throw r;
        }
    }
----------------------------------------
    public int executeUpdate(String cmd) throws RemoteException {
        try {
            Transaction tx = rconn.getTransaction();
            int result = SimpleDB.planner().executeUpdate(cmd, tx);
            rconn.commit();
            return result;
        } catch (RuntimeException e) {
            rconn.rollback();
            throw e;
        }
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,246752.java,168,181
default,112548.java,126,130
----------------------------------------
    private static void pipe(InputStream in, OutputStream out) throws IOException {
        byte[] buf = new byte[500000];
        int nread;
        int navailable;
        int total = 0;
        synchronized (in) {
            while ((nread = in.read(buf, 0, buf.length)) >= 0) {
                out.write(buf, 0, nread);
                total += nread;
            }
        }
        out.flush();
        buf = null;
    }
----------------------------------------
    private static void copy(InputStream in, OutputStream out) throws IOException {
        byte[] buf = new byte[BUFFER_SIZE];
        int read;
        while ((read = in.read(buf, 0, BUFFER_SIZE)) != -1) out.write(buf, 0, read);
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,1142875.java,168,175
default,46050.java,64,71
----------------------------------------
    public static String flattenStrarr(String[] strs) {
        StringBuffer sb = new StringBuffer();
        for (int i = 0; i < strs.length; ++i) {
            if (i > 0) sb.append(' ');
            sb.append(strs[i]);
        }
        return sb.toString();
    }
----------------------------------------
    String sequenceUsingFor(int start, int stop) {
        StringBuilder builder = new StringBuilder();
        for (int i = start; i <= stop; i++) {
            if (i > start) builder.append(',');
            builder.append(i);
        }
        return builder.toString();
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,2365821.java,1128,1141
selected,1402632.java,963,974
----------------------------------------
        public OutputStream(java.io.OutputStream out, int options) {
            super(out);
            this.breakLines = (options & DONT_BREAK_LINES) != DONT_BREAK_LINES;
            this.encode = (options & ENCODE) == ENCODE;
            this.bufferLength = encode ? 3 : 4;
            this.buffer = new byte[bufferLength];
            this.position = 0;
            this.lineLength = 0;
            this.suspendEncoding = false;
            this.b4 = new byte[4];
            this.options = options;
            this.alphabet = getAlphabet(options);
            this.decodabet = getDecodabet(options);
        }
----------------------------------------
        public InputStream(java.io.InputStream in, int options) {
            super(in);
            this.breakLines = (options & DONT_BREAK_LINES) != DONT_BREAK_LINES;
            this.encode = (options & ENCODE) == ENCODE;
            this.bufferLength = encode ? 4 : 3;
            this.buffer = new byte[bufferLength];
            this.position = -1;
            this.lineLength = 0;
            this.options = options;
            this.alphabet = getAlphabet(options);
            this.decodabet = getDecodabet(options);
        }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,960786.java,24,32
selected,2709728.java,26,33
----------------------------------------
    public void initialize(Properties arg0) {
        System.out.println("sgsApp initialize..");
        ChannelManager cm = AppContext.getChannelManager();
        DataManager dm = AppContext.getDataManager();
        ChannelListener cl = new RoomChannelListener();
        Channel channel = cm.createChannel(CHANNEL_NAME, cl, Delivery.RELIABLE);
        GameRoom rm = new GameRoom(channel);
        dm.setBinding(ROOM1_NAME, rm);
    }
----------------------------------------
    public void initialize(Properties p) {
        System.out.println("initializing block world server!");
        ChannelManager cm = AppContext.getChannelManager();
        Channel c = cm.createChannel("channel 1", new BoxWorldChannelListener(), Delivery.RELIABLE);
        channel = AppContext.getDataManager().createReference(c);
        TaskManager tm = AppContext.getTaskManager();
        tm.schedulePeriodicTask(new UpdateClientGames(channel), 0, 50);
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,1299790.java,151,159
selected,1042608.java,50,60
----------------------------------------
    public static String extractPath(String iResource) {
        String aResource = iResource;
        if (iResource.contains("?")) {
            aResource = aResource.substring(0, aResource.indexOf("?"));
        }
        int aIndexLastSlash = aResource.lastIndexOf("/");
        if (aIndexLastSlash == -1) aResource = "/"; else aResource = aResource.substring(0, aIndexLastSlash + 1);
        return aResource;
    }
----------------------------------------
    public static String getClassPathToResourcePath(String path) {
        if (path == null || path.indexOf('/') >= 0) return path;
        int idx = path.lastIndexOf(".");
        if (idx >= 0) {
            String name = path.substring(0, idx);
            String ext = path.substring(idx, path.length());
            return name.replace('.', '/') + ext;
        } else {
            return path;
        }
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,2262634.java,201,211
selected,1039041.java,71,79
----------------------------------------
    public static byte[] byteArrayForHexEncodedString(String hexEncodedByteString) {
        if (hexEncodedByteString.length() % 2 != 0) {
            System.out.println("Hex encoded string must be of even length");
            return null;
        }
        byte[] bytes = new byte[hexEncodedByteString.length() / 2];
        for (int i = 0; i < bytes.length; i++) {
            bytes[i] = (byte) Integer.parseInt(hexEncodedByteString.substring(2 * i, 2 * i + 2), 16);
        }
        return bytes;
    }
----------------------------------------
    private static byte[] hexStringToByteArray(String s) {
        byte[] b = new byte[s.length() / 2];
        for (int i = 0; i < b.length; i++) {
            int index = i * 2;
            int v = Integer.parseInt(s.substring(index, index + 2), 16);
            b[i] = (byte) v;
        }
        return b;
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,1747591.java,23,32
selected,1480123.java,29,39
----------------------------------------
    public static String readString(InputStream stream) throws IOException {
        ByteArrayOutputStream b = new ByteArrayOutputStream();
        int readedBytes;
        byte[] buf = new byte[1024];
        while ((readedBytes = stream.read(buf)) > 0) {
            b.write(buf, 0, readedBytes);
        }
        b.close();
        return b.toString();
    }
----------------------------------------
    public static byte[] obtainByteDataFromStream(InputStream inputStream) throws IOException {
        ByteArrayOutputStream outputStream = new ByteArrayOutputStream(1024);
        byte[] bytes = new byte[512];
        int readBytes;
        while ((readBytes = inputStream.read(bytes)) > 0) {
            outputStream.write(bytes, 0, readBytes);
        }
        byte[] byteData = outputStream.toByteArray();
        outputStream.close();
        return byteData;
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,843023.java,386,394
selected,1514889.java,495,504
----------------------------------------
    public void handleDelta(int enc, int delta) {
        if (this.pages.size() == 0) {
            return;
        }
        if (enc < 0 || enc > 3) return;
        if (this.pages.get(curPage) != null) {
            this.pages.get(curPage).handleDelta(enc, delta);
        }
    }
----------------------------------------
    public void handleADC(float x, float y) {
        if (this.pages.size() == 0) {
            return;
        }
        if (this.curPage > -1) {
            if (this.pages.get(curPage) != null) {
                this.pages.get(curPage).handleADC(x, y);
            }
        }
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,282638.java,9,19
selected,580999.java,18,27
----------------------------------------
    public static String hashMD5(String entrada) {
        MessageDigest m;
        try {
            m = MessageDigest.getInstance("MD5");
            m.update(entrada.getBytes(), 0, entrada.length());
            return new BigInteger(1, m.digest()).toString(16);
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        }
        return null;
    }
----------------------------------------
    public String getMD5String(String par1Str) {
        try {
            String s = (new StringBuilder()).append(field_27370_a).append(par1Str).toString();
            MessageDigest messagedigest = MessageDigest.getInstance("MD5");
            messagedigest.update(s.getBytes(), 0, s.length());
            return (new BigInteger(1, messagedigest.digest())).toString(16);
        } catch (NoSuchAlgorithmException nosuchalgorithmexception) {
            throw new RuntimeException(nosuchalgorithmexception);
        }
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,1630118.java,48,57
selected,978906.java,184,193
----------------------------------------
    public String toString() {
        StringBuffer buf = new StringBuffer();
        buf.append("type=");
        buf.append(type);
        buf.append("; serial=");
        buf.append(Long.toString(serial));
        buf.append("; created=");
        buf.append(new Date(createDate));
        return buf.toString();
    }
----------------------------------------
    @Override
    public String toString() {
        StringBuilder result = new StringBuilder();
        result.append(target.getOriginalRequest().getMethod());
        result.append(" ");
        result.append(ResourceUtils.getHttpUrlWithQueryString(target));
        result.append("\n");
        result.append(target.getUserContext().toString());
        return result.toString();
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,2240414.java,127,138
selected,208660.java,76,82
----------------------------------------
    public static void copyFromFileToFileUsingNIO(File inputFile, File outputFile) throws FileNotFoundException, IOException {
        FileChannel inputChannel = new FileInputStream(inputFile).getChannel();
        FileChannel outputChannel = new FileOutputStream(outputFile).getChannel();
        try {
            inputChannel.transferTo(0, inputChannel.size(), outputChannel);
        } catch (IOException e) {
            throw e;
        } finally {
            if (inputChannel != null) inputChannel.close();
            if (outputChannel != null) outputChannel.close();
        }
    }
----------------------------------------
    public static void copyFile(File src, File dst) throws IOException {
        FileChannel from = new FileInputStream(src).getChannel();
        FileChannel to = new FileOutputStream(dst).getChannel();
        from.transferTo(0, src.length(), to);
        from.close();
        to.close();
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,1893968.java,40,46
default,31264.java,142,148
----------------------------------------
    public static double[][] copyDeep(double[][] omatrix) {
        double[][] t = new double[omatrix.length][];
        for (int i = 0; i < omatrix.length; i++) {
            t[i] = omatrix[i].clone();
        }
        return t;
    }
----------------------------------------
    private static int[] toTags(String[] tagStr) {
        int[] tags = new int[tagStr.length];
        for (int i = 0; i < tags.length; i++) {
            tags[i] = toTag(tagStr[i]);
        }
        return tags;
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,1062689.java,14,25
sample,CopyFileSamples.java,42,53
----------------------------------------
    public static void copyResourceToFile(String resourceURL, File destFile) throws IOException {
        BufferedInputStream in = new BufferedInputStream(ResourceUtilities.openNamedResource(resourceURL));
        BufferedOutputStream out = new BufferedOutputStream(new FileOutputStream(destFile));
        byte[] buf = new byte[4096];
        for (; ; ) {
            int numRead = in.read(buf, 0, buf.length);
            if (numRead == -1) break;
            out.write(buf, 0, numRead);
        }
        in.close();
        out.close();
    }
----------------------------------------
	public static void copyFile3(File srcFile, File destFile) throws IOException {
		InputStream in = new FileInputStream(srcFile);
		OutputStream out = new FileOutputStream(destFile);
		
		byte[] buf = new byte[1024];
		int len;
		while((len = in.read(buf)) > 0) {
			out.write(buf, 0, len);
		}
		in.close();
		out.close();
	}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,1850264.java,143,150
default,65107.java,64,71
----------------------------------------
    public static String padr(String topad, int size) {
        StringBuilder result = new StringBuilder(size);
        result.append(topad);
        for (int i = topad.length(); i < size; i++) {
            result.append(' ');
        }
        return result.toString();
    }
----------------------------------------
    String sequenceUsingFor(int start, int stop) {
        StringBuilder builder = new StringBuilder();
        for (int i = start; i <= stop; i++) {
            if (i > start) builder.append(',');
            builder.append(i);
        }
        return builder.toString();
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,273144.java,504,513
default,51882.java,117,131
----------------------------------------
    public static void copy(String a, String b) throws IOException {
        File inputFile = new File(a);
        File outputFile = new File(b);
        FileReader in = new FileReader(inputFile);
        FileWriter out = new FileWriter(outputFile);
        int c;
        while ((c = in.read()) != -1) out.write(c);
        in.close();
        out.close();
    }
----------------------------------------
    File createJar(String name, String... entries) throws IOException {
        File jar = new File(name);
        OutputStream out = new FileOutputStream(jar);
        try {
            JarOutputStream jos = new JarOutputStream(out);
            for (String e : entries) {
                jos.putNextEntry(new ZipEntry(e));
                jos.write(e.getBytes());
            }
            jos.close();
        } finally {
            out.close();
        }
        return jar;
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,1994127.java,547,562
selected,986106.java,77,93
----------------------------------------
        private void readCompleteFile(FileOutputStream file, long size) throws IOException {
            int count = 0;
            int read;
            try {
                while (count < size) {
                    read = in.read(buffer, 0, (int) (((size - count) < buffer.length) ? (size - count) : buffer.length));
                    if (read == -1) {
                        throw new EOFException("SCP received an unexpected EOF");
                    }
                    count += read;
                    file.write(buffer, 0, read);
                }
            } finally {
                file.close();
            }
        }
----------------------------------------
    public static void readFile(DataInputStream dis, File outfile) throws IOException {
        long len = dis.readLong();
        if (len > MAXFILE) {
            throw new IOException("Too large file! " + MAXFILE);
        }
        FileOutputStream fos = new FileOutputStream(outfile);
        byte[] buffer = new byte[128];
        int readlen = 0;
        while (len > 0) {
            readlen = dis.read(buffer, 0, (int) Math.min(len, buffer.length));
            if (readlen > 0) {
                fos.write(buffer, 0, readlen);
                len -= readlen;
            }
        }
        fos.close();
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,583154.java,147,161
selected,338794.java,17,33
----------------------------------------
    public static byte[] hash(X509Certificate certificate) {
        if (certificate == null) {
            throw new NullPointerException("certificate cannot be null");
        }
        try {
            byte[] encodedCertificate = certificate.getEncoded();
            MessageDigest md = MessageDigest.getInstance("SHA");
            md.update(encodedCertificate);
            return md.digest();
        } catch (CertificateEncodingException ex) {
            throw new InternalFailureException("Unable to encode a X509v3 certificate (!)", ex);
        } catch (NoSuchAlgorithmException ex) {
            throw new InternalFailureException("No SHA1 algorithm (!)", ex);
        }
    }
----------------------------------------
    public static synchronized String getMD5_Base64(String input) {
        MessageDigest msgDigest = null;
        try {
            msgDigest = MessageDigest.getInstance("MD5");
        } catch (NoSuchAlgorithmException e) {
            throw new IllegalStateException("System doesn't support MD5 algorithm.");
        }
        try {
            msgDigest.update(input.getBytes("UTF-8"));
        } catch (java.io.UnsupportedEncodingException ex) {
            throw new IllegalStateException("System doesn't support your  EncodingException.");
        }
        byte[] rawData = msgDigest.digest();
        byte[] encoded = Base64.encodeBase64(rawData);
        String retValue = new String(encoded);
        return retValue;
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,1829489.java,289,300
selected,1087990.java,139,145
----------------------------------------
    public static void copyFile(File in, File out) throws IOException {
        FileChannel inChannel = new FileInputStream(in).getChannel();
        FileChannel outChannel = new FileOutputStream(out).getChannel();
        try {
            inChannel.transferTo(0, inChannel.size(), outChannel);
        } catch (IOException e) {
            throw e;
        } finally {
            if (inChannel != null) inChannel.close();
            if (outChannel != null) outChannel.close();
        }
    }
----------------------------------------
    public static final void copyFile(File source, File destination) throws IOException {
        FileChannel sourceChannel = new FileInputStream(source).getChannel();
        FileChannel targetChannel = new FileOutputStream(destination).getChannel();
        sourceChannel.transferTo(0, sourceChannel.size(), targetChannel);
        sourceChannel.close();
        targetChannel.close();
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,841956.java,17,27
selected,1216945.java,26,34
----------------------------------------
    public static String getMD5ofStr(String origString) {
        String origMD5 = null;
        try {
            MessageDigest md5 = MessageDigest.getInstance("MD5");
            byte[] result = md5.digest(origString.getBytes());
            origMD5 = byteArray2HexStr(result);
        } catch (Exception e) {
            e.printStackTrace();
        }
        return origMD5;
    }
----------------------------------------
    public static String getHash(String key) {
        try {
            MessageDigest digest = MessageDigest.getInstance("MD5");
            digest.update(key.getBytes());
            return new BigInteger(digest.digest()).toString(16);
        } catch (NoSuchAlgorithmException e) {
            return key;
        }
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
default,105863.java,73,82
default,123634.java,54,62
----------------------------------------
    String sequenceUsingWhile(int start, int stop) {
        StringBuilder builder = new StringBuilder();
        int i = start;
        while (i <= stop) {
            if (i > start) builder.append(',');
            builder.append(i);
            i++;
        }
        return builder.toString();
    }
----------------------------------------
    String sequenceUsingDo(int start, int stop) {
        StringBuilder builder = new StringBuilder();
        int i = start;
        do {
            if (i > start) builder.append(',');
            builder.append(i);
        } while (++i <= stop);
        return builder.toString();
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,852958.java,553,561
selected,852958.java,542,550
----------------------------------------
        public static void copyMatrix(Double[][] in, Double[][] out) {
            int rowC = in.length;
            for (int rowI = 0; rowI < rowC; rowI++) {
                int colC = in[rowI].length;
                for (int colI = 0; colI < colC; colI++) {
                    out[rowI][colI] = in[rowI][colI];
                }
            }
        }
----------------------------------------
        public static void copyMatrix(double[][] in, Double[][] out) {
            int rowC = in.length;
            for (int rowI = 0; rowI < rowC; rowI++) {
                int colC = in[rowI].length;
                for (int colI = 0; colI < colC; colI++) {
                    out[rowI][colI] = in[rowI][colI];
                }
            }
        }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,1877515.java,23,40
selected,1231207.java,59,67
----------------------------------------
            @Override
            public Void call() throws Exception {
                try {
                    try {
                        byte[] buf = new byte[4096];
                        int read;
                        while ((read = source.read(buf)) != -1) {
                            target.write(buf, 0, read);
                        }
                    } finally {
                        target.flush();
                        target.close();
                    }
                } finally {
                    source.close();
                }
                return null;
            }
----------------------------------------
    public void store(Reader reader) throws IOException {
        FileWriter writer = new FileWriter(this);
        char[] buf = new char[1024];
        int a = 0;
        while ((a = reader.read(buf)) != -1) writer.write(buf, 0, a);
        reader.close();
        writer.close();
        return;
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,804146.java,503,516
sample,BubbleSort.java,147,163
----------------------------------------
    static void sort3(Object a[]) {
        boolean done;
        do {
            done = true;
            for (int i = 1; i < a.length; ++i) {
                if (a[i].hashCode() < a[i - 1].hashCode()) {
                    Object tmp = a[i];
                    a[i] = a[i - 1];
                    a[i - 1] = tmp;
                    done = false;
                }
            }
        } while (!done);
    }
----------------------------------------
	public static void BubbleSortShort1(short[] num) {
		boolean flag = true; // set flag to true to begin first pass
		short temp; // holding variable

		while (flag) {
			flag = false; // set flag to false awaiting a possible swap
			for (int j = 0; j < num.length - 1; j++) {
				if (num[j] > num[j + 1]) // change to > for ascending sort
				{
					temp = num[j]; // swap elements
					num[j] = num[j + 1];
					num[j + 1] = temp;
					flag = true; // shows a swap occurred
				}
			}
		}
	}
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,700852.java,605,624
selected,2180965.java,640,659
----------------------------------------
    public static String nullSafeToString(char[] array) {
        if (array == null) {
            return NULL_STRING;
        }
        int length = array.length;
        if (length == 0) {
            return EMPTY_ARRAY;
        }
        StringBuffer buffer = new StringBuffer();
        for (int i = 0; i < length; i++) {
            if (i == 0) {
                buffer.append(ARRAY_START);
            } else {
                buffer.append(ARRAY_ELEMENT_SEPARATOR);
            }
            buffer.append("'").append(array[i]).append("'");
        }
        buffer.append(ARRAY_END);
        return buffer.toString();
    }
----------------------------------------
    public static String nullSafeToString(int[] array) {
        if (array == null) {
            return NULL_STRING;
        }
        int length = array.length;
        if (length == 0) {
            return EMPTY_ARRAY;
        }
        StringBuffer buffer = new StringBuffer();
        for (int i = 0; i < length; i++) {
            if (i == 0) {
                buffer.append(ARRAY_START);
            } else {
                buffer.append(ARRAY_ELEMENT_SEPARATOR);
            }
            buffer.append(array[i]);
        }
        buffer.append(ARRAY_END);
        return buffer.toString();
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,902418.java,52,56
default,9758.java,409,412
----------------------------------------
    private boolean equalsByteArray(byte[] aa, byte[] bb) {
        if (aa.length != bb.length) return false;
        for (int i = 0; i < aa.length; i++) if (aa[i] != bb[i]) return false;
        return true;
    }
----------------------------------------
    public static int method384(char ac[], int i) {
        for (int j = i; j < ac.length && j >= 0; j++) if (ac[j] < '0' || ac[j] > '9') return j;
        return ac.length;
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,1206162.java,247,254
selected,211182.java,595,605
----------------------------------------
    public Matrix transpose() {
        final Ring.Member array[][] = new Ring.Member[numCols][numRows];
        for (int j, i = 0; i < numRows; i++) {
            array[0][i] = matrix[i][0];
            for (j = 1; j < numCols; j++) array[j][i] = matrix[i][j];
        }
        return new RingMatrix(array);
    }
----------------------------------------
    public Matrix arrayRightDivide(Matrix B) {
        checkMatrixDimensions(B);
        Matrix X = new Matrix(m, n);
        double[][] C = X.getArray();
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                C[i][j] = A[i][j] / B.A[i][j];
            }
        }
        return X;
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,1373616.java,660,668
selected,566349.java,116,126
----------------------------------------
    public String toString() {
        StringBuffer sb = new StringBuffer("RadiusClient: HostName = ");
        sb.append(this.getHostname());
        sb.append(" Port = ");
        sb.append(Integer.toString(this.getAuthPort()));
        sb.append(" Shared Secret = ");
        sb.append(this.getSharedSecret());
        return sb.toString();
    }
----------------------------------------
        private void close() {
            final StringBuffer buff = new StringBuffer(5);
            buff.append(inputSetConnected ? 'y' : 'n');
            buff.append('|');
            buff.append(songSetConnected ? 'y' : 'n');
            buff.append('|');
            buff.append(outputSetConnected ? 'y' : 'n');
            Util.setProp(configKey, buff.toString());
            if (device != null) device.close();
            receiver = null;
        }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,1457210.java,83,93
selected,1934458.java,75,87
----------------------------------------
    static String readString(InputStream is) throws IOException {
        BufferedReader reader = new BufferedReader(new InputStreamReader(is));
        char[] buf = new char[2048];
        StringBuilder sb = new StringBuilder();
        int len = 0;
        while ((len = reader.read(buf)) != -1) {
            sb.append(buf, 0, len);
        }
        is.close();
        return sb.toString();
    }
----------------------------------------
    public String readStreamToString(InputStream is) throws IOException {
        final char[] buffer = new char[0x10000];
        StringBuilder out = new StringBuilder();
        Reader in = new InputStreamReader(is);
        int read;
        do {
            read = in.read(buffer, 0, buffer.length);
            if (read > 0) {
                out.append(buffer, 0, read);
            }
        } while (read >= 0);
        return out.toString();
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,1835055.java,152,157
selected,1835055.java,134,141
----------------------------------------
    public static void addRemoteChatText(String text, String name, Channel channel, boolean faint, boolean friend) {
        StyledDocument sd = channel.getStyledDocument();
        addTimestamp(channel);
        addText("<" + name + "> ", sd, friend ? sd.getStyle(STYLE_CHATREMOTEFRIEND) : sd.getStyle(STYLE_CHATREMOTE));
        addText(text.trim() + StringHelper.nl, sd, faint ? sd.getStyle(STYLE_FAINT) : sd.getStyle(STYLE_REGULAR));
    }
----------------------------------------
    public static void addSystemText(String text, String name, Channel channel) {
        StyledDocument sd = channel.getStyledDocument();
        addTimestamp(channel);
        if (name != null && name.trim().length() > 0) {
            addText(name + ": ", sd, sd.getStyle(STYLE_SYSTEM));
        }
        addText(text + StringHelper.nl, sd, sd.getStyle(STYLE_REGULAR));
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,1352770.java,61,69
selected,1493552.java,43,53
----------------------------------------
    public static void copyInputstreamToFile(InputStream in, OutputStream out) throws IOException {
        byte[] buf = new byte[1024];
        int len;
        while ((len = in.read(buf)) >= 0) {
            out.write(buf, 0, len);
        }
        in.close();
        out.close();
    }
----------------------------------------
    public static void copy(InputStream inputStream, OutputStream outputStream, boolean close) throws IOException {
        byte[] buf = new byte[1024];
        int len;
        while ((len = inputStream.read(buf)) > 0) {
            outputStream.write(buf, 0, len);
        }
        if (close) {
            inputStream.close();
            outputStream.close();
        }
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,544646.java,161,174
default,41859.java,417,427
----------------------------------------
    public static void copy(InputStream in, OutputStream out) throws IOException {
        synchronized (in) {
            synchronized (out) {
                byte[] buffer = new byte[256];
                while (true) {
                    int bytesRead = in.read(buffer);
                    if (bytesRead == -1) {
                        break;
                    }
                    out.write(buffer, 0, bytesRead);
                }
            }
        }
    }
----------------------------------------
    private static void copyStream(final InputStream input, final OutputStream output) throws IOException {
        final int BUFFER_SIZE = 1024 * 4;
        final byte[] buffer = new byte[BUFFER_SIZE];
        while (true) {
            final int count = input.read(buffer, 0, BUFFER_SIZE);
            if (-1 == count) {
                break;
            }
            output.write(buffer, 0, count);
        }
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,341629.java,51,59
selected,2457991.java,18,34
----------------------------------------
    private void copy(File from, File to) throws IOException {
        InputStream in = new FileInputStream(from);
        OutputStream out = new FileOutputStream(to);
        byte[] line = new byte[16384];
        int bytes = -1;
        while ((bytes = in.read(line)) != -1) out.write(line, 0, bytes);
        in.close();
        out.close();
    }
----------------------------------------
    private static void copyFile(File in, File out) throws Exception {
        final FileInputStream input = new FileInputStream(in);
        try {
            final FileOutputStream output = new FileOutputStream(out);
            try {
                final byte[] buf = new byte[4096];
                int readBytes = 0;
                while ((readBytes = input.read(buf)) != -1) {
                    output.write(buf, 0, readBytes);
                }
            } finally {
                output.close();
            }
        } finally {
            input.close();
        }
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,919373.java,7,18
selected,264796.java,286,296
----------------------------------------
    private static String convertToHex(byte[] data) {
        StringBuffer buf = new StringBuffer();
        for (int i = 0; i < data.length; i++) {
            int halfbyte = (data[i] >>> 4) & 0x0F;
            int two_halfs = 0;
            do {
                if ((0 <= halfbyte) && (halfbyte <= 9)) buf.append((char) ('0' + halfbyte)); else buf.append((char) ('a' + (halfbyte - 10)));
                halfbyte = data[i] & 0x0F;
            } while (two_halfs++ < 1);
        }
        return buf.toString();
    }
----------------------------------------
    public String fetchSite(URL url) throws IOException {
        InputStream in = url.openStream();
        StringBuffer sb = new StringBuffer();
        byte[] buffer = new byte[256];
        while (true) {
            int bytesRead = in.read(buffer);
            if (bytesRead == -1) break;
            for (int i = 0; i < bytesRead; i++) sb.append((char) buffer[i]);
        }
        return sb.toString();
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,171725.java,274,288
selected,808339.java,10,16
----------------------------------------
    private void fromInputToOutputStream(InputStream input, OutputStream output) {
        try {
            int readBytes = 0;
            byte[] buffer = new byte[10000];
            while ((readBytes = input.read(buffer, 0, 10000)) != -1) {
                output.write(buffer, 0, readBytes);
            }
            input.close();
            output.close();
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
----------------------------------------
    public static final void copyInputStream(InputStream in, OutputStream out) throws IOException {
        byte[] buffer = new byte[1024];
        int len;
        while ((len = in.read(buffer)) >= 0) out.write(buffer, 0, len);
        in.close();
        out.close();
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,743040.java,546,561
selected,2165036.java,486,502
----------------------------------------
    public boolean modifyMemberfields(Memberfields memberfields) {
        Session session = HibernateUtil.getSessionFactory().getCurrentSession();
        Transaction tr = null;
        try {
            tr = session.beginTransaction();
            session.saveOrUpdate(memberfields);
            tr.commit();
            return true;
        } catch (HibernateException e) {
            if (tr != null) {
                tr.rollback();
            }
            e.printStackTrace();
        }
        return false;
    }
----------------------------------------
    @SuppressWarnings("unchecked")
    public List<Usergroups> findUsergropsByHql(String hql) {
        Session session = null;
        session = HibernateUtil.getSessionFactory().getCurrentSession();
        Transaction tr = null;
        try {
            tr = session.beginTransaction();
            Query query = session.createQuery(hql);
            List<Usergroups> grouplist = query.list();
            tr.commit();
            return grouplist;
        } catch (HibernateException e) {
            tr.rollback();
            e.printStackTrace();
        }
        return null;
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,689606.java,166,177
selected,1129049.java,7,16
----------------------------------------
    public static String encryptPassword(String password) {
        String hash = null;
        try {
            MessageDigest md = null;
            md = MessageDigest.getInstance("SHA");
            md.update(password.getBytes("UTF-8"));
            byte raw[] = md.digest();
            hash = Base64.encode(raw, false);
        } catch (Exception e) {
        }
        return hash;
    }
----------------------------------------
    public static String toMD5(byte[] bytes) {
        try {
            MessageDigest algorithm = MessageDigest.getInstance("MD5");
            algorithm.reset();
            algorithm.update(bytes);
            return toHexString(algorithm.digest(), "");
        } catch (Exception e) {
        }
        return null;
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,2095054.java,139,149
selected,1774296.java,1150,1157
----------------------------------------
    public static boolean isEquals(byte[] b1, byte[] b2) {
        if (b1.length != b2.length) {
            return false;
        }
        for (int i = 0; i < b1.length; i++) {
            if (b1[i] != b2[i]) {
                return false;
            }
        }
        return true;
    }
----------------------------------------
    public static boolean isStrictlyIncreasing(final int[] values, final int startIndex, final int endIndex) {
        final int d;
        if ((d = checkIterationRange(values, startIndex, endIndex)) == 0) return true;
        for (int i = startIndex; i != endIndex; ) {
            if (values[i] >= values[i += d]) return false;
        }
        return true;
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,572754.java,19,37
selected,428832.java,143,159
----------------------------------------
    public static void copyFile(File sourceFile, File destinationFile) throws IOException {
        if (!destinationFile.exists()) {
            destinationFile.createNewFile();
        }
        FileChannel source = null;
        FileChannel destination = null;
        try {
            source = new FileInputStream(sourceFile).getChannel();
            destination = new FileOutputStream(destinationFile).getChannel();
            destination.transferFrom(source, 0, source.size());
        } finally {
            if (source != null) {
                source.close();
            }
            if (destination != null) {
                destination.close();
            }
        }
    }
----------------------------------------
    public static boolean copyFile(String fileIn, String fileOut) {
        FileChannel in = null;
        FileChannel out = null;
        boolean retour = false;
        try {
            in = new FileInputStream(fileIn).getChannel();
            out = new FileOutputStream(fileOut).getChannel();
            in.transferTo(0, in.size(), out);
            in.close();
            out.close();
            retour = true;
        } catch (IOException e) {
            System.err.println("File : " + fileIn);
            e.printStackTrace();
        }
        return retour;
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,142426.java,68,84
selected,168752.java,35,48
----------------------------------------
    private String readContentBody(HttpURLConnection conn) throws IOException {
        StringBuilder builder = new StringBuilder();
        BufferedReader reader = null;
        try {
            reader = new BufferedReader(new InputStreamReader(conn.getInputStream()));
            String line;
            while ((line = reader.readLine()) != null) {
                builder.append(line);
                builder.append("\n");
            }
        } finally {
            if (reader != null) {
                reader.close();
            }
        }
        return builder.toString();
    }
----------------------------------------
    protected String handleResponse(HttpURLConnection httpConn) throws IOException {
        InputStreamReader isr = new InputStreamReader(httpConn.getInputStream());
        BufferedReader br = new BufferedReader(isr);
        StringBuffer response = new StringBuffer("");
        String nextLine = br.readLine();
        while (nextLine != null) {
            response.append(nextLine);
            if ((nextLine = br.readLine()) != null) {
                response.append("\n");
            }
        }
        br.close();
        return response.toString();
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,2587973.java,355,365
selected,1578910.java,500,510
----------------------------------------
    public void setMatrix(int i0, int i1, int j0, int j1, Matrix X) {
        try {
            for (int i = i0; i <= i1; i++) {
                for (int j = j0; j <= j1; j++) {
                    A[i][j] = X.get(i - i0, j - j0);
                }
            }
        } catch (ArrayIndexOutOfBoundsException e) {
            throw new ArrayIndexOutOfBoundsException("Submatrix indices");
        }
    }
----------------------------------------
    public void setMatrix(int[] r, int j0, int j1, Matrix X) {
        try {
            for (int i = 0; i < r.length; i++) {
                for (int j = j0; j <= j1; j++) {
                    A[r[i]][j] = X.get(i, j - j0);
                }
            }
        } catch (ArrayIndexOutOfBoundsException e) {
            throw new ArrayIndexOutOfBoundsException("Submatrix indices");
        }
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,580159.java,50,62
selected,613000.java,53,66
----------------------------------------
    @SuppressWarnings("unchecked")
    public static void query(EntityManagerFactory entityManagerFactory) {
        EntityManager entityManager = entityManagerFactory.createEntityManager();
        try {
            Query query = entityManager.createQuery("SELECT p FROM Person p");
            Collection<Person> collection = (Collection<Person>) query.getResultList();
            for (Person person : collection) {
                System.out.println("found: " + person);
            }
        } finally {
            entityManager.close();
        }
    }
----------------------------------------
    @SuppressWarnings("unchecked")
    public static void query(EntityManagerFactory entityManagerFactory) {
        EntityManager entityManager = entityManagerFactory.createEntityManager();
        try {
            Query query = entityManager.createQuery("SELECT p FROM Person p");
            Collection<Person> collection = (Collection<Person>) query.getResultList();
            for (Person person : collection) {
                System.out.println("found: " + person);
                System.out.println("  with address: " + person.getAddress());
            }
        } finally {
            entityManager.close();
        }
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,120142.java,45,51
selected,1332083.java,38,47
----------------------------------------
    protected void build(OutputStream os) throws IOException {
        DataInputStream dis = new DataInputStream(classLoader.getResourceAsStream(resourceName));
        byte[] buf = new byte[256];
        int sz;
        while ((sz = dis.read(buf)) > 0) os.write(buf, 0, sz);
        dis.close();
    }
----------------------------------------
    private void SerializeToFile(InputStream in, File f) throws IOException {
        FileOutputStream out = new FileOutputStream(f);
        byte[] buf = new byte[1024];
        int len;
        while ((len = in.read(buf)) > 0) {
            out.write(buf, 0, len);
        }
        in.close();
        out.close();
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,773535.java,285,292
selected,2017760.java,1042,1050
----------------------------------------
    public void optimize(boolean waitFlush, boolean waitSearcher) throws SolrClientException, SolrServerException {
        StringBuilder xml = new StringBuilder();
        xml.append("<optimize ");
        xml.append(" waitFlush=\"").append(waitFlush).append("\" ");
        xml.append(" waitSearcher=\"").append(waitSearcher).append("\" ");
        xml.append("/>");
        postUpdateXml(new ConstantRequestWriter(xml.toString()));
    }
----------------------------------------
    void showFingerprint(byte[] blob, String type) {
        StringBuffer msg = new StringBuffer();
        msg.append("\r\nServer's hostkey (" + type + ") fingerprint:\r\n");
        msg.append("openssh md5:  ");
        msg.append(SSH2KeyFingerprint.md5Hex(blob));
        msg.append("\r\nbubblebabble: ");
        msg.append(SSH2KeyFingerprint.bubbleBabble(blob));
        interactor.report(msg.toString());
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,633198.java,93,103
selected,2468280.java,39,49
----------------------------------------
    private String toHexString(byte[] bytes) {
        StringBuilder sb = new StringBuilder(bytes.length * 2);
        for (int b : bytes) {
            b = b & 0xff;
            if (b < 0xf) {
                sb.append("0");
            }
            sb.append(Integer.toHexString(b));
        }
        return sb.toString();
    }
----------------------------------------
    public static String arrayToString(Object[] arr) {
        StringBuilder sb = new StringBuilder();
        int len = arr.length;
        for (int i = 0; i < len; i++) {
            sb.append(arr[i]);
            if (i != len - 1) {
                sb.append(",");
            }
        }
        return sb.toString();
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,534357.java,824,831
selected,2675547.java,121,134
----------------------------------------
    protected static File getFileFromURL(URL url) throws MalformedURLException {
        if (!url.getProtocol().equals("file")) throw new IllegalArgumentException("The passed URL does not point to a file.");
        try {
            return new File(url.toURI());
        } catch (URISyntaxException e) {
            throw new MalformedURLException(e.getMessage());
        }
    }
----------------------------------------
    public static File getOutputFileN3P(URL url) {
        File n3PProjectFile = null;
        if (url.getProtocol().equals("file")) {
            try {
                final File projectFile = new File(url.toURI());
                n3PProjectFile = new File(projectFile.getAbsolutePath() + N3_EXT);
            } catch (final URISyntaxException e) {
                throw new RuntimeException("getOutputFile", e);
            }
        } else {
            throw new UnsupportedOperationException("Project can only be saved locally");
        }
        return n3PProjectFile;
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,1512431.java,308,324
selected,1512431.java,290,306
----------------------------------------
    private void addFileToZip(ZipOutputStream out, String fn, String content) {
        if (fn != null) {
            byte[] buf = new byte[1024];
            try {
                ByteArrayInputStream bais = new ByteArrayInputStream(content.getBytes());
                out.putNextEntry(new ZipEntry(fn));
                int len;
                while ((len = bais.read(buf)) > 0) {
                    out.write(buf, 0, len);
                }
                out.closeEntry();
                bais.close();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }
----------------------------------------
    private void addExistingFileToZip(ZipOutputStream out, String entryName, String filePath) {
        if (filePath != null) {
            byte[] buf = new byte[1024];
            try {
                BufferedReader br = new BufferedReader(new FileReader(filePath));
                out.putNextEntry(new ZipEntry(entryName));
                int data;
                while ((data = br.read()) != -1) {
                    out.write(data);
                }
                out.closeEntry();
                br.close();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,1115268.java,80,99
selected,871757.java,711,729
----------------------------------------
    public static void copyFile(File in, File out) {
        try {
            FileChannel inChannel = null, outChannel = null;
            try {
                out.getParentFile().mkdirs();
                inChannel = new FileInputStream(in).getChannel();
                outChannel = new FileOutputStream(out).getChannel();
                outChannel.transferFrom(inChannel, 0, inChannel.size());
            } finally {
                if (inChannel != null) {
                    inChannel.close();
                }
                if (outChannel != null) {
                    outChannel.close();
                }
            }
        } catch (Exception e) {
            ObjectUtils.throwAsError(e);
        }
    }
----------------------------------------
    private static void copyFile(File sourceFile, File destFile) throws IOException {
        if (!destFile.exists()) {
            destFile.createNewFile();
        }
        FileChannel source = null;
        FileChannel destination = null;
        try {
            source = new FileInputStream(sourceFile).getChannel();
            destination = new FileOutputStream(destFile).getChannel();
            destination.transferFrom(source, 0, source.size());
        } finally {
            if (source != null) {
                source.close();
            }
            if (destination != null) {
                destination.close();
            }
        }
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,1023830.java,218,227
selected,1349679.java,82,94
----------------------------------------
    private void install(InputStream source, File destination) throws IOException {
        OutputStream out = new FileOutputStream(destination);
        byte[] buffer = new byte[4096];
        int bytes = 0;
        while ((bytes = source.read(buffer)) > -1) {
            out.write(buffer, 0, bytes);
        }
        source.close();
        out.close();
    }
----------------------------------------
    private void copy(InputStream source, OutputStream destination) throws IOException {
        try {
            byte[] buf = new byte[1024];
            int len;
            while ((len = source.read(buf)) > 0) {
                destination.write(buf, 0, len);
            }
            source.close();
            destination.close();
        } catch (IOException ioe) {
            throw ioe;
        }
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,2688400.java,58,77
selected,2733872.java,85,99
----------------------------------------
    public static void copy(URL src, File dst) throws IOException {
        if ((src != null) && (dst != null)) {
            boolean success = true;
            File parent = dst.getParentFile();
            if (!parent.exists()) {
                success = parent.mkdirs();
            }
            if (success) {
                InputStream in = src.openStream();
                OutputStream out = new FileOutputStream(dst);
                byte[] buf = new byte[1024];
                int len;
                while ((len = in.read(buf)) > 0) {
                    out.write(buf, 0, len);
                }
                in.close();
                out.close();
            }
        }
    }
----------------------------------------
    public static void copyFile(File from, File to) throws Exception {
        if (!from.exists()) return;
        FileInputStream in = new FileInputStream(from);
        FileOutputStream out = new FileOutputStream(to);
        byte[] buffer = new byte[BUFFER_SIZE];
        int bytes_read;
        while (true) {
            bytes_read = in.read(buffer);
            if (bytes_read == -1) break;
            out.write(buffer, 0, bytes_read);
        }
        out.flush();
        out.close();
        in.close();
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,59218.java,1017,1029
selected,927691.java,1046,1059
----------------------------------------
        public OutputStream(java.io.OutputStream out, int options) {
            super(out);
            this.breakLines = (options & DONT_BREAK_LINES) != DONT_BREAK_LINES;
            this.encode = (options & ENCODE) == ENCODE;
            this.bufferLength = encode ? 3 : 4;
            this.buffer = new byte[bufferLength];
            this.position = 0;
            this.lineLength = 0;
            this.suspendEncoding = false;
            this.b4 = new byte[4];
            this.options = options;
            this.decodabet = getDecodabet(options);
        }
----------------------------------------
        public OutputStream(java.io.OutputStream out, int options) {
            super(out);
            this.breakLines = (options & DONT_BREAK_LINES) != DONT_BREAK_LINES;
            this.encode = (options & ENCODE) == ENCODE;
            this.bufferLength = encode ? 3 : 4;
            this.buffer = new byte[bufferLength];
            this.position = 0;
            this.lineLength = 0;
            this.suspendEncoding = false;
            this.b4 = new byte[4];
            this.options = options;
            this.alphabet = getAlphabet(options);
            this.decodabet = getDecodabet(options);
        }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
default,65107.java,64,71
default,123780.java,54,62
----------------------------------------
    String sequenceUsingFor(int start, int stop) {
        StringBuilder builder = new StringBuilder();
        for (int i = start; i <= stop; i++) {
            if (i > start) builder.append(',');
            builder.append(i);
        }
        return builder.toString();
    }
----------------------------------------
    String sequenceUsingDo(int start, int stop) {
        StringBuilder builder = new StringBuilder();
        int i = start;
        do {
            if (i > start) builder.append(',');
            builder.append(i);
        } while (++i <= stop);
        return builder.toString();
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,580360.java,93,101
selected,797836.java,228,235
----------------------------------------
    public String getExtension(File f) {
        String ext = null;
        String s = f.getName();
        int i = s.lastIndexOf('.');
        if (i > 0 && i < s.length() - 1) {
            ext = s.substring(i + 1).toLowerCase();
        }
        return ext;
    }
----------------------------------------
    public static String getFileExtension(String filePath) {
        int periodPosition = filePath.lastIndexOf(".");
        if ((periodPosition != -1) && ((periodPosition + 1) < filePath.length())) {
            return filePath.substring(periodPosition);
        } else {
            return "";
        }
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,2466734.java,167,173
selected,2688436.java,150,158
----------------------------------------
    private String digest(String input) throws NoSuchAlgorithmException, UnsupportedEncodingException {
        MessageDigest md = MessageDigest.getInstance("MD5");
        byte[] md5hash = new byte[64];
        md.update(input.getBytes("iso-8859-1"), 0, input.length());
        md5hash = md.digest();
        return this.convertToHex(md5hash);
    }
----------------------------------------
    public static String MD5(byte[] data) throws NoSuchAlgorithmException, UnsupportedEncodingException {
        String text = convertToHex(data);
        MessageDigest md;
        md = MessageDigest.getInstance("MD5");
        byte[] md5hash = new byte[32];
        md.update(text.getBytes("iso-8859-1"), 0, text.length());
        md5hash = md.digest();
        return convertToHex(md5hash);
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,1611108.java,41,54
default,34939.java,73,82
----------------------------------------
    public static String createStrWithZeroFromStr(String src, int strLength, boolean preFlag) {
        StringBuffer result = new StringBuffer();
        if (preFlag) {
            result.append(src);
        }
        int zeroNum = strLength - src.length();
        for (int i = 0; i < zeroNum; i++) {
            result.append("0");
        }
        if (!preFlag) {
            result.append(src);
        }
        return result.toString();
    }
----------------------------------------
    String sequenceUsingWhile(int start, int stop) {
        StringBuilder builder = new StringBuilder();
        int i = start;
        while (i <= stop) {
            if (i > start) builder.append(',');
            builder.append(i);
            i++;
        }
        return builder.toString();
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,284272.java,628,647
selected,1782576.java,555,574
----------------------------------------
    public static String nullSafeToString(char[] array) {
        if (array == null) {
            return NULL_STRING;
        }
        int length = array.length;
        if (length == 0) {
            return EMPTY_ARRAY;
        }
        StringBuffer buffer = new StringBuffer();
        for (int i = 0; i < length; i++) {
            if (i == 0) {
                buffer.append(ARRAY_START);
            } else {
                buffer.append(ARRAY_ELEMENT_SEPARATOR);
            }
            buffer.append("'").append(array[i]).append("'");
        }
        buffer.append(ARRAY_END);
        return buffer.toString();
    }
----------------------------------------
    public static String nullSafeToString(boolean[] array) {
        if (array == null) {
            return NULL_STRING;
        }
        int length = array.length;
        if (length == 0) {
            return EMPTY_ARRAY;
        }
        StringBuffer buffer = new StringBuffer();
        for (int i = 0; i < length; i++) {
            if (i == 0) {
                buffer.append(ARRAY_START);
            } else {
                buffer.append(ARRAY_ELEMENT_SEPARATOR);
            }
            buffer.append(array[i]);
        }
        buffer.append(ARRAY_END);
        return buffer.toString();
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,2118971.java,17,23
default,87653.java,929,938
----------------------------------------
    private static String getUnsigned(String method) {
        StringBuilder b = new StringBuilder(1000);
        b.append("api_key=").append(API_KEY);
        b.append("&method=").append(method);
        b.append("&perms=delete");
        return b.toString();
    }
----------------------------------------
    private byte[] exportAutoEpgList(HTTPurl urlData) throws Exception {
        StringBuffer buff = new StringBuffer();
        buff.append("HTTP/1.0 200 OK\nContent-Type: text/xml\n");
        buff.append("Content-Disposition: attachment; filename=\"EpgAutoAdd.xml\"\n");
        buff.append("Pragma: no-cache\n");
        buff.append("Cache-Control: no-cache\n");
        buff.append("\n");
        store.saveEpgAutoList(buff);
        return buff.toString().getBytes();
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,506654.java,97,105
default,110253.java,18,25
----------------------------------------
    public static String readFully(Reader reader) throws IOException {
        char[] arr = new char[8 * 1024];
        StringBuffer buf = new StringBuffer();
        int numChars;
        while ((numChars = reader.read(arr, 0, arr.length)) > 0) {
            buf.append(arr, 0, numChars);
        }
        return buf.toString();
    }
----------------------------------------
    public static String arrayToString(byte[] array) {
        int length = array.length * 2;
        StringBuilder builder = new StringBuilder(length);
        for (byte b : array) {
            builder.append(Integer.toString(b & 0xff, 16));
        }
        return builder.toString();
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,587075.java,647,660
selected,1902248.java,205,218
----------------------------------------
    public static void writeFile(InputStream is, File file) {
        BufferedOutputStream fOut = null;
        try {
            fOut = new BufferedOutputStream(new FileOutputStream(file));
            byte[] buffer = new byte[32 * 1024];
            int bytesRead = 0;
            while ((bytesRead = is.read(buffer)) != -1) {
                fOut.write(buffer, 0, bytesRead);
            }
            fOut.close();
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }
----------------------------------------
    public static void writeFileToWriter(Writer outWriter, File inputFile, boolean closeWriter) throws IOException {
        BufferedReader in = new BufferedReader(new FileReader(inputFile));
        BufferedWriter out = new BufferedWriter(outWriter);
        char[] chars = new char[BUFFER_SIZE];
        int s = 0;
        while ((s = in.read(chars)) != -1) {
            out.write(new String(chars, 0, s));
        }
        out.flush();
        in.close();
        if (closeWriter) {
            out.close();
        }
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,2440410.java,106,111
default,112548.java,126,130
----------------------------------------
    public void printInputStreamToout(InputStream teststream, OutputStream out) throws IOException {
        byte buf[] = new byte[1024];
        int len;
        while ((len = teststream.read(buf)) > 0) out.write(buf, 0, len);
        out.close();
    }
----------------------------------------
    private static void copy(InputStream in, OutputStream out) throws IOException {
        byte[] buf = new byte[BUFFER_SIZE];
        int read;
        while ((read = in.read(buf, 0, BUFFER_SIZE)) != -1) out.write(buf, 0, read);
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,785727.java,275,288
selected,2180965.java,580,599
----------------------------------------
    public static String implodeIntArray(String separator, int[] values) {
        String result = null;
        if (values.length > 0) {
            StringBuilder temp = new StringBuilder();
            for (int i = 0; i < values.length; i++) {
                if (temp.length() > 0) {
                    temp.append(separator);
                }
                temp.append(values[i]);
            }
            result = temp.toString();
        }
        return result;
    }
----------------------------------------
    public static String nullSafeToString(double[] array) {
        if (array == null) {
            return NULL_STRING;
        }
        int length = array.length;
        if (length == 0) {
            return EMPTY_ARRAY;
        }
        StringBuffer buffer = new StringBuffer();
        for (int i = 0; i < length; i++) {
            if (i == 0) {
                buffer.append(ARRAY_START);
            } else {
                buffer.append(ARRAY_ELEMENT_SEPARATOR);
            }
            buffer.append(array[i]);
        }
        buffer.append(ARRAY_END);
        return buffer.toString();
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,1143835.java,768,773
selected,1297783.java,94,101
----------------------------------------
    public java.util.ArrayList toList() {
        int mySize = size();
        java.util.ArrayList list = new java.util.ArrayList(mySize);
        for (int i = 0; i < mySize; i++) list.add(new Long(get(i)));
        return list;
    }
----------------------------------------
    protected ArrayList<Member> getFwdList(Member origin) {
        ArrayList<Member> fwdTo = new ArrayList<Member>();
        for (int i = 0; i < this.neighbours.size(); i++) {
            Member m = (Member) this.neighbours.get(i);
            if (m != origin) fwdTo.add(m);
        }
        return fwdTo;
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,130458.java,22,34
selected,896716.java,10,18
----------------------------------------
    public static void copy(File src, File dst) throws IOException {
        FileChannel srcChannel = new FileInputStream(src).getChannel();
        FileChannel dstChannel = new FileOutputStream(dst).getChannel();
        try {
            dstChannel.transferFrom(srcChannel, 0, srcChannel.size());
        } finally {
            try {
                srcChannel.close();
            } finally {
                dstChannel.close();
            }
        }
    }
----------------------------------------
    public static void copyFile(File src, File dest) throws IOException {
        FileInputStream fis = new FileInputStream(src);
        FileOutputStream fos = new FileOutputStream(dest);
        java.nio.channels.FileChannel channelSrc = fis.getChannel();
        java.nio.channels.FileChannel channelDest = fos.getChannel();
        channelSrc.transferTo(0, channelSrc.size(), channelDest);
        fis.close();
        fos.close();
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,1612687.java,39,48
default,10640.java,64,71
----------------------------------------
    public static String join(String sep, String... words) {
        StringBuffer s = new StringBuffer();
        for (int i = 0; i < words.length; i++) {
            s.append(words[i]);
            if (i < words.length - 1) {
                s.append(sep);
            }
        }
        return s.toString();
    }
----------------------------------------
    String sequenceUsingFor(int start, int stop) {
        StringBuilder builder = new StringBuilder();
        for (int i = start; i <= stop; i++) {
            if (i > start) builder.append(',');
            builder.append(i);
        }
        return builder.toString();
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,1707874.java,26,38
selected,2210331.java,75,86
----------------------------------------
    private static String convertToHex(byte[] data) {
        AssertUtility.notNull(data);
        StringBuffer buf = new StringBuffer();
        for (int i = 0; i < data.length; i++) {
            int halfbyte = (data[i] >>> 4) & 0x0F;
            int two_halfs = 0;
            do {
                if ((0 <= halfbyte) && (halfbyte <= 9)) buf.append((char) ('0' + halfbyte)); else buf.append((char) ('a' + (halfbyte - 10)));
                halfbyte = data[i] & 0x0F;
            } while (two_halfs++ < 1);
        }
        return buf.toString();
    }
----------------------------------------
    private static String convertToHex(byte[] data) {
        StringBuffer buf = new StringBuffer();
        for (int i = 0; i < data.length; i++) {
            int halfbyte = (data[i] >>> 4) & 0x0F;
            int two_halfs = 0;
            do {
                if ((0 <= halfbyte) && (halfbyte <= 9)) buf.append((char) ('0' + halfbyte)); else buf.append((char) ('a' + (halfbyte - 10)));
                halfbyte = data[i] & 0x0F;
            } while (two_halfs++ < 1);
        }
        return buf.toString();
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,1384958.java,649,657
selected,2308223.java,537,547
----------------------------------------
    public Matrix plusEquals(Matrix B) {
        checkMatrixDimensions(B);
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                A[i][j] = A[i][j] + B.A[i][j];
            }
        }
        return this;
    }
----------------------------------------
    public Matrix arrayTimes(Matrix B) {
        checkMatrixDimensions(B);
        Matrix X = new Matrix(m, n);
        double[][] C = X.getArray();
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                C[i][j] = A[i][j] * B.A[i][j];
            }
        }
        return X;
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,2485419.java,330,341
selected,211182.java,521,529
----------------------------------------
    public CMatrix affineDifference() {
        if (columns == 1) {
            return this;
        }
        CMatrix m = new CMatrix(rows, columns);
        for (int r = 0; r < rows; r++) {
            for (int c = 0; c < columns; c++) {
                m.coefficients[r][c] = coefficients[r][c].difference(coefficients[r][0]);
            }
        }
        return m;
    }
----------------------------------------
    public Matrix plusEquals(Matrix B) {
        checkMatrixDimensions(B);
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                A[i][j] = A[i][j] + B.A[i][j];
            }
        }
        return this;
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,2426442.java,284,299
selected,1995145.java,444,458
----------------------------------------
    private static String getStreamAsString(InputStream stream, String charset) throws IOException {
        try {
            BufferedReader reader = new BufferedReader(new InputStreamReader(stream, charset));
            StringWriter writer = new StringWriter();
            char[] chars = new char[256];
            int count = 0;
            while ((count = reader.read(chars)) > 0) {
                writer.write(chars, 0, count);
            }
            return writer.toString();
        } finally {
            if (stream != null) {
                stream.close();
            }
        }
    }
----------------------------------------
    public static final String read(final Reader reader, final int bufferSize) throws IOException {
        final StringBuilder sb = new StringBuilder();
        final char[] buffer = new char[bufferSize];
        final BufferedReader in = new BufferedReader(reader);
        try {
            while (true) {
                final int count = in.read(buffer);
                if (count == -1) break;
                sb.append(buffer, 0, count);
            }
        } finally {
            in.close();
        }
        return sb.toString();
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,287416.java,67,83
selected,743040.java,303,319
----------------------------------------
    @SuppressWarnings("unchecked")
    public List<Threadsmod> findByThreadsBytid(int tid) {
        Transaction tr = null;
        try {
            Session session = HibernateUtil.getSessionFactory().getCurrentSession();
            tr = session.beginTransaction();
            Query query = session.createQuery("from Threadsmod as m where m.id.tid=? order by m.id.dateline desc");
            query.setParameter(0, tid);
            List<Threadsmod> modlist = query.list();
            tr.commit();
            return modlist;
        } catch (HibernateException e) {
            if (tr != null) tr.rollback();
            e.printStackTrace();
        }
        return null;
    }
----------------------------------------
    public boolean modifyProfile(Profilefields profile) {
        Session session = HibernateUtil.getSessionFactory().getCurrentSession();
        Transaction tr = null;
        try {
            tr = session.beginTransaction();
            session.update(profile);
            session.flush();
            tr.commit();
            return true;
        } catch (HibernateException e) {
            if (tr != null) {
                tr.rollback();
            }
            e.printStackTrace();
        }
        return false;
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,1535234.java,15,33
selected,625537.java,238,270
----------------------------------------
    public static String convertStreamToString(final InputStream is) {
        BufferedReader reader = new BufferedReader(new InputStreamReader(is));
        StringBuilder sb = new StringBuilder();
        String line = null;
        try {
            while ((line = reader.readLine()) != null) {
                sb.append(line + "\n");
            }
        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            try {
                is.close();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
        return sb.toString();
    }
----------------------------------------
    public static String readAsString(File file, String... enc) {
        StringBuilder buffer = new StringBuilder(1000);

        BufferedReader in = null;
        try {
            if(enc != null && enc.length > 0) {
                in = new BufferedReader(new InputStreamReader(new FileInputStream(file), enc[0]));
            }
            else {
                in = new BufferedReader(new FileReader(file));
            }

            String oneLine = null;
            while((oneLine = in.readLine()) != null) {
                buffer.append(oneLine).append(LS);
            }
        }
        catch(Exception e) {
            e.printStackTrace(System.out);
        }
        finally {
            if(in != null) {
                try {
                    in.close();
                }
                catch(IOException e) {
                    e.printStackTrace();
                }
            }
        }

        return buffer.toString();
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,1535234.java,59,69
default,76771.java,152,163
----------------------------------------
    public static byte[] convertStreamToByte(final InputStream is) throws IOException {
        ByteArrayOutputStream out = new ByteArrayOutputStream();
        final int BUF_SIZE = 1 << 8;
        byte[] buffer = new byte[BUF_SIZE];
        int bytesRead = -1;
        while ((bytesRead = is.read(buffer)) > -1) {
            out.write(buffer, 0, bytesRead);
        }
        is.close();
        return out.toByteArray();
    }
----------------------------------------
    private static final byte[] getResourceData(JarInputStream jar) throws IOException {
        ByteArrayOutputStream data = new ByteArrayOutputStream();
        byte[] buffer = new byte[8192];
        int size;
        while (jar.available() > 0) {
            size = jar.read(buffer);
            if (size > 0) {
                data.write(buffer, 0, size);
            }
        }
        return data.toByteArray();
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,938993.java,415,418
selected,893349.java,464,472
----------------------------------------
    public static int getIndexForString(Object[] objs, String s) {
        for (int i = 0; i < objs.length; i++) if (s.equals(objs[i].toString())) return i;
        return -1;
    }
----------------------------------------
    public static int indexOf(Composite parent, Control child) {
        Control[] children = parent.getChildren();
        for (int i = 0; i < children.length; i++) {
            if (children[i].equals(child)) {
                return i;
            }
        }
        return -1;
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,1815674.java,81,89
selected,2299388.java,200,213
----------------------------------------
    void copyFile(File src, File dst) throws IOException {
        InputStream in = new FileInputStream(src);
        OutputStream out = new FileOutputStream(dst);
        byte[] buf = new byte[1024];
        int len;
        while ((len = in.read(buf)) > 0) out.write(buf, 0, len);
        in.close();
        out.close();
    }
----------------------------------------
    public static byte[] loadURL(URL url) throws IOException {
        byte[] buf = new byte[1024];
        ByteArrayOutputStream bout = new ByteArrayOutputStream();
        BufferedInputStream in = new BufferedInputStream(url.openStream());
        int n;
        while ((n = in.read(buf)) > 0) {
            bout.write(buf, 0, n);
        }
        try {
            in.close();
        } catch (Exception ignored) {
        }
        return bout.toByteArray();
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,1616011.java,590,609
selected,2180965.java,460,479
----------------------------------------
    public static String nullSafeToString(boolean[] array) {
        if (array == null) {
            return NULL_STRING;
        }
        int length = array.length;
        if (length == 0) {
            return EMPTY_ARRAY;
        }
        StringBuffer buffer = new StringBuffer();
        for (int i = 0; i < length; i++) {
            if (i == 0) {
                buffer.append(ARRAY_START);
            } else {
                buffer.append(ARRAY_ELEMENT_SEPARATOR);
            }
            buffer.append(array[i]);
        }
        buffer.append(ARRAY_END);
        return buffer.toString();
    }
----------------------------------------
    public static String nullSafeToString(Object[] array) {
        if (array == null) {
            return NULL_STRING;
        }
        int length = array.length;
        if (length == 0) {
            return EMPTY_ARRAY;
        }
        StringBuffer buffer = new StringBuffer();
        for (int i = 0; i < length; i++) {
            if (i == 0) {
                buffer.append(ARRAY_START);
            } else {
                buffer.append(ARRAY_ELEMENT_SEPARATOR);
            }
            buffer.append(String.valueOf(array[i]));
        }
        buffer.append(ARRAY_END);
        return buffer.toString();
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,641441.java,102,110
selected,1949479.java,104,111
----------------------------------------
    private byte[] inputStreamToBytes(InputStream in) throws IOException {
        ByteArrayOutputStream out = new ByteArrayOutputStream(1024);
        byte[] buffer = new byte[1024];
        int len;
        while ((len = in.read(buffer)) >= 0) out.write(buffer, 0, len);
        in.close();
        out.close();
        return out.toByteArray();
    }
----------------------------------------
    private byte[] readBinaryData(RandomAccessFile raf) throws IOException {
        ByteArrayOutputStream bos = new ByteArrayOutputStream();
        int size = Utils.readUINT16(raf);
        for (int i = 0; i < size; i++) {
            bos.write(raf.read());
        }
        return bos.toByteArray();
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,240671.java,471,479
default,103325.java,101,110
----------------------------------------
    public static String print(double[][] x) {
        if (x == null) return "null";
        StringBuffer b = new StringBuffer();
        for (int i = 0; i < x.length - 1; i++) {
            b.append(print(x[i])).append("\n");
        }
        b.append(print(x[x.length - 1]));
        return b.toString();
    }
----------------------------------------
    private static String toHexString(byte[] bytes) {
        StringBuilder sb = new StringBuilder(bytes.length * 3);
        for (int b : bytes) {
            b &= 0xff;
            sb.append(HEXDIGITS[b >> 4]);
            sb.append(HEXDIGITS[b & 15]);
            sb.append(' ');
        }
        return sb.toString();
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,2002180.java,254,261
selected,2241647.java,199,204
----------------------------------------
    private static void copyInputStream(InputStream in, OutputStream out) throws IOException {
        byte[] buffer = new byte[1024];
        int len;
        while (((len = in.read(buffer)) >= 0)) {
            out.write(buffer, 0, len);
        }
        out.flush();
    }
----------------------------------------
    private void pump(InputStream in, OutputStream out, int size) throws IOException {
        byte[] buffer = new byte[size];
        int count;
        while ((count = in.read(buffer, 0, size)) >= 0) out.write(buffer, 0, count);
        out.flush();
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,877932.java,237,251
selected,1317592.java,231,243
----------------------------------------
    @Interruptible
    @Override
    void dumpWaitDescription(VM_GreenThread thread) {
        WaitDataDowncaster downcaster = new WaitDataDowncaster();
        thread.waitData.accept(downcaster);
        VM_ThreadIOWaitData waitData = downcaster.waitData;
        if (VM.VerifyAssertions) VM._assert(waitData == thread.waitData);
        VM.sysWrite("(R");
        dumpFds(waitData.readFds);
        VM.sysWrite(";W");
        dumpFds(waitData.writeFds);
        VM.sysWrite(";E");
        dumpFds(waitData.exceptFds);
        VM.sysWrite(')');
    }
----------------------------------------
    void dumpWaitDescription(VM_Thread thread) throws VM_PragmaInterruptible {
        WaitDataDowncaster downcaster = new WaitDataDowncaster();
        thread.waitData.accept(downcaster);
        VM_ThreadIOWaitData waitData = downcaster.waitData;
        if (VM.VerifyAssertions) VM._assert(waitData == thread.waitData);
        VM.sysWrite("(R");
        dumpFds(waitData.readFds);
        VM.sysWrite(";W");
        dumpFds(waitData.writeFds);
        VM.sysWrite(";E");
        dumpFds(waitData.exceptFds);
        VM.sysWrite(')');
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,2465371.java,442,449
selected,2547481.java,51,61
----------------------------------------
    public static boolean equals(char[] a, char[] a2) {
        if (a == a2) return true;
        if (a == null || a2 == null) return false;
        int length = a.length;
        if (a2.length != length) return false;
        for (int i = 0; i < length; i++) if (a[i] != a2[i]) return false;
        return true;
    }
----------------------------------------
    public static boolean equals(Object[] array0, Object[] array1) {
        if (array0.length == array1.length) {
            for (int i = 0; i < array0.length; i++) {
                if (!array0[i].equals(array1[1])) {
                    return false;
                }
            }
            return true;
        }
        return false;
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,671676.java,30,49
selected,14835.java,81,92
----------------------------------------
    private static byte[] readClassData(File file) throws IOException {
        ByteArrayOutputStream baos = new ByteArrayOutputStream();
        byte[] buffer = new byte[1024];
        int read;
        FileInputStream fis = null;
        try {
            fis = new FileInputStream(file);
            while ((read = fis.read(buffer)) > 0) {
                baos.write(buffer, 0, read);
            }
        } finally {
            if (fis != null) {
                try {
                    fis.close();
                } catch (IOException e1) {
                }
            }
        }
        return baos.toByteArray();
    }
----------------------------------------
    private static ByteBuffer readToByteBuffer(InputStream inStream) throws IOException {
        byte[] buffer = new byte[bufferSize];
        ByteArrayOutputStream outStream = new ByteArrayOutputStream(bufferSize);
        int read;
        while (true) {
            read = inStream.read(buffer);
            if (read == -1) break;
            outStream.write(buffer, 0, read);
        }
        ByteBuffer byteData = ByteBuffer.wrap(outStream.toByteArray());
        return byteData;
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,2362724.java,224,233
selected,1612900.java,183,202
----------------------------------------
            public void mouseClicked(MouseEvent e) {
                TableColumnModel columnModel = tableView.getColumnModel();
                int viewColumn = columnModel.getColumnIndexAtX(e.getX());
                int column = tableView.convertColumnIndexToModel(viewColumn);
                if (e.getClickCount() == 1 && column != -1) {
                    int shiftPressed = e.getModifiers() & InputEvent.SHIFT_MASK;
                    boolean ascending = (shiftPressed == 0);
                    sorter.sortByColumn(column, ascending);
                }
            }
----------------------------------------
    public void addMouseListenerToHeaderInTable(JTable table) {
        final TableSorter sorter = this;
        final JTable tableView = table;
        tableView.setColumnSelectionAllowed(false);
        MouseAdapter listMouseListener = new MouseAdapter() {

            public void mouseClicked(MouseEvent e) {
                TableColumnModel columnModel = tableView.getColumnModel();
                int viewColumn = columnModel.getColumnIndexAtX(e.getX());
                int column = tableView.convertColumnIndexToModel(viewColumn);
                if (e.getClickCount() == 1 && column != -1) {
                    int shiftPressed = e.getModifiers() & InputEvent.SHIFT_MASK;
                    boolean ascending = (shiftPressed == 0);
                    sorter.sortByColumn(column, ascending);
                }
            }
        };
        JTableHeader th = tableView.getTableHeader();
        th.addMouseListener(listMouseListener);
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,1919406.java,48,54
selected,218824.java,295,304
----------------------------------------
    public static <T> T[] getExtendedArray(final T[] array, final int index, final T element) {
        @SuppressWarnings("unchecked") final T[] newArray = (T[]) Array.newInstance(array.getClass().getComponentType(), array.length + 1);
        System.arraycopy(array, 0, newArray, 0, index);
        newArray[index] = element;
        System.arraycopy(array, index, newArray, index + 1, newArray.length - (index + 1));
        return newArray;
    }
----------------------------------------
    @SuppressWarnings({ "SuspiciousSystemArraycopy", "unchecked" })
    public static <T> T reallocArray(@NotNull T array, int length, boolean preserveData) {
        int current = Array.getLength(array);
        if (current == length) return array;
        T newArray = (T) Array.newInstance(array.getClass().getComponentType(), length);
        if (preserveData) {
            System.arraycopy(array, 0, newArray, 0, Math.min(length, current));
        }
        return newArray;
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
default,133515.java,705,713
default,89968.java,496,500
----------------------------------------
    private static void exit(String prompt, boolean error) {
        if (prompt != null) {
            System.err.println(prompt);
        }
        if (error) {
            System.err.println(messages.getString("try"));
        }
        System.exit(1);
    }
----------------------------------------
    private static void exit(String prompt, boolean error) {
        if (prompt != null) System.err.println(prompt);
        if (error) System.err.println(messages.getString("try"));
        System.exit(1);
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,985401.java,837,847
selected,2069719.java,556,575
----------------------------------------
    private String fileNameString(File[] files) {
        if (files == null) return "";
        StringBuffer buf = new StringBuffer();
        for (int i = 0, n = files.length; i < n; i++) {
            if (i > 0) buf.append(" ");
            if (n > 1) buf.append("\"");
            buf.append(fileNameString(files[i]));
            if (n > 1) buf.append("\"");
        }
        return buf.toString();
    }
----------------------------------------
    public static String nullSafeToString(byte[] array) {
        if (array == null) {
            return NULL_STRING;
        }
        int length = array.length;
        if (length == 0) {
            return EMPTY_ARRAY;
        }
        StringBuffer buffer = new StringBuffer();
        for (int i = 0; i < length; i++) {
            if (i == 0) {
                buffer.append(ARRAY_START);
            } else {
                buffer.append(ARRAY_ELEMENT_SEPARATOR);
            }
            buffer.append(array[i]);
        }
        buffer.append(ARRAY_END);
        return buffer.toString();
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,1161465.java,172,183
selected,2601153.java,54,59
----------------------------------------
    public static String md5(String input) {
        byte[] temp;
        try {
            MessageDigest messageDigest;
            messageDigest = MessageDigest.getInstance("MD5");
            messageDigest.update(input.getBytes());
            temp = messageDigest.digest();
        } catch (Exception e) {
            return null;
        }
        return MyUtils.byte2HexStr(temp);
    }
----------------------------------------
    public static synchronized String encrypt(String plaintext) throws Exception {
        MessageDigest md = MessageDigest.getInstance("MD5");
        md.update(plaintext.getBytes("UTF-8"));
        byte raw[] = md.digest();
        return (new BASE64Encoder()).encode(raw);
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,1958218.java,159,170
selected,903944.java,101,109
----------------------------------------
    public NodeId generateTopicId(String topicName) {
        MessageDigest md = null;
        try {
            md = MessageDigest.getInstance("SHA");
        } catch (NoSuchAlgorithmException e) {
            System.err.println("No SHA support!");
        }
        md.update(topicName.getBytes());
        byte[] digest = md.digest();
        NodeId newId = new NodeId(digest);
        return newId;
    }
----------------------------------------
    byte[] calculateDigest(String value) {
        try {
            MessageDigest mg = MessageDigest.getInstance("SHA1");
            mg.update(value.getBytes());
            return mg.digest();
        } catch (Exception e) {
            throw Bark.unchecker(e);
        }
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,1802706.java,820,832
selected,1718966.java,563,572
----------------------------------------
    public static void forceMkdir(final File file) throws IOException {
        if (file.exists()) {
            if (file.isFile()) {
                final String message = "File " + file + " exists and is " + "not a directory. Unable to create directory.";
                throw new IOException(message);
            }
        } else {
            if (false == file.mkdirs()) {
                final String message = "Unable to create directory " + file;
                throw new IOException(message);
            }
        }
    }
----------------------------------------
    public static final void checkCommand(String file) throws SecurityException, IOException {
        File f = new File(file);
        if (!f.exists()) {
            throw new IOException(file + " does not exist");
        } else if (!f.isFile()) {
            throw new IOException(file + " is not a normal file");
        } else if (!f.canRead()) {
            throw new IOException("Cannot read from " + file);
        }
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,845917.java,1101,1112
selected,2490913.java,234,241
----------------------------------------
    protected boolean sameSenoneSequence(int[] ssid1, int[] ssid2) {
        if (ssid1.length == ssid2.length) {
            for (int i = 0; i < ssid1.length; i++) {
                if (ssid1[i] != ssid2[i]) {
                    return false;
                }
            }
            return true;
        } else {
            return false;
        }
    }
----------------------------------------
    public int indexOf(Object elem) {
        if (elem == null) {
            for (int i = 0; i < size; i++) if (elementData[i] == null) return i;
        } else {
            for (int i = 0; i < size; i++) if (elem.equals(elementData[i])) return i;
        }
        return -1;
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,1322429.java,371,379
selected,2730348.java,120,128
----------------------------------------
    public int[][] getArrayCopy() {
        int[][] C = new int[m][n];
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                C[i][j] = A[i][j];
            }
        }
        return C;
    }
----------------------------------------
    public static double[][] one(int m, int n, double c) {
        double[][] o = new double[m][n];
        for (int i = 0; i < o.length; i++) {
            for (int j = 0; j < o[i].length; j++) {
                o[i][j] = c;
            }
        }
        return o;
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,784722.java,203,214
selected,1452844.java,51,65
----------------------------------------
    public static String stripTags(final String str) {
        final ByteArrayInputStream is = new ByteArrayInputStream(str.getBytes());
        final StringBuilder result = new StringBuilder();
        final ReadHTML html = new ReadHTML(is);
        int ch;
        while ((ch = html.read()) != -1) {
            if (ch != 0) {
                result.append((char) ch);
            }
        }
        return result.toString();
    }
----------------------------------------
    private static String readFromFile(final File file) throws Exception {
        FileInputStream filestream = new FileInputStream(file);
        InputStreamReader reader = new InputStreamReader(filestream);
        try {
            StringBuffer buffer = new StringBuffer();
            char[] tmp = new char[2048];
            int l;
            while ((l = reader.read(tmp)) != -1) {
                buffer.append(tmp, 0, l);
            }
            return buffer.toString();
        } finally {
            reader.close();
        }
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,1263726.java,464,487
selected,1263726.java,433,457
----------------------------------------
    @Override
    public void eUnset(int featureID) {
        switch(featureID) {
            case ActionstepPackage.VOICEMAIL__CALL1:
                setCall1((SafiCall) null);
                return;
            case ActionstepPackage.VOICEMAIL__MAILBOX:
                setMailbox((DynamicValue) null);
                return;
            case ActionstepPackage.VOICEMAIL__SKIP_INSTRUCTIONS:
                setSkipInstructions(SKIP_INSTRUCTIONS_EDEFAULT);
                return;
            case ActionstepPackage.VOICEMAIL__PLAY_UNAVAILABLE_MESSAGE:
                setPlayUnavailableMessage(PLAY_UNAVAILABLE_MESSAGE_EDEFAULT);
                return;
            case ActionstepPackage.VOICEMAIL__PLAY_BUSY_MESSAGE:
                setPlayBusyMessage(PLAY_BUSY_MESSAGE_EDEFAULT);
                return;
            case ActionstepPackage.VOICEMAIL__RECORDING_GAIN:
                setRecordingGain(RECORDING_GAIN_EDEFAULT);
                return;
        }
        super.eUnset(featureID);
    }
----------------------------------------
    @SuppressWarnings("unchecked")
    @Override
    public void eSet(int featureID, Object newValue) {
        switch(featureID) {
            case ActionstepPackage.VOICEMAIL__CALL1:
                setCall1((SafiCall) newValue);
                return;
            case ActionstepPackage.VOICEMAIL__MAILBOX:
                setMailbox((DynamicValue) newValue);
                return;
            case ActionstepPackage.VOICEMAIL__SKIP_INSTRUCTIONS:
                setSkipInstructions((Boolean) newValue);
                return;
            case ActionstepPackage.VOICEMAIL__PLAY_UNAVAILABLE_MESSAGE:
                setPlayUnavailableMessage((Boolean) newValue);
                return;
            case ActionstepPackage.VOICEMAIL__PLAY_BUSY_MESSAGE:
                setPlayBusyMessage((Boolean) newValue);
                return;
            case ActionstepPackage.VOICEMAIL__RECORDING_GAIN:
                setRecordingGain((Integer) newValue);
                return;
        }
        super.eSet(featureID, newValue);
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,2223092.java,41,58
selected,1303957.java,130,143
----------------------------------------
    public void storePatch(Patch p, int bankNum, int patchNum) {
        System.out.println("storePatch: Not implemented yet.");
        setBankNum(bankNum);
        setPatchNum(patchNum);
        try {
            Thread.sleep(100);
        } catch (Exception e) {
        }
        p.sysex[3] = (byte) 0x20;
        p.sysex[6] = (byte) (bankNum << 1);
        p.sysex[7] = (byte) (patchNum);
        sendPatchWorker(p);
        try {
            Thread.sleep(100);
        } catch (Exception e) {
        }
        setPatchNum(patchNum);
    }
----------------------------------------
    public void storePatch(Patch p, int bankNum, int patchNum) {
        try {
            Thread.sleep(100);
        } catch (Exception e) {
        }
        p.sysex[3] = (byte) 0x21;
        p.sysex[6] = (byte) (bankNum << 1);
        p.sysex[7] = (byte) 0x40;
        sendPatchWorker(p);
        try {
            Thread.sleep(100);
        } catch (Exception e) {
        }
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,2236457.java,88,97
selected,2593456.java,707,726
----------------------------------------
    private String toHexString(byte[] bytes) {
        StringBuilder str = new StringBuilder(bytes.length * 2);
        for (int i = 0; i < bytes.length; i++) {
            int value = bytes[i];
            if (value < 0) value += 256;
            str.append(toHexChar(value >>> 4));
            str.append(toHexChar(value & 15));
        }
        return str.toString();
    }
----------------------------------------
    public static String nullSafeToString(short[] array) {
        if (array == null) {
            return NULL_STRING;
        }
        int length = array.length;
        if (length == 0) {
            return EMPTY_ARRAY;
        }
        StringBuffer buffer = new StringBuffer();
        for (int i = 0; i < length; i++) {
            if (i == 0) {
                buffer.append(ARRAY_START);
            } else {
                buffer.append(ARRAY_ELEMENT_SEPARATOR);
            }
            buffer.append(array[i]);
        }
        buffer.append(ARRAY_END);
        return buffer.toString();
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,1677939.java,1091,1111
default,28716.java,824,843
----------------------------------------
        int getByte(byte[] array, int begin, int length) throws java.io.IOException {
            int i = 0;
            int foo = begin;
            while (true) {
                i = (inend - instart);
                if (i < length) {
                    if (i != 0) {
                        System.arraycopy(inbuffer, instart, array, begin, i);
                        begin += i;
                        length -= i;
                        instart += i;
                    }
                    read(length);
                    continue;
                }
                System.arraycopy(inbuffer, instart, array, begin, length);
                instart += length;
                break;
            }
            return begin + length - foo;
        }
----------------------------------------
        int getByte(byte[] array, int begin, int length) throws java.io.IOException {
            int i = 0;
            int foo = begin;
            while (true) {
                if ((i = (inend - instart)) < length) {
                    if (i != 0) {
                        System.arraycopy(inbuffer, instart, array, begin, i);
                        begin += i;
                        length -= i;
                        instart += i;
                    }
                    read(length);
                    continue;
                }
                System.arraycopy(inbuffer, instart, array, begin, length);
                instart += length;
                break;
            }
            return begin + length - foo;
        }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,1966734.java,392,397
selected,1519348.java,532,540
----------------------------------------
    public void notifyObserversUpdateStatusLine() {
        java.util.Iterator it = this._uiObserverSet.iterator();
        while (it.hasNext()) {
            ((ftraq.gui.UiObserver) it.next()).updateStatusLine();
        }
    }
----------------------------------------
    synchronized void fireCtcpErrmsgReplyReceived(CtcpErrmsgReplyEvent event) {
        for (Iterator it = ctcpListeners.iterator(); it.hasNext(); ) {
            try {
                ((CtcpListener) it.next()).errmsgReplyReceived(event);
            } catch (Exception exc) {
                handleException(exc);
            }
        }
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,671154.java,147,150
selected,100172.java,345,353
----------------------------------------
    private String[][] alteraMatrizDeStringsResp(String[][] s) {
        for (int i = 0; i < s.length; i++) for (int j = 0; j < s[i].length; j++) s[i][j] = alteraStringResp(s[i][j]);
        return s;
    }
----------------------------------------
    public Matrix arrayTimesEquals(Matrix B) {
        checkMatrixDimensions(B);
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                A[i][j] = A[i][j] * B.A[i][j];
            }
        }
        return this;
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,44235.java,61,66
selected,1087990.java,174,182
----------------------------------------
    public static String getExtension(File f) {
        String name = f.getName();
        int i = name.lastIndexOf(".");
        if (i == -1 || i == name.length() - 1) return "";
        return name.substring(i + 1, name.length());
    }
----------------------------------------
    public static String getNameOnly(File file) {
        String strFileName = file.getName();
        int dotPlace = strFileName.lastIndexOf('.');
        if (dotPlace >= 0) {
            return strFileName.substring(0, dotPlace);
        } else {
            return strFileName;
        }
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,527654.java,256,263
selected,1955546.java,95,105
----------------------------------------
    public static String byteArrayToHex(byte... buffer) {
        StringBuilder result = new StringBuilder();
        for (byte b : buffer) {
            result.append(hexdigits[(b >> 4) & 0x0F]);
            result.append(hexdigits[b & 0x0F]);
        }
        return result.toString();
    }
----------------------------------------
    private static String vectorToString(Vector vec) {
        int n = vec.size();
        StringBuffer ret = new StringBuffer();
        for (int i = 0; i < n; i++) {
            ret.append((String) vec.elementAt(i));
            if (i < n - 1) {
                ret.append(",");
            }
        }
        return ret.toString();
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,849403.java,573,581
selected,1578910.java,635,645
----------------------------------------
    public Matrix arrayTimesEquals(Matrix B) {
        checkMatrixDimensions(B);
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                A[i][j] = A[i][j] * B.A[i][j];
            }
        }
        return this;
    }
----------------------------------------
    public Matrix plus(Matrix B) {
        checkMatrixDimensions(B);
        Matrix X = new Matrix(m, n);
        double[][] C = X.getArray();
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                C[i][j] = A[i][j] + B.A[i][j];
            }
        }
        return X;
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,849403.java,617,627
selected,2677148.java,102,111
----------------------------------------
    public Matrix arrayLeftDivide(Matrix B) {
        checkMatrixDimensions(B);
        Matrix X = new Matrix(m, n);
        double[][] C = X.getArray();
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                C[i][j] = B.A[i][j] / A[i][j];
            }
        }
        return X;
    }
----------------------------------------
    public Matrix sub(Matrix operand) throws MatricesNotMatch {
        if ((Cols != operand.Cols) || (Rows != operand.Rows)) throw new MatricesNotMatch();
        Matrix result = new Matrix(Rows, Cols);
        for (int i = 0; i < Rows; ++i) {
            for (int j = 0; j < Cols; ++j) {
                result.Values[i][j] = Values[i][j] - operand.Values[i][j];
            }
        }
        return result;
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,240037.java,771,784
selected,240037.java,479,489
----------------------------------------
    @Override
    public List<WSRelation> getRelationsOfConceptClass(Long graphId, String conceptClassId) {
        ONDEXGraph graph = ONDEXGraphRegistry.graphs.get(graphId);
        ONDEXGraphMetaData metaData = graph.getMetaData();
        List<WSRelation> list = new ArrayList<WSRelation>();
        ConceptClass conceptClass = metaData.getConceptClass(conceptClassId);
        ONDEXView<ONDEXRelation> relations = graph.getRelationsOfConceptClass(conceptClass);
        if (relations != null) {
            while (relations.hasNext()) {
                list.add(new WSRelation(relations.next()));
            }
        }
        return list;
    }
----------------------------------------
    @Override
    public List<WSConceptGDS> getConceptGDSs(Long graphId, Integer conceptId) {
        ONDEXGraph graph = ONDEXGraphRegistry.graphs.get(graphId);
        ONDEXConcept concept = graph.getConcept(conceptId);
        List<WSConceptGDS> list = new ArrayList<WSConceptGDS>();
        ONDEXIterator<GDS<ONDEXConcept>> conceptGDSs = concept.getConceptGDSs();
        while (conceptGDSs.hasNext()) {
            list.add(new WSConceptGDS(conceptGDSs.next()));
        }
        return list;
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,2646404.java,119,130
selected,2092736.java,29,39
----------------------------------------
    public static byte[] readBytesFromFile(String filePath) throws IOException {
        logger.info("[readBytesFromFile.in]:: Reading Cert from file: " + filePath);
        FileInputStream fis = new FileInputStream(filePath);
        byte[] buffer = new byte[1024];
        ByteArrayOutputStream baos = new ByteArrayOutputStream();
        int bytesRead = 0;
        while ((bytesRead = fis.read(buffer, 0, buffer.length)) >= 0) {
            baos.write(buffer, 0, bytesRead);
        }
        fis.close();
        return baos.toByteArray();
    }
----------------------------------------
    public String register(InputStream in) throws IOException {
        ByteArrayOutputStream out = new ByteArrayOutputStream();
        byte[] buffer = new byte[8192];
        int len = in.read(buffer);
        while (len >= 0) {
            out.write(buffer, 0, len);
            len = in.read(buffer);
        }
        out.close();
        return register(out.toByteArray());
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,2586226.java,200,211
selected,136465.java,32,43
----------------------------------------
    private void writeString(File file, String string) throws IOException {
        FileOutputStream out = null;
        try {
            out = new FileOutputStream(file);
            PrintWriter w = new PrintWriter(out, true);
            w.println(string);
        } finally {
            if (out != null) {
                out.close();
            }
        }
    }
----------------------------------------
    public HSSFWorkbook getWorkbookFromFile(File file) throws IOException {
        FileInputStream fis = null;
        try {
            fis = new FileInputStream(file);
            POIFSFileSystem fs = new POIFSFileSystem(fis);
            return new HSSFWorkbook(fs);
        } finally {
            if (fis != null) {
                fis.close();
            }
        }
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,825294.java,44,54
selected,2306307.java,149,162
----------------------------------------
    public static boolean bytesAreEqual(byte[] b1, byte[] b2) {
        if (b1.length == b2.length) {
            for (int ii = 0; ii < b1.length; ++ii) {
                if (b1[ii] != b2[ii]) {
                    return false;
                }
            }
            return true;
        }
        return false;
    }
----------------------------------------
    public boolean contains(Object obj) {
        if (obj == null) {
            return false;
        }
        if (elements == null) {
            return false;
        }
        for (int i = 0; i < size; i++) {
            if (elements[i] != null && obj.equals(elements[i])) {
                return true;
            }
        }
        return false;
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,2106140.java,1463,1469
selected,691518.java,244,251
----------------------------------------
        public int getColorNumber(String colorName) {
            int k = 0;
            for (int i = 0; i < COLORS.length; i++) {
                if (colorName.equals(COLORS[i])) return i;
            }
            return k;
        }
----------------------------------------
        private int findTestIndex(String name) {
            for (int i = 0; i < tests.length; i++) {
                if (tests[i].getName().equals(name)) {
                    return i;
                }
            }
            return -1;
        }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,2349310.java,13,29
selected,2318053.java,779,803
----------------------------------------
    public String gen() {
        String plainText = this.password;
        MessageDigest mdAlgorithm;
        StringBuffer hexString = new StringBuffer();
        try {
            mdAlgorithm = MessageDigest.getInstance("MD5");
            mdAlgorithm.update(plainText.getBytes());
            byte[] digest = mdAlgorithm.digest();
            for (int i = 0; i < digest.length; i++) {
                plainText = Integer.toHexString(0xFF & digest[i]);
                if (plainText.length() < 2) plainText = "0" + plainText;
                hexString.append(plainText);
            }
        } catch (NoSuchAlgorithmException ex) {
        }
        return hexString.toString();
    }
----------------------------------------
    public static String md5(String str) {
        if (str == null) {
            System.err.println("Stringx.md5 (String) : null string.");
            return "";
        }
        String rt = "";
        try {
            MessageDigest md5 = MessageDigest.getInstance("MD5");
            md5.update(str.getBytes("gb2312"));
            byte[] bt = md5.digest();
            String s = null;
            int l = 0;
            for (int i = 0; i < bt.length; i++) {
                s = Integer.toHexString(bt[i]);
                l = s.length();
                if (l > 2) s = s.substring(l - 2, l); else if (l == 1) s = "0" + s;
                rt += s;
            }
        } catch (NoSuchAlgorithmException e1) {
            e1.printStackTrace();
        } catch (UnsupportedEncodingException e) {
            e.printStackTrace();
        }
        return rt;
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,2240731.java,280,290
selected,1098670.java,77,90
----------------------------------------
    public void memberUserAdd(String group, String uid) throws Exception {
        Entry _e = getGroupEntry(group);
        Entry _u = getUserEntry(uid);
        if (_e == null) {
            throw new Exception("group does not exists");
        }
        if (_u == null) {
            throw new Exception("user does not exists");
        }
        this._eb.addEntryAttribute(_e.getID(), "member", _u.getID());
    }
----------------------------------------
    public void addUserMember(String group, String uid) throws Exception {
        AttributeSet _user = getUserEntry(uid);
        AttributeSet _group = null;
        if (_user == null) {
            throw new Exception("user does not exists");
        }
        try {
            _group = getGroupEntry(group);
        } catch (Exception _ex) {
        }
        if (_group != null) {
            this._eb.addEntryAttribute(_group.getAttributeFirstStringValue("dn"), "member", _user.getAttributeFirstStringValue("dn"));
        }
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,1067601.java,620,629
selected,807009.java,306,310
----------------------------------------
    public Object getParentNode(Object contextNode) throws UnsupportedAxisException {
        if (contextNode == null || contextNode instanceof OMDocument) {
            return null;
        } else if (contextNode instanceof OMAttributeEx) {
            return ((OMAttributeEx) contextNode).getParent();
        } else if (contextNode instanceof OMNamespaceEx) {
            return ((OMNamespaceEx) contextNode).getParent();
        }
        return ((OMNode) contextNode).getParent();
    }
----------------------------------------
    private JFrame getFrame(Component pane) {
        JFrame rr = null;
        if (pane instanceof JFrame) rr = (JFrame) pane; else if (pane.getParent() == null) rr = null; else rr = getFrame(pane.getParent());
        return rr;
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,328735.java,954,957
selected,1710788.java,1087,1094
----------------------------------------
    private String selectTransferSyntax(String[] available, String[] tsuids) {
        for (int i = 0; i < tsuids.length; i++) for (int j = 0; j < available.length; j++) if (available[j].equals(tsuids[i])) return available[j];
        return null;
    }
----------------------------------------
        public static void copyMatrix(double[][] in, double[][] out) {
            if (in == out) return;
            for (int rowI = 0; rowI < 4; rowI++) {
                for (int colI = 0; colI < 4; colI++) {
                    out[rowI][colI] = in[rowI][colI];
                }
            }
        }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,2512690.java,20,33
selected,1335976.java,54,61
----------------------------------------
    public static byte[] getBytesFromStream(InputStream is) throws IOException {
        ByteArrayOutputStream baos = new ByteArrayOutputStream();
        byte[] buffer = new byte[1024];
        boolean reading = true;
        while (reading) {
            int read = is.read(buffer);
            if (read == -1) {
                reading = false;
            } else {
                baos.write(buffer, 0, read);
            }
        }
        return baos.toByteArray();
    }
----------------------------------------
    public void write(OutputStream out) throws IOException {
        InputStream in = getInputStream();
        byte buffer[] = new byte[4096];
        int n_read;
        while ((n_read = in.read(buffer)) != -1) {
            out.write(buffer, 0, n_read);
        }
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,1154549.java,146,160
selected,1820884.java,48,58
----------------------------------------
    public static String hash(String clear) throws Exception {
        MessageDigest md = MessageDigest.getInstance("MD5");
        byte[] b = md.digest(clear.getBytes());
        int size = b.length;
        StringBuffer h = new StringBuffer(size);
        for (int i = 0; i < size; i++) {
            int u = b[i] & 255;
            if (u < 16) {
                h.append("0" + Integer.toHexString(u));
            } else {
                h.append(Integer.toHexString(u));
            }
        }
        return h.toString();
    }
----------------------------------------
    public static String encryptar(String textoOriginal) throws Exception {
        MessageDigest md = MessageDigest.getInstance("MD5");
        byte[] b = md.digest(textoOriginal.getBytes());
        StringBuffer cadenaEncryp = new StringBuffer();
        for (int i = 0; i < b.length; i++) {
            cadenaEncryp.append(Integer.toHexString((b[i] & 0xFF)));
        }
        String textoCifrado = cadenaEncryp.toString();
        System.out.println("Texto Original: " + textoOriginal + "\nTexto Cifrado: " + textoCifrado);
        return textoCifrado;
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,179781.java,647,664
selected,330378.java,648,665
----------------------------------------
    public void test_18_101_writeObject() {
        Object objToSave = null;
        Object objLoaded;
        try {
            Object col = Collections.synchronizedSet(SET);
            objToSave = col;
            if (DEBUG) System.out.println("Obj = " + objToSave);
            objLoaded = dumpAndReload(objToSave);
            assertTrue(MSG_TEST_FAILED + objToSave, col.equals(objLoaded));
        } catch (IOException e) {
            fail("IOException serializing " + objToSave + " : " + e.getMessage());
        } catch (ClassNotFoundException e) {
            fail("ClassNotFoundException reading Object type : " + e.getMessage());
        } catch (Error err) {
            System.out.println("Error when obj = " + objToSave);
            throw err;
        }
    }
----------------------------------------
    @TestTargetNew(level = TestLevel.COMPLETE, notes = "Verifies serialization.", method = "!Serialization", args = {  })
    public void test_18_100_writeObject() {
        Object objToSave = null;
        Object objLoaded;
        try {
            objToSave = SET;
            if (DEBUG) System.out.println("Obj = " + objToSave);
            objLoaded = dumpAndReload(objToSave);
            assertTrue(MSG_TEST_FAILED + objToSave, SET.equals(objLoaded));
        } catch (IOException e) {
            fail("IOException serializing " + objToSave + " : " + e.getMessage());
        } catch (ClassNotFoundException e) {
            fail("ClassNotFoundException reading Object type : " + e.getMessage());
        } catch (Error err) {
            System.out.println("Error when obj = " + objToSave);
            throw err;
        }
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,2520773.java,467,476
selected,2604410.java,558,566
----------------------------------------
    private float[][] copyfloatArray(float[][] nums) {
        float[][] copy = new float[nums.length][];
        for (int i = 0; i < nums.length; i++) {
            copy[i] = new float[nums[i].length];
            for (int j = 0; j < nums[i].length; j++) {
                copy[i][j] = nums[i][j];
            }
        }
        return copy;
    }
----------------------------------------
    public static double[][] mul(final double[][] m, final double p) {
        final double[][] s = new double[m.length][m[0].length];
        for (int i = 0; i < m.length; i++) {
            for (int j = 0; j < m[i].length; j++) {
                s[i][j] = p * m[i][j];
            }
        }
        return s;
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
default,23409.java,705,713
default,74245.java,496,500
----------------------------------------
    private static void exit(String prompt, boolean error) {
        if (prompt != null) {
            System.err.println(prompt);
        }
        if (error) {
            System.err.println(messages.getString("try"));
        }
        System.exit(1);
    }
----------------------------------------
    private static void exit(String prompt, boolean error) {
        if (prompt != null) System.err.println(prompt);
        if (error) System.err.println(messages.getString("try"));
        System.exit(1);
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,2406893.java,186,198
selected,1618133.java,107,119
----------------------------------------
    public static void copyStream(InputStream _in, OutputStream _out, byte[] _buffer) throws IOException {
        int read = 0;
        byte[] buf = _buffer == null ? new byte[32768] : _buffer;
        final int bufSize = buf.length;
        while ((read = _in.read(buf, 0, bufSize)) >= 0) {
            if (read == 0) {
                Thread.yield();
            } else {
                _out.write(buf, 0, read);
            }
        }
        _out.flush();
    }
----------------------------------------
    public void SaveFileFromInputStream(InputStream stream, String path, String filename) throws IOException {
        FileOutputStream fs = new FileOutputStream(path + "/" + filename);
        byte[] buffer = new byte[1024 * 1024];
        int bytesum = 0;
        int byteread = 0;
        while ((byteread = stream.read(buffer)) != -1) {
            bytesum += byteread;
            fs.write(buffer, 0, byteread);
            fs.flush();
        }
        fs.close();
        stream.close();
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,2145877.java,269,278
selected,1097722.java,49,53
----------------------------------------
    public static int transfer(InputStream in, OutputStream out) throws IOException {
        int totalChars = 0;
        byte[] buffer = new byte[16384];
        int charsRead;
        while ((charsRead = in.read(buffer, 0, buffer.length)) != -1) {
            out.write(buffer, 0, charsRead);
            totalChars += charsRead;
        }
        return totalChars;
    }
----------------------------------------
    private void process(InputStream is, OutputStream os) throws IOException {
        byte[] buffer = new byte[sChunk];
        int length;
        while ((length = is.read(buffer, 0, sChunk)) != -1) os.write(buffer, 0, length);
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,2070379.java,466,478
selected,1498872.java,180,192
----------------------------------------
    public static long copy(InputStream in, OutputStream out) throws IOException {
        long written = 0;
        byte[] buffer = new byte[4096];
        while (true) {
            int len = in.read(buffer);
            if (len < 0) {
                break;
            }
            out.write(buffer, 0, len);
            written += len;
        }
        return written;
    }
----------------------------------------
    private static void pipe(InputStream in, OutputStream out) throws IOException {
        byte[] buf = new byte[500000];
        int nread;
        int total = 0;
        synchronized (in) {
            while ((nread = in.read(buf, 0, buf.length)) >= 0) {
                out.write(buf, 0, nread);
                total += nread;
            }
        }
        out.flush();
        buf = null;
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,2469117.java,383,390
selected,209084.java,59,66
----------------------------------------
    private void encodeSegment(String string, StringBuffer buf) {
        int len = string.length();
        for (int i = 0; i < len; i++) {
            char c = string.charAt(i);
            buf.append(c);
            if (c == DEVICE_SEPARATOR) buf.append(DEVICE_SEPARATOR);
        }
    }
----------------------------------------
    private static void fix(String name, StringBuffer fixedbuf) {
        for (int i = 0; i < name.length(); i++) {
            char c = Character.toLowerCase(name.charAt(i));
            if ((c >= 'a' && c <= 'z') || (c >= '0' && c <= '9')) {
                fixedbuf.append(c);
            }
        }
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,727865.java,203,210
default,56904.java,54,62
----------------------------------------
    protected String join(String[] words, char sep) {
        StringBuffer sb = new StringBuffer();
        for (int i = 0; i < words.length; i++) {
            if (i > 0) sb.append(sep);
            sb.append(words[i]);
        }
        return sb.toString();
    }
----------------------------------------
    String sequenceUsingDo(int start, int stop) {
        StringBuilder builder = new StringBuilder();
        int i = start;
        do {
            if (i > start) builder.append(',');
            builder.append(i);
        } while (++i <= stop);
        return builder.toString();
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,2086142.java,170,179
selected,2631267.java,75,85
----------------------------------------
    public static void wtf_ru(String str, String furl, String enc) {
        try {
            FileOutputStream fos = new FileOutputStream(furl);
            Writer out = new OutputStreamWriter(fos, enc);
            out.write(str);
            out.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
----------------------------------------
    protected String convertModel2String(Model model) {
        String modelStr = "";
        try {
            ByteArrayOutputStream baos = new ByteArrayOutputStream();
            model.write(baos, "N-TRIPLE");
            modelStr = baos.toString("UTF-8");
        } catch (UnsupportedEncodingException e) {
            e.printStackTrace();
        }
        return modelStr;
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,1819481.java,147,165
selected,2571726.java,26,36
----------------------------------------
    protected static String convertStreamToString(InputStream is) {
        BufferedReader reader = new BufferedReader(new InputStreamReader(is));
        StringBuilder sb = new StringBuilder();
        String line = null;
        try {
            while ((line = reader.readLine()) != null) {
                sb.append(line + "\n");
            }
        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            try {
                is.close();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
        return sb.toString();
    }
----------------------------------------
    public static String getStringResponse(String urlString) throws Exception {
        URL url = new URL(urlString);
        BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));
        String inputLine;
        StringBuilder buffer = new StringBuilder();
        while ((inputLine = in.readLine()) != null) {
            buffer.append(inputLine);
        }
        in.close();
        return buffer.toString();
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,748016.java,141,155
default,137268.java,9,24
----------------------------------------
    private String load(URL url) {
        BufferedReader r = null;
        try {
            r = new BufferedReader(new InputStreamReader(url.openStream()));
            StringBuffer buf = new StringBuffer();
            while (r.ready()) {
                buf.append(r.readLine()).append('\n');
            }
            r.close();
            return buf.toString();
        } catch (IOException e) {
            e.printStackTrace();
            return null;
        }
    }
----------------------------------------
    private static String getDocumentAt(String urlString) {
        StringBuffer html_text = new StringBuffer();
        try {
            URL url = new URL(urlString);
            URLConnection conn = url.openConnection();
            BufferedReader reader = new BufferedReader(new InputStreamReader(conn.getInputStream()));
            String line = null;
            while ((line = reader.readLine()) != null) html_text.append(line + "\n");
            reader.close();
        } catch (MalformedURLException e) {
            System.out.println("��Ч��URL: " + urlString);
        } catch (IOException e) {
            e.printStackTrace();
        }
        return html_text.toString();
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,258989.java,13,30
selected,2353926.java,17,34
----------------------------------------
    public static void main(String[] args) {
        EntityManagerFactory entityManagerFactory = Persistence.createEntityManagerFactory("default");
        try {
            System.out.println("*** insert ***");
            insert(entityManagerFactory);
            System.out.println("*** query ***");
            query(entityManagerFactory);
            System.out.println("*** update ***");
            update(entityManagerFactory);
            System.out.println("*** query ***");
            query(entityManagerFactory);
            System.out.println("*** delete ***");
            delete(entityManagerFactory);
        } finally {
            entityManagerFactory.close();
            System.out.println("*** finished ***");
        }
    }
----------------------------------------
    public static void main(String[] args) {
        EntityManagerFactory entityManagerFactory = Persistence.createEntityManagerFactory("default");
        try {
            System.out.println("*** insert ***");
            insert(entityManagerFactory);
            System.out.println("*** query ***");
            query(entityManagerFactory);
            System.out.println("*** update and query with jpa ***");
            updateandquerywithjpa(entityManagerFactory);
            System.out.println("*** update and query with native criteria api ***");
            updateandquerywithcriteria(entityManagerFactory);
            System.out.println("*** delete ***");
            delete(entityManagerFactory);
        } finally {
            entityManagerFactory.close();
            System.out.println("*** finished ***");
        }
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,2711868.java,88,98
selected,203831.java,192,206
----------------------------------------
    public static Document getDocument(InputSource source) throws IOException, SAXException {
        try {
            DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
            factory.setValidating(false);
            factory.setFeature("http://xml.org/sax/features/namespaces", false);
            factory.setFeature("http://xml.org/sax/features/validation", false);
            return factory.newDocumentBuilder().parse(source);
        } catch (ParserConfigurationException e) {
            throw new RuntimeException(e);
        }
    }
----------------------------------------
    public static Document parseXML(InputStream is) {
        Document ret = null;
        DocumentBuilderFactory domFactory;
        DocumentBuilder builder;
        try {
            domFactory = DocumentBuilderFactory.newInstance();
            domFactory.setValidating(false);
            domFactory.setNamespaceAware(false);
            builder = domFactory.newDocumentBuilder();
            ret = builder.parse(is);
        } catch (Exception ex) {
            Util.log("unable to load XML: " + ex, 3);
        }
        return ret;
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,2657030.java,291,309
selected,1984467.java,62,79
----------------------------------------
    private static String convertStreamToString(InputStream is) {
        BufferedReader reader = new BufferedReader(new InputStreamReader(is));
        StringBuilder sb = new StringBuilder();
        String line = null;
        try {
            while ((line = reader.readLine()) != null) {
                sb.append(line + "\n");
            }
        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            try {
                is.close();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
        return sb.toString();
    }
----------------------------------------
    public static String loadString(String filename, String encoding) throws EDITSException {
        try {
            checkInput(filename);
            BufferedReader in = new BufferedReader(new InputStreamReader(new FileInputStream(filename), encoding));
            String line = null;
            StringBuilder vud = new StringBuilder();
            while ((line = in.readLine()) != null) {
                vud.append(line + "\n");
            }
            in.close();
            return vud.toString();
        } catch (UnsupportedEncodingException e) {
            e.printStackTrace();
            throw new EDITSException("The file " + filename + " is not in the correct format!");
        } catch (IOException e) {
            throw new EDITSException("The file " + filename + " is not in the correct format!");
        }
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,2279984.java,111,118
default,93613.java,126,130
----------------------------------------
    private static void pipe(Reader reader, Writer writer) throws IOException {
        char[] buf = new char[1024];
        int read = 0;
        while ((read = reader.read(buf)) >= 0) {
            writer.write(buf, 0, read);
        }
        writer.flush();
    }
----------------------------------------
    private static void copy(InputStream in, OutputStream out) throws IOException {
        byte[] buf = new byte[BUFFER_SIZE];
        int read;
        while ((read = in.read(buf, 0, BUFFER_SIZE)) != -1) out.write(buf, 0, read);
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,1632131.java,207,213
selected,1923493.java,1022,1028
----------------------------------------
    public static float[] pow(float[] a, float c) {
        float[] result = new float[a.length];
        for (int i = 0; i < a.length; i++) {
            result[i] = (float) Math.pow(a[i], c);
        }
        return result;
    }
----------------------------------------
    private static double npv(double rate, double[] values) {
        double[] npv = new double[values.length];
        for (int i = 0; i < values.length; i++) {
            npv[i] = values[i] / Math.pow((1 + rate), i + 1);
        }
        return UtilFns.getStats(npv).getSum();
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,1632131.java,454,462
selected,2587973.java,670,677
----------------------------------------
    public static int sum(int[][] a) {
        int result = 0;
        for (int i = 0; i < a.length; i++) {
            for (int j = 0; j < a[i].length; j++) {
                result += a[i][j];
            }
        }
        return result;
    }
----------------------------------------
    public Matrix timesEquals(double s) {
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                A[i][j] = s * A[i][j];
            }
        }
        return this;
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,2432188.java,351,362
selected,1177352.java,110,119
----------------------------------------
    private byte[] readFiletoBuffer(String file) throws IOException {
        ByteArrayOutputStream os = new ByteArrayOutputStream();
        InputStream in = new FileInputStream(file);
        int len = 0;
        byte[] buf = new byte[1024];
        while ((len = in.read(buf)) > 0) {
            os.write(buf, 0, len);
        }
        in.close();
        os.close();
        return os.toByteArray();
    }
----------------------------------------
    public static final byte[] readFile(String fileName) throws IOException {
        ByteArrayOutputStream buffer = new ByteArrayOutputStream(1024);
        FileInputStream origFile = new FileInputStream(fileName);
        byte[] data = new byte[128];
        int read;
        while ((read = origFile.read(data)) > 0) {
            buffer.write(data, 0, read);
        }
        return buffer.toByteArray();
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,790184.java,22,29
selected,2440545.java,26,31
----------------------------------------
    public static String MD5(String text) throws NoSuchAlgorithmException, UnsupportedEncodingException {
        MessageDigest md;
        md = MessageDigest.getInstance("MD5");
        byte[] md5hash = new byte[32];
        md.update(text.getBytes("UTF-8"), 0, text.length());
        md5hash = md.digest();
        return convertToHex(md5hash);
    }
----------------------------------------
    public synchronized String encrypt(final String pPassword) throws NoSuchAlgorithmException, UnsupportedEncodingException {
        final MessageDigest md = MessageDigest.getInstance("SHA");
        md.update(pPassword.getBytes("UTF-8"));
        final byte raw[] = md.digest();
        return BASE64Encoder.encodeBuffer(raw);
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,2065862.java,88,94
default,73789.java,142,148
----------------------------------------
    public static final char[] toUpperCase(final char[] word) {
        char[] out = new char[word.length];
        for (int ii = 0; ii < word.length; ii++) {
            out[ii] = Character.toUpperCase(word[ii]);
        }
        return out;
    }
----------------------------------------
    private static int[] toTags(String[] tagStr) {
        int[] tags = new int[tagStr.length];
        for (int i = 0; i < tags.length; i++) {
            tags[i] = toTag(tagStr[i]);
        }
        return tags;
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,671286.java,160,173
selected,1307654.java,554,568
----------------------------------------
    private byte[] readBytes(InputStream in) throws Exception {
        ByteArrayOutputStream out = new ByteArrayOutputStream();
        try {
            byte[] buf = new byte[1024];
            int len;
            while ((len = in.read(buf)) > 0) {
                out.write(buf, 0, len);
            }
        } finally {
            in.close();
            out.close();
        }
        return out.toByteArray();
    }
----------------------------------------
    public static final byte[] readBinaryFile(File inFile) {
        try {
            ByteArrayOutputStream outValue = new ByteArrayOutputStream();
            byte buffer[] = new byte[16 * 1024];
            FileInputStream fis = new FileInputStream(inFile);
            int size = 0;
            while ((size = fis.read(buffer)) != -1) {
                outValue.write(buffer, 0, size);
            }
            fis.close();
            return outValue.toByteArray();
        } catch (IOException ioe) {
            throw new PFRuntimeException(ioe);
        }
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,2024971.java,181,190
selected,1406991.java,679,689
----------------------------------------
    public static void wtf_rut(String str, String furl) {
        try {
            FileOutputStream fos = new FileOutputStream(furl, true);
            Writer out = new OutputStreamWriter(fos, "CP1251");
            out.write(str + "\r\n");
            out.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
----------------------------------------
    public static final File writeToFile(byte[] data, String fileTo) {
        try {
            File file = new File(fileTo);
            OutputStream os = makeFile(file);
            os.write(data);
            os.close();
            return file;
        } catch (Exception e) {
        }
        return null;
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,781132.java,40,49
selected,142651.java,88,97
----------------------------------------
    public static byte[] decompress(byte[] data, int compressionType) throws IOException {
        byte[] tmp = new byte[1024];
        int read;
        GZipInputStream zipInputStream = new GZipInputStream(new ByteArrayInputStream(data), 1024, compressionType, true);
        ByteArrayOutputStream bout = new ByteArrayOutputStream(1024);
        while ((read = zipInputStream.read(tmp, 0, 1024)) > 0) {
            bout.write(tmp, 0, read);
        }
        return bout.toByteArray();
    }
----------------------------------------
    public static long copyStream(InputStream is, OutputStream os) throws IOException {
        byte[] buf = new byte[1024];
        int len;
        long size = 0;
        while ((len = is.read(buf)) > 0) {
            os.write(buf, 0, len);
            size += len;
        }
        return size;
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,1476411.java,279,284
selected,913468.java,96,101
----------------------------------------
    public static byte[] mergeByteArrays(byte[] b1, byte[] b2) {
        byte[] result = new byte[b1.length + b2.length];
        System.arraycopy(b1, 0, result, 0, b1.length);
        System.arraycopy(b2, 0, result, b1.length, b2.length);
        return result;
    }
----------------------------------------
    private static final double[] arrayInsert(double[] array, int position, int length) {
        final double[] tmp = new double[array.length + length];
        System.arraycopy(array, 0, tmp, 0, position);
        System.arraycopy(array, position, tmp, position + length, array.length - position);
        return tmp;
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,1006345.java,315,335
selected,2680234.java,719,737
----------------------------------------
    @SuppressWarnings("unchecked")
    ArrayList new7() {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PPattern ppatternNode1;
        {
            TPathPattern tpathpatternNode2;
            TPathPattern tpathpatternNode3;
            LinkedList listNode4 = new LinkedList();
            tpathpatternNode2 = (TPathPattern) nodeArrayList1.get(0);
            tpathpatternNode3 = (TPathPattern) nodeArrayList2.get(0);
            {
            }
            ppatternNode1 = new AMethodPattern(tpathpatternNode2, tpathpatternNode3, listNode4);
        }
        nodeList.add(ppatternNode1);
        return nodeList;
    }
----------------------------------------
    @SuppressWarnings("unchecked")
    ArrayList new16() {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PSingleValue psinglevalueNode1;
        {
            TY tyNode2;
            TMinus tminusNode3;
            TFloatingPointLiteral tfloatingpointliteralNode4;
            tyNode2 = (TY) nodeArrayList1.get(0);
            tminusNode3 = (TMinus) nodeArrayList2.get(0);
            tfloatingpointliteralNode4 = (TFloatingPointLiteral) nodeArrayList3.get(0);
            psinglevalueNode1 = new AYFloatingPointValueSingleValue(tyNode2, tminusNode3, tfloatingpointliteralNode4);
        }
        nodeList.add(psinglevalueNode1);
        return nodeList;
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,161563.java,125,134
default,59570.java,93,97
----------------------------------------
    public static int indexOfFirstLetter(String string) {
        int index = 0;
        for (int i = 0; i < string.length(); i++) {
            if (isLetter(string.charAt(i))) {
                index = i;
                break;
            }
        }
        return index;
    }
----------------------------------------
    public String endTrim(String source) {
        int i = source.length();
        while (--i >= 0) if (source.charAt(i) != ' ') break;
        return source.substring(0, i + 1);
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,1800232.java,74,88
selected,2134731.java,18,35
----------------------------------------
    public static String hash(String text) throws Exception {
        StringBuffer hexString;
        MessageDigest mdAlgorithm = MessageDigest.getInstance("MD5");
        mdAlgorithm.update(text.getBytes());
        byte[] digest = mdAlgorithm.digest();
        hexString = new StringBuffer();
        for (int i = 0; i < digest.length; i++) {
            text = Integer.toHexString(0xFF & digest[i]);
            if (text.length() < 2) {
                text = "0" + text;
            }
            hexString.append(text);
        }
        return hexString.toString();
    }
----------------------------------------
    public static String getEncryptedPassword(String strPasswordToBeEncrypted) {
        System.out.println(strPasswordToBeEncrypted);
        byte[] defaultBytes = strPasswordToBeEncrypted.getBytes();
        try {
            MessageDigest algorithm = MessageDigest.getInstance("MD5");
            algorithm.reset();
            algorithm.update(defaultBytes);
            byte messageDigest[] = algorithm.digest();
            StringBuffer hexString = new StringBuffer();
            for (int iCounter = 0; iCounter < messageDigest.length; iCounter++) {
                hexString.append(Integer.toHexString(0xFF & messageDigest[iCounter]));
            }
            System.out.println(hexString.toString());
            return hexString.toString();
        } catch (NoSuchAlgorithmException nsae) {
            throw new GenericException(nsae);
        }
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,2284904.java,107,117
selected,1697583.java,477,485
----------------------------------------
    public static void removeDir(File dir) throws IOException {
        File[] files = dir.listFiles();
        for (int i = 0; i < files.length; i++) {
            if (files[i].isDirectory()) {
                FileUtil.removeDir(files[i]);
            } else {
                files[i].delete();
            }
        }
        dir.delete();
    }
----------------------------------------
    void deleteEmptyDirectories(File rootDir) {
        File[] dirs = rootDir.listFiles(DirectoriesOnlyFileFilter.DIRECTORIES_ONLY);
        for (int i = 0; i < dirs.length; i++) {
            deleteEmptyDirectories(dirs[i]);
            if (dirs[i].list().length == 0) {
                dirs[i].delete();
            }
        }
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,2696114.java,260,272
selected,2701118.java,755,774
----------------------------------------
    public static String merge(String array[], String delimiter) {
        if (array == null) {
            return null;
        }
        StringBuffer sb = new StringBuffer();
        for (int i = 0; i < array.length; i++) {
            sb.append(array[i].trim());
            if ((i + 1) != array.length) {
                sb.append(delimiter);
            }
        }
        return sb.toString();
    }
----------------------------------------
    public static String nullSafeToString(short[] array) {
        if (array == null) {
            return NULL_STRING;
        }
        int length = array.length;
        if (length == 0) {
            return EMPTY_ARRAY;
        }
        StringBuffer buffer = new StringBuffer();
        for (int i = 0; i < length; i++) {
            if (i == 0) {
                buffer.append(ARRAY_START);
            } else {
                buffer.append(ARRAY_ELEMENT_SEPARATOR);
            }
            buffer.append(array[i]);
        }
        buffer.append(ARRAY_END);
        return buffer.toString();
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,2696114.java,516,529
default,20914.java,454,458
----------------------------------------
    public static boolean startsWith(String s, String start) {
        if ((s == null) || (start == null)) {
            return false;
        }
        if (start.length() > s.length()) {
            return false;
        }
        String temp = s.substring(0, start.length());
        if (temp.equalsIgnoreCase(start)) {
            return true;
        } else {
            return false;
        }
    }
----------------------------------------
        private boolean pathStartsWith(String path, String prefix) {
            if (path == null || prefix == null) return false;
            if (path.length() < prefix.length()) return false;
            return pathEqual(path.substring(0, prefix.length()), prefix);
        }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,1726265.java,534,546
selected,2739493.java,9,19
----------------------------------------
    public NodeId generateTopicId(String topicName) {
        MessageDigest md = null;
        try {
            md = MessageDigest.getInstance("SHA");
        } catch (NoSuchAlgorithmException e) {
            System.err.println("No SHA support!");
        }
        if (m_ready) System.out.println("Scribe is ready at" + getNodeId() + " , topic is " + topicName);
        md.update(topicName.getBytes());
        byte[] digest = md.digest();
        NodeId newId = new NodeId(digest);
        return newId;
    }
----------------------------------------
    public static String getHashedPassword(String password) {
        try {
            MessageDigest digest = MessageDigest.getInstance("MD5");
            digest.update(password.getBytes());
            BigInteger hashedInt = new BigInteger(1, digest.digest());
            return String.format("%1$032X", hashedInt);
        } catch (NoSuchAlgorithmException nsae) {
            System.err.println(nsae.getMessage());
        }
        return "";
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,2660901.java,275,288
selected,1333472.java,65,77
----------------------------------------
    public static boolean removeDirectory(File aDirectoryToBeRemoved) {
        File[] allFiles = aDirectoryToBeRemoved.listFiles();
        boolean checkFlag = true;
        if (null != allFiles) {
            for (File file : allFiles) {
                if (file.isDirectory()) {
                    checkFlag &= removeDirectory(file);
                } else {
                    checkFlag &= file.delete();
                }
            }
        }
        return checkFlag & aDirectoryToBeRemoved.delete();
    }
----------------------------------------
    public static boolean deleteFileOrDirectory(File src) {
        if (src == null) {
            return true;
        }
        boolean result = true;
        if (src.isDirectory()) {
            for (File subFile : src.listFiles()) {
                result &= deleteFileOrDirectory(subFile);
            }
        }
        result &= src.delete();
        return result;
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,2409270.java,697,701
selected,2124925.java,955,961
----------------------------------------
        public double[] abs(double v[]) {
            double res[] = new double[v.length];
            for (int i = 0; i < v.length; ++i) res[i] = Math.abs(v[i]);
            return res;
        }
----------------------------------------
    public static double[] bigDecimalArrayToDoubleArray(BigDecimal[] bigDecimalArray) {
        double[] doubleArray = new double[bigDecimalArray.length];
        for (int i = 0; i < bigDecimalArray.length; i++) {
            doubleArray[i] = bigDecimalArray[i].doubleValue();
        }
        return doubleArray;
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,1899190.java,165,171
default,43916.java,521,525
----------------------------------------
    public static String getUpdatedStr(String original, String code) {
        if (code.length() > original.length()) {
            return code;
        } else {
            return original.substring(0, original.length() - code.length()) + code;
        }
    }
----------------------------------------
        private boolean pathStartsWith(String path, String prefix) {
            if (path == null || prefix == null) return false;
            if (path.length() < prefix.length()) return false;
            return pathEqual(path.substring(0, prefix.length()), prefix);
        }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,570652.java,99,122
selected,1209779.java,68,97
----------------------------------------
    public static String readStream(InputStream inStream) {
        if (inStream != null) {
            ByteArrayOutputStream out = new ByteArrayOutputStream();
            byte[] buffer = new byte[1024];
            int len = -1;
            try {
                while ((len = inStream.read(buffer)) != -1) {
                    out.write(buffer, 0, len);
                }
                return new String(out.toByteArray(), "utf-8");
            } catch (IOException e) {
                e.printStackTrace();
            } finally {
                if (out != null) {
                    try {
                        out.close();
                    } catch (IOException e) {
                        e.printStackTrace();
                    }
                }
            }
        }
        return null;
    }
----------------------------------------
    public static void copy(File source, File target) {
        FileInputStream fis = null;
        FileOutputStream fos = null;
        try {
            fis = new FileInputStream(source);
            fos = new FileOutputStream(target);
            byte[] buf = new byte[1024];
            int i = 0;
            while ((i = fis.read(buf)) != -1) {
                fos.write(buf, 0, i);
            }
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            try {
                if (fis != null) {
                    fis.close();
                }
            } catch (Exception e) {
            }
            try {
                if (fos != null) {
                    fos.close();
                }
            } catch (Exception e) {
            }
        }
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,904175.java,131,140
selected,904175.java,121,129
----------------------------------------
    public final void testRescanOfForeignNode() throws Exception {
        m_db.getJdbcTemplate().update("update node set foreignSource='testSource', foreignId='123' where nodeid = ?", FOREIGN_NODEID);
        assertEquals("Initally only 1 interface", 1, m_db.countRows("select * from ipinterface where nodeid = ?", FOREIGN_NODEID));
        m_capsd.init();
        m_capsd.start();
        m_capsd.rescanInterfaceParent(77);
        Thread.sleep(10000);
        m_capsd.stop();
        assertEquals("after scanning should still be 1 since its foreign", 1, m_db.countRows("select * from ipinterface where nodeid = ?", FOREIGN_NODEID));
    }
----------------------------------------
    public final void testRescan() throws Exception {
        assertEquals("Initally only 1 interface", 1, m_db.countRows("select * from ipinterface where nodeid = ?", FOREIGN_NODEID));
        m_capsd.init();
        m_capsd.start();
        m_capsd.rescanInterfaceParent(77);
        Thread.sleep(10000);
        m_capsd.stop();
        assertEquals("after scanning should be 2 interfaces", 2, m_db.countRows("select * from ipinterface where nodeid = ?", FOREIGN_NODEID));
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,526365.java,635,645
selected,448380.java,765,773
----------------------------------------
    public Matrix plus(Matrix B) {
        checkMatrixDimensions(B);
        Matrix X = new Matrix(m, n);
        double[][] C = X.getArray();
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                C[i][j] = A[i][j] + B.A[i][j];
            }
        }
        return X;
    }
----------------------------------------
    public Matrix arrayLeftDivideEquals(Matrix B) {
        checkMatrixDimensions(B);
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                A[i][j] = B.A[i][j] / A[i][j];
            }
        }
        return this;
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,1039768.java,47,63
selected,1677830.java,291,309
----------------------------------------
    @SuppressWarnings("unchecked")
    public List<Smilies> getIcons() {
        Transaction tr = null;
        try {
            Session session = HibernateUtil.getSessionFactory().getCurrentSession();
            tr = session.beginTransaction();
            Query query = session.createQuery("from Smilies as s where s.typeid = 0 and s.type='icon' order by s.displayorder");
            List<Smilies> list = query.list();
            tr.commit();
            return list;
        } catch (HibernateException he) {
            if (tr != null) tr.rollback();
            tr = null;
            he.printStackTrace();
        }
        return null;
    }
----------------------------------------
    public Integer findForumsCountWithoutGroup() {
        Transaction tr = null;
        try {
            Session session = HibernateUtil.getSessionFactory().getCurrentSession();
            tr = session.beginTransaction();
            Query query = session.createQuery("select count(*) from Forums as f where f.status=1 AND f.type<>'group'");
            List list = query.list();
            tr.commit();
            if (list != null && list.size() > 0) {
                return Integer.valueOf(list.get(0) + "");
            }
        } catch (HibernateException e) {
            if (tr != null) {
                tr.rollback();
            }
            e.printStackTrace();
        }
        return 0;
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,1039768.java,202,222
selected,155563.java,32,46
----------------------------------------
    public boolean findSmiliesbytypeid(short typeid, String url) {
        Transaction tr = null;
        try {
            Session session = HibernateUtil.getSessionFactory().getCurrentSession();
            tr = session.beginTransaction();
            Query query = session.createQuery("from Smilies as s where s.type='smiley' and s.typeid=? and url = ?");
            query.setParameter(0, typeid);
            query.setParameter(1, url);
            List list = query.list();
            tr.commit();
            if (list != null && list.size() > 0) {
                return true;
            }
        } catch (HibernateException he) {
            if (tr != null) {
                tr.rollback();
            }
            he.printStackTrace();
        }
        return false;
    }
----------------------------------------
    public AcUserRelation getUserRelation(Integer userId, Integer bossId) throws Exception {
        Transaction tx = null;
        try {
            tx = getSession().beginTransaction();
            String queryString = "from " + AcUserRelation.class.getName() + " where acUserByStaffId.id = '" + userId + "' and acUserByBossId.id = '" + bossId + "'";
            Query queryObject = getSession().createQuery(queryString);
            List<AcUserRelation> rtn = queryObject.list();
            tx.commit();
            return rtn.size() <= 0 ? null : rtn.get(0);
        } catch (Exception e) {
            tx.rollback();
            e.printStackTrace();
            throw e;
        }
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,691395.java,223,233
selected,1067892.java,64,70
----------------------------------------
    public void toFile(InputStream resourceAsStream, File file) throws IOException {
        log.debug("toFile");
        OutputStream os = new FileOutputStream(file);
        byte[] buf = new byte[1024];
        int len;
        while ((len = resourceAsStream.read(buf)) > 0) {
            os.write(buf, 0, len);
        }
        os.close();
        resourceAsStream.close();
    }
----------------------------------------
    public static void copyCharacterStream(Reader in, Writer out) throws IOException {
        char[] buffer = new char[BUFFER_SIZE];
        for (int count; (count = in.read(buffer)) > 0; ) {
            out.write(buffer, 0, count);
        }
        in.close();
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,1170505.java,643,647
selected,2315461.java,103,108
----------------------------------------
    public boolean exaktq() {
        boolean exakt = true;
        for (int i = 0; i < a.length; i++) for (int k = 0; k < a[0].length; k++) exakt = exakt && a[i][k].exaktq();
        return exakt;
    }
----------------------------------------
    public void reset() {
        for (int i = 0; i < systemConstants.length; i++) {
            systemConstants[i] = 0;
            for (int j = 0; j < systemConstants.length; j++) systemMatrix[i][j] = 0;
        }
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
default,47340.java,54,62
default,45353.java,73,82
----------------------------------------
    String sequenceUsingDo(int start, int stop) {
        StringBuilder builder = new StringBuilder();
        int i = start;
        do {
            if (i > start) builder.append(',');
            builder.append(i);
        } while (++i <= stop);
        return builder.toString();
    }
----------------------------------------
    String sequenceUsingWhile(int start, int stop) {
        StringBuilder builder = new StringBuilder();
        int i = start;
        while (i <= stop) {
            if (i > start) builder.append(',');
            builder.append(i);
            i++;
        }
        return builder.toString();
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,1094311.java,248,262
selected,2378671.java,153,163
----------------------------------------
    public static String getFileContent(final String absoluteAbsolutePath) throws IOException {
        final StringBuilder sb = new StringBuilder();
        BufferedReader reader = null;
        try {
            reader = new BufferedReader(new FileReader(absoluteAbsolutePath));
            String line = reader.readLine();
            while (line != null) {
                sb.append(line).append("\n");
                line = reader.readLine();
            }
        } finally {
            PtCloseUtil.close(reader);
        }
        return sb.toString();
    }
----------------------------------------
    private String toString(InputStream inputStream) throws IOException {
        String string;
        StringBuilder outputBuilder = new StringBuilder();
        if (inputStream != null) {
            BufferedReader reader = new BufferedReader(new InputStreamReader(inputStream));
            while (null != (string = reader.readLine())) {
                outputBuilder.append(string).append('\n');
            }
        }
        return outputBuilder.toString();
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,991957.java,416,420
selected,2510196.java,317,322
----------------------------------------
    public static void writeFile(final File file, final String data) throws IOException {
        if (log.isDebugEnabled()) log.debug(HelperLog.methodStart(file, data));
        writeFile(file, data, Constants.ENCODING_DEFAULT, false);
        if (log.isDebugEnabled()) log.debug(HelperLog.methodExit());
    }
----------------------------------------
    @Override
    public void decrypt(final File input, final File output, final Key key) throws InvalidKeyException, InvalidAlgorithmParameterException, IOException {
        if (log.isDebugEnabled()) log.debug(HelperLog.methodStart(input, output, key));
        decrypt(input, output, key, Constants.DEFAULT_FILE_BUFFER_SIZE);
        if (log.isDebugEnabled()) log.debug(HelperLog.methodExit());
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,736221.java,81,91
selected,2094508.java,243,253
----------------------------------------
    public static String join(Object[] array, String delimeter) {
        StringBuilder sb = new StringBuilder();
        if (array != null && array.length > 0) {
            sb.append(array[0]);
            for (int i = 1; i < array.length; i++) {
                sb.append(delimeter);
                sb.append(array[i]);
            }
        }
        return sb.toString();
    }
----------------------------------------
    public String buildHexaString(byte[] hash) {
        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < hash.length; i++) {
            int v = hash[i] & 0xFF;
            if (v < 16) {
                sb.append("0");
            }
            sb.append(Integer.toString(v, 16).toUpperCase() + " ");
        }
        return sb.toString();
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,1507716.java,479,488
selected,1233182.java,600,611
----------------------------------------
    protected Boolean notifyMail(Integer raciObjId, Integer destUserId, String message) throws Exception {
        Call call = (Call) SoapTestCase.service.createCall();
        call.setTargetEndpointAddress(getEndPoint() + "Raci");
        call.setOperationName("notifyMail");
        call.addParameter("raciObjId", XMLType.XSD_INT, ParameterMode.IN);
        call.addParameter("destUserId", XMLType.XSD_INT, ParameterMode.IN);
        call.addParameter("message", XMLType.XSD_STRING, ParameterMode.IN);
        call.setReturnType(XMLType.XSD_BOOLEAN);
        return (Boolean) call.invoke(new Object[] { raciObjId, destUserId, message });
    }
----------------------------------------
    public boolean can(Integer userId, Integer raciObjectId, String raciOperation) throws Exception {
        Logs.logMethodName();
        Call call = (Call) SoapTestCase.service.createCall();
        call.setTargetEndpointAddress(soapEndPoint + "Raci");
        call.setOperationName("can");
        call.addParameter("userId", XMLType.XSD_INT, ParameterMode.IN);
        call.addParameter("raciObjectId", XMLType.XSD_INT, ParameterMode.IN);
        call.addParameter("raciOperation", XMLType.XSD_STRING, ParameterMode.IN);
        registerTypeMappingForRaciException(call);
        call.setReturnType(XMLType.XSD_BOOLEAN);
        return (Boolean) call.invoke(new Object[] { userId, raciObjectId, raciOperation });
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,684178.java,139,145
selected,1371986.java,196,204
----------------------------------------
    public final void copyInputStream(InputStream in, OutputStream out) throws IOException {
        byte[] buffer = new byte[1024];
        int len;
        while ((len = in.read(buffer)) >= 0) out.write(buffer, 0, len);
        in.close();
        out.close();
    }
----------------------------------------
    static void copyFile(File file, File file1) throws IOException {
        byte abyte0[] = new byte[512];
        FileInputStream fileinputstream = new FileInputStream(file);
        FileOutputStream fileoutputstream = new FileOutputStream(file1);
        int i;
        while ((i = fileinputstream.read(abyte0)) > 0) fileoutputstream.write(abyte0, 0, i);
        fileinputstream.close();
        fileoutputstream.close();
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,1809479.java,63,83
selected,2126237.java,1418,1427
----------------------------------------
    @Override
    public void closeFile() {
        if (bfileChannelIn != null) {
            try {
                bfileChannelIn.close();
            } catch (IOException e) {
            }
            bfileChannelIn = null;
            bbyteBuffer = null;
        }
        if (fileOutputStream != null) {
            try {
                fileOutputStream.flush();
                fileOutputStream.close();
            } catch (ClosedChannelException e) {
            } catch (IOException e) {
            }
            fileOutputStream = null;
        }
        position = 0;
    }
----------------------------------------
        public void _close() {
            if (is != null) try {
                is.close();
            } catch (IOException e) {
            }
            if (os != null) try {
                os.close();
            } catch (IOException e) {
            }
        }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,2524777.java,33,43
selected,279603.java,40,46
----------------------------------------
    public static void copyFile(File fromFile, File toFile) throws OWFileCopyException {
        try {
            FileChannel src = new FileInputStream(fromFile).getChannel();
            FileChannel dest = new FileOutputStream(toFile).getChannel();
            dest.transferFrom(src, 0, src.size());
            src.close();
            dest.close();
        } catch (IOException e) {
            throw (new OWFileCopyException("An error occurred while copying a file", e));
        }
    }
----------------------------------------
    private void copy(File source, File target) throws IOException {
        FileChannel in = (new FileInputStream(source)).getChannel();
        FileChannel out = (new FileOutputStream(target)).getChannel();
        in.transferTo(0, source.length(), out);
        in.close();
        out.close();
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,779817.java,29,41
selected,1050766.java,1432,1441
----------------------------------------
    public static void returnFile(String filename, OutputStream out) throws IOException {
        FileInputStream fis = null;
        try {
            fis = new FileInputStream(filename);
            byte[] buf = new byte[4 * 1024];
            int bytesRead;
            while ((bytesRead = fis.read(buf)) != -1) {
                out.write(buf, 0, bytesRead);
            }
        } finally {
            if (fis != null) fis.close();
        }
    }
----------------------------------------
    public static void decryptAESStream(InputStream pIn, OutputStream pOut, Key pKey, AlgorithmParameterSpec pParamSpec) throws Exception {
        byte[] lBuffer = new byte[16];
        int numRead = 0;
        while ((numRead = pIn.read(lBuffer)) != -1) {
            pOut.write(decryptBytes(trimBytes(lBuffer, numRead), pKey, "AES/CBC/PKCS5Padding", pParamSpec));
        }
        if (pOut != null) {
            pOut.close();
        }
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,779817.java,29,41
selected,1628578.java,37,46
----------------------------------------
    public static void returnFile(String filename, OutputStream out) throws IOException {
        FileInputStream fis = null;
        try {
            fis = new FileInputStream(filename);
            byte[] buf = new byte[4 * 1024];
            int bytesRead;
            while ((bytesRead = fis.read(buf)) != -1) {
                out.write(buf, 0, bytesRead);
            }
        } finally {
            if (fis != null) fis.close();
        }
    }
----------------------------------------
    public static void copy(InputStream _in, OutputStream _out) throws IOException {
        byte[] buf = new byte[8 * 1024];
        for (; ; ) {
            int read = _in.read(buf);
            if (read == -1) {
                break;
            }
            _out.write(buf, 0, read);
        }
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,1039401.java,417,432
selected,1836262.java,449,467
----------------------------------------
    @Override
    public String toString(List<ProvaVariable> variables) {
        if (this == emptyRList) return "[]";
        StringBuilder sb = new StringBuilder("[");
        final int fixedLength = fixed.length;
        for (int i = 0; i < fixedLength; i++) {
            if (i != 0) sb.append(',');
            sb.append(fixed[i].toString(variables));
        }
        if (tail != null) {
            sb.append('|');
            sb.append(tail.toString(variables));
        }
        sb.append(']');
        return sb.toString();
    }
----------------------------------------
    private PreparedStatement simpleInsert(Connection connection) {
        StringBuffer sql = new StringBuffer();
        sql.append("INSERT INTO " + quotedName() + " (");
        for (int c = 0; c < columns.length; ++c) {
            if (c > 0) sql.append(", ");
            sql.append(columns[c].quotedName());
        }
        sql.append(") VALUES (");
        for (int c = 0; c < columns.length; ++c) {
            if (c > 0) sql.append(", ");
            sql.append("?");
        }
        sql.append(")");
        try {
            return connection.prepareStatement(sql.toString());
        } catch (SQLException e) {
            throw new SimplePrepareFailedPoemException(sql.toString(), e);
        }
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,970915.java,568,577
selected,1033185.java,360,369
----------------------------------------
    public static String toString(double[] array) {
        StringBuffer buf = new StringBuffer(array.length);
        int i;
        for (i = 0; i < array.length - 1; i++) {
            buf.append(array[i]);
            buf.append(',');
        }
        buf.append(array[i]);
        return buf.toString();
    }
----------------------------------------
    private static String toHexString(byte[] bytes) {
        StringBuilder sb = new StringBuilder(bytes.length * 3);
        for (int b : bytes) {
            b &= 0xff;
            sb.append(HEXDIGITS[b >> 4]);
            sb.append(HEXDIGITS[b & 15]);
            sb.append(' ');
        }
        return sb.toString();
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,2676849.java,95,102
default,62476.java,54,62
----------------------------------------
    private String stripNewlinesAndTabs(String str) {
        char[] buf = str.toCharArray();
        StringBuilder sb = new StringBuilder();
        for (char c : buf) {
            if (c != '\t' && c != '\n') sb.append(c);
        }
        return sb.toString();
    }
----------------------------------------
    String sequenceUsingDo(int start, int stop) {
        StringBuilder builder = new StringBuilder();
        int i = start;
        do {
            if (i > start) builder.append(',');
            builder.append(i);
        } while (++i <= stop);
        return builder.toString();
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,1590567.java,66,83
selected,1510991.java,31,46
----------------------------------------
    @SuppressWarnings("unchecked")
    private static void update(EntityManagerFactory entityManagerFactory) {
        EntityManager entityManager = entityManagerFactory.createEntityManager();
        try {
            entityManager.getTransaction().begin();
            Query query = entityManager.createQuery("SELECT p FROM Person p");
            Collection<Person> collection = (Collection<Person>) query.getResultList();
            for (Person person : collection) {
                person.setFirstName(person.getFirstName() + "-1");
            }
            entityManager.getTransaction().commit();
        } finally {
            if (entityManager.getTransaction().isActive()) {
                entityManager.getTransaction().rollback();
            }
            entityManager.close();
        }
    }
----------------------------------------
    private static void insert(EntityManagerFactory entityManagerFactory) {
        EntityManager entityManager = entityManagerFactory.createEntityManager();
        try {
            entityManager.getTransaction().begin();
            Person person = new Person();
            person.setFirstName("Jesse");
            person.setLastName("James");
            entityManager.persist(person);
            entityManager.getTransaction().commit();
        } finally {
            if (entityManager.getTransaction().isActive()) {
                entityManager.getTransaction().rollback();
            }
            entityManager.close();
        }
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,2698904.java,35,55
selected,2698904.java,8,33
----------------------------------------
    public void update() {
        clearErr();
        DbConn conn = new DbConn();
        try {
            String sql = "";
            sql = "update companysales set salename = ? ,comid=?,saletel=?,salemail=? ,remark =? where saleid = ?";
            conn.prepare(sql);
            conn.setString(1, getSalename());
            conn.setInt(2, getComid());
            conn.setString(3, getSaletel());
            conn.setString(4, getSalemail());
            conn.setString(5, getRemark());
            conn.setInt(6, getSaleid());
            conn.executeUpdate();
        } catch (Exception ex) {
            ex.printStackTrace();
            setErr(ex.getMessage());
        } finally {
            conn.close();
        }
    }
----------------------------------------
    public void insert() {
        clearErr();
        DbConn conn = new DbConn();
        try {
            conn.setAutoCommit(false);
            String sql = "insert into companysales(salename,comid,saletel,salemail," + "remark) values(?,?,?,?,?)";
            conn.prepare(sql);
            conn.setString(1, getSalename());
            conn.setInt(2, getComid());
            conn.setString(3, getSaletel());
            conn.setString(4, getSalemail());
            conn.setString(5, getRemark());
            conn.executeUpdate();
            conn.commit();
        } catch (Exception ex) {
            ex.printStackTrace();
            setErr(ex.getMessage());
            try {
                conn.rollback();
            } catch (Exception e) {
                e.printStackTrace();
            }
        } finally {
            conn.close();
        }
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,1819922.java,302,313
default,14524.java,59,69
----------------------------------------
    public static String removeDoubleBackslashes(String myString) {
        StringBuffer buffer = new StringBuffer(myString);
        StringBuffer output = new StringBuffer();
        output.append(buffer.charAt(0));
        for (int counter = 1; counter < buffer.length(); counter = counter + 1) {
            if ((buffer.charAt(counter - 1) == '\\') && (buffer.charAt(counter) == '\\')) {
            } else {
                output.append(buffer.charAt(counter));
            }
        }
        return output.toString();
    }
----------------------------------------
    private String cutGroupName(String s) {
        StringBuffer ret = new StringBuffer();
        int l = s.length();
        int i = 4;
        while (i < l) {
            if (s.charAt(i) == ',') return ret.toString();
            ret.append(s.charAt(i));
            i++;
        }
        return ret.toString();
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,2431576.java,178,188
selected,623319.java,35,48
----------------------------------------
    private byte[] readStream(InputStream inputStream) throws Exception {
        ByteArrayOutputStream outputStream = new ByteArrayOutputStream();
        byte[] buffer = new byte[1024];
        int len = -1;
        while ((len = inputStream.read(buffer)) != -1) {
            outputStream.write(buffer, 0, len);
        }
        outputStream.close();
        inputStream.close();
        return outputStream.toByteArray();
    }
----------------------------------------
    ParamPart(String name, ServletInputStream in, String boundary, String encoding) throws IOException {
        super(name);
        this.encoding = encoding;
        PartInputStream pis = new PartInputStream(in, boundary);
        ByteArrayOutputStream baos = new ByteArrayOutputStream(512);
        byte[] buf = new byte[128];
        int read;
        while ((read = pis.read(buf)) != -1) {
            baos.write(buf, 0, read);
        }
        pis.close();
        baos.close();
        value = baos.toByteArray();
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
default,95950.java,73,82
default,53413.java,64,71
----------------------------------------
    String sequenceUsingWhile(int start, int stop) {
        StringBuilder builder = new StringBuilder();
        int i = start;
        while (i <= stop) {
            if (i > start) builder.append(',');
            builder.append(i);
            i++;
        }
        return builder.toString();
    }
----------------------------------------
    String sequenceUsingFor(int start, int stop) {
        StringBuilder builder = new StringBuilder();
        for (int i = start; i <= stop; i++) {
            if (i > start) builder.append(',');
            builder.append(i);
        }
        return builder.toString();
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,1051350.java,215,222
selected,611726.java,175,180
----------------------------------------
    public static final double[] modulus(double[] a, double[] b) {
        int size = a.length;
        double[] result = new double[size];
        for (int x = 0; x < size; x++) {
            result[x] = a[x] % b[x];
        }
        return result;
    }
----------------------------------------
    public static float[] mul(float[] v, double scalar) {
        int iN = v.length;
        float[] n = new float[iN];
        for (int i = 0; i < iN; i++) n[i] = (float) (v[i] * scalar);
        return n;
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,439422.java,76,90
selected,287416.java,67,83
----------------------------------------
    @Override
    @SuppressWarnings("unchecked")
    public List<Reading> getAll() {
        Session sessao = getSession().getCurrentSession();
        Transaction transacao = sessao.beginTransaction();
        List<Reading> lista = new ArrayList<Reading>();
        try {
            lista = sessao.createCriteria(Reading.class).list();
            transacao.commit();
        } catch (Exception e) {
            e.printStackTrace();
            transacao.rollback();
        }
        return lista;
    }
----------------------------------------
    @SuppressWarnings("unchecked")
    public List<Threadsmod> findByThreadsBytid(int tid) {
        Transaction tr = null;
        try {
            Session session = HibernateUtil.getSessionFactory().getCurrentSession();
            tr = session.beginTransaction();
            Query query = session.createQuery("from Threadsmod as m where m.id.tid=? order by m.id.dateline desc");
            query.setParameter(0, tid);
            List<Threadsmod> modlist = query.list();
            tr.commit();
            return modlist;
        } catch (HibernateException e) {
            if (tr != null) tr.rollback();
            e.printStackTrace();
        }
        return null;
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,1372864.java,648,657
selected,2308223.java,710,719
----------------------------------------
    public FloatMatrix times(float s) {
        FloatMatrix X = new FloatMatrix(m, n);
        float[][] C = X.getArray();
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                C[i][j] = s * A[i][j];
            }
        }
        return X;
    }
----------------------------------------
    public static Matrix random(int m, int n) {
        Matrix A = new Matrix(m, n);
        double[][] X = A.getArray();
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                X[i][j] = Math.random();
            }
        }
        return A;
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,2027399.java,119,124
selected,114857.java,391,403
----------------------------------------
    private static byte[] toByteArray(InputStream in) throws IOException {
        ByteArrayOutputStream bout = new ByteArrayOutputStream();
        byte[] buf = new byte[1024];
        for (int r; (r = in.read(buf)) != -1; bout.write(buf, 0, r)) ;
        return bout.toByteArray();
    }
----------------------------------------
    byte[] loadBytesFromStream(InputStream in) throws IOException {
        int chunkSize = 4096;
        int count;
        ByteArrayOutputStream bo = new ByteArrayOutputStream();
        byte[] b = new byte[chunkSize];
        try {
            while ((count = in.read(b, 0, chunkSize)) > 0) bo.write(b, 0, count);
            return bo.toByteArray();
        } finally {
            bo.close();
            bo = null;
        }
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,23248.java,29,40
selected,2030312.java,96,109
----------------------------------------
    protected String getRequestContent(String urlText, String method) throws Exception {
        URL url = new URL(urlText);
        HttpURLConnection urlcon = (HttpURLConnection) url.openConnection();
        urlcon.setRequestMethod(method);
        urlcon.setUseCaches(false);
        urlcon.connect();
        BufferedReader reader = new BufferedReader(new InputStreamReader(urlcon.getInputStream(), "UTF-8"));
        String line = reader.readLine();
        reader.close();
        urlcon.disconnect();
        return line;
    }
----------------------------------------
    public static String getResourceFromURL(URL url, String acceptHeader) throws java.io.IOException {
        HttpURLConnection urlConnection = (HttpURLConnection) url.openConnection();
        urlConnection.setUseCaches(false);
        urlConnection.setRequestProperty("Accept", acceptHeader);
        urlConnection.setInstanceFollowRedirects(true);
        BufferedReader input = new BufferedReader(new InputStreamReader(urlConnection.getInputStream()));
        String content = "";
        String line;
        while ((line = input.readLine()) != null) {
            content += line;
        }
        input.close();
        return content;
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,1200061.java,283,290
default,115412.java,54,62
----------------------------------------
    public static String join(String[] s, String delimiter) {
        StringBuffer buffer = new StringBuffer();
        for (int i = 0; i < s.length; i++) {
            buffer.append(s[i].toString());
            if (i + 1 != s.length) buffer.append(delimiter);
        }
        return buffer.toString();
    }
----------------------------------------
    String sequenceUsingDo(int start, int stop) {
        StringBuilder builder = new StringBuilder();
        int i = start;
        do {
            if (i > start) builder.append(',');
            builder.append(i);
        } while (++i <= stop);
        return builder.toString();
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,2197661.java,22,35
selected,1617066.java,29,39
----------------------------------------
    static final String md5(String text) throws RtmApiException {
        MessageDigest md;
        try {
            md = MessageDigest.getInstance("MD5");
            byte[] md5hash = new byte[32];
            md.update(text.getBytes("UTF-8"), 0, text.length());
            md5hash = md.digest();
            return convertToHex(md5hash);
        } catch (NoSuchAlgorithmException e) {
            throw new RtmApiException("Md5 error: NoSuchAlgorithmException - " + e.getMessage());
        } catch (UnsupportedEncodingException e) {
            throw new RtmApiException("Md5 error: UnsupportedEncodingException - " + e.getMessage());
        }
    }
----------------------------------------
    public static String hash(String text) {
        try {
            MessageDigest md;
            md = MessageDigest.getInstance("SHA-1");
            md.update(text.getBytes("UTF-8"), 0, text.length());
            byte[] md5hash = md.digest();
            return convertToHex(md5hash);
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,664170.java,93,102
selected,563544.java,141,149
----------------------------------------
    public static void toStream(OutputStream os, File file) throws java.io.FileNotFoundException, java.io.IOException {
        toStream(os, (int) file.length());
        byte b[] = new byte[1024];
        InputStream is = new FileInputStream(file);
        int numRead = 0;
        while ((numRead = is.read(b)) > 0) {
            os.write(b, 0, numRead);
        }
        os.flush();
    }
----------------------------------------
    protected void writeContent(InputStream inputStream, OutputStream outputStream) throws IOException {
        byte[] buffer = new byte[1024];
        int read = 0;
        while ((read = inputStream.read(buffer)) > 0) {
            outputStream.write(buffer, 0, read);
        }
        outputStream.flush();
        outputStream.close();
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,100447.java,379,392
selected,407716.java,109,118
----------------------------------------
    private String hash(String password) {
        if (password == null) {
            return null;
        }
        String ret = null;
        try {
            MessageDigest md = MessageDigest.getInstance("SHA1");
            byte[] pwdhash = md.digest(password.trim().getBytes());
            ret = new String(Hex.encode(pwdhash));
        } catch (NoSuchAlgorithmException nsae) {
            log.error("SHA1 algorithm not supported.", nsae);
        }
        return ret;
    }
----------------------------------------
    private static String hashPassword(String password) {
        try {
            MessageDigest digest = MessageDigest.getInstance("SHA-1");
            byte[] hash = digest.digest(password.getBytes());
            return new String(encodeHex(hash));
        } catch (NoSuchAlgorithmException e) {
            LOG.error("WTF? SHA-1 not available", e);
            return password;
        }
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,712665.java,215,226
selected,1171727.java,62,73
----------------------------------------
    public static int copyStream(final InputStream in, final OutputStream out) throws IOException {
        int readedCount = 0;
        final byte[] tmpBuf = new byte[10240];
        while (true) {
            final int numRead = in.read(tmpBuf);
            if (numRead == -1) break;
            out.write(tmpBuf, 0, numRead);
            out.flush();
            readedCount += numRead;
        }
        return readedCount;
    }
----------------------------------------
    private static void copy(InputStream in, OutputStream out) throws IOException {
        synchronized (in) {
            synchronized (out) {
                byte[] buffer = new byte[256];
                while (true) {
                    int bytesRead = in.read(buffer);
                    if (bytesRead == -1) break;
                    out.write(buffer, 0, bytesRead);
                }
            }
        }
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,1955057.java,25,31
selected,904518.java,99,107
----------------------------------------
    private static String bytesToHex(byte[] b) {
        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < b.length; ++i) {
            sb.append((Integer.toHexString((b[i] & 0xFF) | 0x100)).substring(1, 3));
        }
        return sb.toString();
    }
----------------------------------------
    private String generateCacheKey() {
        byte[] bytes = IDUtil.pseudoUniqueByteSequence8();
        StringBuffer buffer = new StringBuffer(17);
        buffer.append("I");
        for (int i = 0; i < bytes.length; i++) {
            IDUtil.appendFormattedByte(buffer, bytes[i]);
        }
        return buffer.toString();
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,1012963.java,129,136
selected,1321892.java,189,197
----------------------------------------
    public ComplexMatrix toComplexMatrix() {
        final double arrayRe[][] = new double[numRows][numCols];
        final double arrayIm[][] = new double[numRows][numCols];
        for (int j, i = 0; i < numRows; i++) {
            for (j = 0; j < numCols; j++) arrayRe[i][j] = matrix[i][j];
        }
        return new ComplexMatrix(arrayRe, arrayIm);
    }
----------------------------------------
    public double[][] getArrayCopy() {
        double[][] C = new double[m][n];
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                C[i][j] = A[i][j];
            }
        }
        return C;
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,1997854.java,60,75
selected,2641701.java,47,59
----------------------------------------
    @SuppressWarnings("unchecked")
    public static void query(EntityManagerFactory entityManagerFactory) {
        EntityManager entityManager = entityManagerFactory.createEntityManager();
        try {
            Query query = entityManager.createQuery("SELECT o FROM Order o");
            Collection<Order> collection = (Collection<Order>) query.getResultList();
            for (Order order : collection) {
                System.out.println("found: " + order);
                for (OrderItem item : order.getItems()) {
                    System.out.println("  with item: " + item);
                }
            }
        } finally {
            entityManager.close();
        }
    }
----------------------------------------
    @SuppressWarnings("unchecked")
    public static void query(EntityManagerFactory entityManagerFactory) {
        EntityManager entityManager = entityManagerFactory.createEntityManager();
        try {
            Query query = entityManager.createQuery("SELECT p FROM Person p");
            Collection<Person> collection = (Collection<Person>) query.getResultList();
            for (Person person : collection) {
                System.out.println("found: " + person);
            }
        } finally {
            entityManager.close();
        }
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,1421935.java,271,283
selected,1960353.java,402,413
----------------------------------------
    public static String convertToHex(byte[] data) {
        StringBuilder buf = new StringBuilder();
        int length = data.length;
        for (int i = 0; i < length; ++i) {
            int halfbyte = (data[i] >>> 4) & 0x0F;
            int two_halfs = 0;
            do {
                if ((0 <= halfbyte) && (halfbyte <= 9)) buf.append((char) ('0' + halfbyte)); else buf.append((char) ('a' + (halfbyte - 10)));
                halfbyte = data[i] & 0x0F;
            } while (++two_halfs < 1);
        }
        return buf.toString();
    }
----------------------------------------
    private String convertToHex(byte[] data) {
        StringBuffer buf = new StringBuffer();
        for (int i = 0; i < data.length; i++) {
            int halfbyte = (data[i] >>> 4) & 0x0F;
            int two_halfs = 0;
            do {
                if ((0 <= halfbyte) && (halfbyte <= 9)) buf.append((char) ('0' + halfbyte)); else buf.append((char) ('a' + (halfbyte - 10)));
                halfbyte = data[i] & 0x0F;
            } while (two_halfs++ < 1);
        }
        return buf.toString();
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,918375.java,233,245
selected,1268382.java,77,84
----------------------------------------
    protected String stripVersionNumber(final String rawFileName) {
        if (!stripVersion) {
            return rawFileName;
        }
        String fileName = rawFileName;
        String ext = fileName.substring(fileName.length() - 4);
        int pos = fileName.lastIndexOf("-");
        if (pos > -1) {
            fileName = fileName.substring(0, pos) + ext;
        }
        printDebug("add:" + fileName);
        return fileName;
    }
----------------------------------------
    private String getFileName(String fileURI) {
        mLog.debug("Input URI: " + fileURI);
        int length = fileURI.length();
        int breakPoint = fileURI.lastIndexOf("/");
        String fileName = fileURI.substring(breakPoint + 1, length);
        mLog.debug("File Name: " + fileName);
        return fileName;
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,2292474.java,9,17
selected,1204939.java,33,37
----------------------------------------
    public static String criptografar(String senha) throws NoSuchAlgorithmException {
        MessageDigest md = MessageDigest.getInstance("MD5");
        BigInteger hash = new BigInteger(1, md.digest(senha.getBytes()));
        String s = hash.toString(16);
        if (s.length() % 2 != 0) {
            s = "0" + s;
        }
        return s;
    }
----------------------------------------
    public static String toMD5(String s) throws Exception {
        MessageDigest m = MessageDigest.getInstance("MD5");
        m.update(s.getBytes(), 0, s.length());
        return new BigInteger(1, m.digest()).toString(16);
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,589840.java,62,70
default,131022.java,603,609
----------------------------------------
    public static final String toString(byte[] array) {
        if (array == null) return "null";
        StringBuffer sb = new StringBuffer(128).append('[');
        for (int j = 0; j < array.length; ++j) {
            sb.append(array[j]);
            if (j != array.length - 1) sb.append(", ");
        }
        return sb.append(']').toString();
    }
----------------------------------------
        public String toString() {
            StringBuffer s = new StringBuffer();
            s.append("ed:");
            for (int i = 0; i < count; i++) s.append(" " + encoding[args[i]]);
            if (size != 0) s.append(" (" + encoding[size] + ")");
            return s.toString();
        }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,2559582.java,165,177
selected,1870010.java,321,338
----------------------------------------
    private String readLogFileIntoString(File aFile) {
        Reader reader = null;
        SdlUnsynchronizedCharArrayWriter writer = new SdlUnsynchronizedCharArrayWriter();
        try {
            reader = new FileReader(aFile);
            char[] buff = new char[1024 * 128];
            int read;
            while ((read = reader.read(buff)) != -1) writer.write(buff, 0, read);
        } catch (IOException e) {
            SdlCloser.close(reader);
        }
        return writer.toString();
    }
----------------------------------------
    public static String convertStreamToString(InputStream is) throws IOException {
        if (is != null) {
            Writer writer = new StringWriter();
            char[] buffer = new char[1024];
            try {
                Reader reader = new BufferedReader(new InputStreamReader(is, "UTF-8"));
                int n;
                while ((n = reader.read(buffer)) != -1) {
                    writer.write(buffer, 0, n);
                }
            } finally {
                is.close();
            }
            return writer.toString();
        } else {
            return "";
        }
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,2027381.java,112,125
default,36477.java,263,269
----------------------------------------
    public static void copyFromFileToFile(File inputFile, File outputFile) throws IOException {
        FileInputStream inputStream = new FileInputStream(inputFile);
        FileOutputStream outputStream = new FileOutputStream(outputFile);
        try {
            byte[] buffer = new byte[4096];
            int bytesRead = 0;
            while ((bytesRead = inputStream.read(buffer)) != -1) {
                outputStream.write(buffer, 0, bytesRead);
            }
        } finally {
            inputStream.close();
            outputStream.close();
        }
    }
----------------------------------------
    private void copyFile(InputStream in, OutputStream out) throws IOException {
        byte[] buffer = new byte[4096];
        int bytesRead;
        while ((bytesRead = in.read(buffer)) != -1) out.write(buffer, 0, bytesRead);
        in.close();
        out.close();
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,1359462.java,402,413
selected,1316903.java,590,598
----------------------------------------
    public ZMatrix difference(ZMatrix m) {
        if (!sameSize(m)) {
            throw new ArithmeticException("Unmatched matrix dimensions.");
        }
        ZMatrix sum = new ZMatrix(rows, columns);
        for (int r = 0; r < rows; r++) {
            for (int c = 0; c < columns; c++) {
                sum.coefficients[r][c] = coefficients[r][c] - m.coefficients[r][c];
            }
        }
        return sum;
    }
----------------------------------------
    public Matrix arrayTimesEquals(Matrix B) {
        checkMatrixDimensions(B);
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                A[i][j] = A[i][j] * B.A[i][j];
            }
        }
        return this;
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,190000.java,138,147
selected,1097548.java,430,434
----------------------------------------
    private void sendFile(OutputStream out, File file) throws IOException {
        InputStream in = new FileInputStream(file);
        try {
            byte[] buffer = new byte[1024];
            int bytes;
            while ((bytes = in.read(buffer)) != -1) out.write(buffer, 0, bytes);
        } finally {
            in.close();
        }
    }
----------------------------------------
    public static void send(InputStream in, OutputStream out) throws IOException {
        byte[] buffer = new byte[BUFFER_SIZE];
        int c;
        while ((c = in.read(buffer)) > 0) out.write(buffer, 0, c);
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,190000.java,138,147
selected,1200879.java,266,272
----------------------------------------
    private void sendFile(OutputStream out, File file) throws IOException {
        InputStream in = new FileInputStream(file);
        try {
            byte[] buffer = new byte[1024];
            int bytes;
            while ((bytes = in.read(buffer)) != -1) out.write(buffer, 0, bytes);
        } finally {
            in.close();
        }
    }
----------------------------------------
    private void streamToFile(InputStream in, File dest) throws IOException {
        byte[] buffer = new byte[8192];
        FileOutputStream out = new FileOutputStream(dest);
        int length;
        while ((length = in.read(buffer, 0, buffer.length)) != -1) out.write(buffer, 0, length);
        out.close();
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,1124571.java,219,232
selected,2280520.java,9,15
----------------------------------------
    public static String getMD5(String input) {
        try {
            MessageDigest md = MessageDigest.getInstance("MD5");
            byte[] messageDigest = md.digest(input.getBytes());
            BigInteger number = new BigInteger(1, messageDigest);
            String hashtext = number.toString(16);
            while (hashtext.length() < 32) {
                hashtext = "0" + hashtext;
            }
            return hashtext;
        } catch (NoSuchAlgorithmException e) {
            throw new RuntimeException(e);
        }
    }
----------------------------------------
    public static String criptografaSenha(String senha) throws NoSuchAlgorithmException {
        MessageDigest md = MessageDigest.getInstance("MD5");
        BigInteger hash = new BigInteger(1, md.digest(senha.getBytes()));
        String s = hash.toString(16);
        if (s.length() % 2 != 0) s = "0" + s;
        return s;
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,989358.java,109,116
selected,757620.java,68,78
----------------------------------------
    private static String toHexString(byte[] v) {
        StringBuffer sb = new StringBuffer(v.length * 2);
        for (int i = 0; i < v.length; i++) {
            int b = v[i] & 0xFF;
            sb.append(HEX_DIGITS.charAt(b >>> 4)).append(HEX_DIGITS.charAt(b & 0xF));
        }
        return sb.toString();
    }
----------------------------------------
    private static String byteArrayToHexString(byte[] b) {
        StringBuffer sb = new StringBuffer(b.length * 2);
        for (int i = 0; i < b.length; i++) {
            int v = b[i] & 0xff;
            if (v < 16) {
                sb.append('0');
            }
            sb.append(Integer.toHexString(v));
        }
        return sb.toString().toUpperCase();
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,271253.java,170,183
selected,1814816.java,430,438
----------------------------------------
    public static int[][] computeEdges(int[][] contab) {
        int N = contab.length;
        int[][] edges = new int[N][N];
        for (int i = 0; i < N; i++) {
            for (int j = 0; j < N; j++) {
                if (contab[i][j] > 0) {
                    edges[i][j] = 1;
                } else {
                    edges[i][j] = INFINITY;
                }
            }
        }
        return edges;
    }
----------------------------------------
    public static double[] matrixProd(final double[] m1, final double[][] m2) {
        final double[] res = new double[m2[0].length];
        for (int i = 0; i < m2[0].length; i++) {
            for (int k = 0; k < m1.length; k++) {
                res[i] += m1[k] * m2[k][i];
            }
        }
        return res;
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,929375.java,216,223
selected,1327574.java,73,85
----------------------------------------
    private static InputStream getAsInputStreamFromClassLoader(String filename) {
        ClassLoader cl = Thread.currentThread().getContextClassLoader();
        InputStream is = cl == null ? null : cl.getResourceAsStream(filename);
        if (is == null) {
            is = XmlConfigurator.class.getClassLoader().getResourceAsStream(filename);
        }
        return is;
    }
----------------------------------------
    public static InputStream getResourceAsStream(String path) {
        InputStream stream = ResourceLoader.class.getResourceAsStream(path);
        if (stream == null) {
            stream = Thread.currentThread().getContextClassLoader().getResourceAsStream(path);
        }
        if (stream == null) {
            stream = ClassLoader.getSystemResourceAsStream(path);
        }
        if (stream == null) {
            throw new RuntimeException("Oh no - couldn't load resource: " + path);
        }
        return stream;
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,1632427.java,150,157
selected,2604410.java,744,752
----------------------------------------
    void copyPartTables(double[][] dm) {
        oldPartTable = new int[dm.length][dm.length];
        for (int i = 0; i < partTable.length; i++) {
            for (int j = 0; j < partTable.length; j++) {
                oldPartTable[i][j] = partTable[i][j];
            }
        }
    }
----------------------------------------
    public static float[][] toFloat(final double[][] m1) {
        final float[][] res = new float[m1.length][m1[0].length];
        for (int j = 0; j < m1.length; j++) {
            for (int i = 0; i < m1[0].length; i++) {
                res[j][i] = (float) m1[j][i];
            }
        }
        return res;
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,401905.java,253,262
selected,653187.java,22,29
----------------------------------------
    static String getExtension(final String name) {
        if ((name == null) || (name.length() == 0)) {
            return null;
        }
        int p = name.lastIndexOf('.');
        if ((p != -1) && (p > 0) && (p < name.length() - 1)) {
            return name.substring(p + 1);
        }
        return null;
    }
----------------------------------------
    public static String getExtension(String filename) {
        String ext = null;
        int i = filename.lastIndexOf('.');
        if (i > 0 && i < filename.length() - 1) {
            ext = filename.substring(i + 1).toLowerCase();
        }
        return ext;
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,2701228.java,247,257
selected,101843.java,116,127
----------------------------------------
    public static final String toHex(byte hash[]) {
        StringBuffer buf = new StringBuffer(hash.length * 2);
        int i;
        for (i = 0; i < hash.length; i++) {
            if (((int) hash[i] & 0xff) < 0x10) {
                buf.append("0");
            }
            buf.append(Long.toString((int) hash[i] & 0xff, 16));
        }
        return buf.toString();
    }
----------------------------------------
    public static String toHex(byte[] buffer) {
        StringBuffer sb = new StringBuffer();
        String s = null;
        for (int i = 0; i < buffer.length; i++) {
            s = Integer.toHexString((int) buffer[i] & 0xff);
            if (s.length() < 2) {
                sb.append('0');
            }
            sb.append(s);
        }
        return sb.toString();
    }
----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
selected,669770.java,1034,1045
default,60426.java,417,427
----------------------------------------
    public Bbuf readFrom(alto.io.Input in, int many) throws java.io.IOException {
        byte[] iob = new byte[COPY];
        for (int cc = 0, count; cc < many; ) {
            count = Math.min((many - cc), COPY);
            int re = in.read(iob, 0, count);
            if (0 < re) {
                this.write(iob, 0, re);
                cc += re;
            } else return this;
        }
        return this;
    }
----------------------------------------
    private static void copyStream(final InputStream input, final OutputStream output) throws IOException {
        final int BUFFER_SIZE = 1024 * 4;
        final byte[] buffer = new byte[BUFFER_SIZE];
        while (true) {
            final int count = input.read(buffer, 0, BUFFER_SIZE);
            if (-1 == count) {
                break;
            }
            output.write(buffer, 0, count);
        }
    }
----------------------------------------
